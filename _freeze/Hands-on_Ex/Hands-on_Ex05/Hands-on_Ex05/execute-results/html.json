{
  "hash": "909213a28af0b3ca734284d73e3cacfe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands on Exercise 5\"\ndescription : Modelling, Visualising and Analysing Network Data with R\ndate: 2025-05-11\ndate-modified: \"last-modified\"\nexecute:\n  warning: false\n  freeze: true\nformat:\n  html:\n    number-offset: 8\n---\n\n\n\n# Modelling, Visualising and Analysing Network Data with R\n\n## Overview\n\nIn this hands-on exercise, we will learn how to model, analyse and visualise network data using R. \n\nBy the end of this hands-on exercise, we will be able to:\n\n-   Create graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\n-   Build network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\n-   Build advanced graph visualisation by incorporating the network geometrics, and\n-   Build interactive network visualisation using visNetwork package.\n\n## Getting Started\n\n### Installing and Launching R Packages\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. \n\n- **igraph**: A core package for creating and analyzing network graphs.\n- **tidygraph**: Integrates tidyverse principles into graph data manipulation.\n- **ggraph**: Extends ggplot2 for network graph visualization.\n- **visNetwork**: Provides interactive network visualizations using vis.js.\n\nIn addition to the four network packages above, the following will also be installed and loaded:\n\n- **tidyverse**: A collection of R packages for data manipulation and visualization.\n- **lubridate**: Designed specifically for working with and wrangling time-related data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'tzdb' successfully unpacked and MD5 sums checked\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'clock' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\Olivia\\AppData\\Local\\Temp\\Rtmp6JMzaa\\downloaded_packages\n```\n\n\n:::\n:::\n\n\n\n## The Data\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n### The Edges Data\n\n-   **GAStech-email_edges.csv** which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n![](img/image.jpg)\n\n### The Nodes Data\n\n-   **GAStech_email_nodes.csv** which consist of the names, department and title of the 55 employees.\n\n![](img/image1.jpg)\n\n### Importing Network Data from Files\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using `read_csv()` of **readr** package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n```\n:::\n\n\n\n### Reviewing the Imported Data\n\nNext, we will examine the structure of the data frame using *glimpse()* of **dplyr**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\nThe output report of `GAStech_edges` shows that the `SentDate` field is currently treated as a **character** data type instead of a **date**.  \nThis is incorrect. Before proceeding, we need to convert the `SentDate` field back to the correct **date** data type.\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}