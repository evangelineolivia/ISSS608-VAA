[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evangeline Olivia’s Visual Analytics Coursework",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications website. In this website, you will find my coursework prepared for this course.\n\nLatest Work :\n\n\n\n\n\n\n\n\n\n\n\nInvestment Vis\n\n\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 3\n\n\nPrototype Module for Shiny Application\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 01\n\n\nSuperstore Sales and Profit Report\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 10\n\n\nInformation Dashboard Design R methods\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9e\n\n\nTreemap Visualisation with R\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9d\n\n\nVisual Multivariate Analysis with Parallel Coordinates Plot\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9c\n\n\nHeatmap for Visualising and Analysing Multivariate Data\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9b\n\n\nVisual Correlation Analysis\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9a\n\n\nCreating Ternary Plot with R\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8c\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8b\n\n\nVisualising Geospatial Point Data\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8a\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 6\n\n\nVisualising and Analysing Time-Oriented Data\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 3\n\n\nExploring VAST 2025 Mini Challenge 1\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 2\n\n\nVAST Challenge 2025 Mini-Challenge 1\n\n\n\nMay 13, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 5\n\n\nModelling, Visualising and Analysing Network Data with R\n\n\n\nMay 11, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1 Feedback\n\n\nLearn from Peers\n\n\n\nMay 08, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4d\n\n\nFunnel Plots for Fair Comparisons\n\n\n\nMay 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4c\n\n\nVisualising Uncertainty\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4b\n\n\nVisual Statistical Analysis\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4a\n\n\nVisualising Distribution\n\n\n\nMay 04, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1\n\n\nSingapore Population Analysis\n\n\n\nMay 01, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3b\n\n\nProgramming Animated Statistical Graphics with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3a\n\n\nProgramming Interactive Data Visualisation with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 2\n\n\nBeyond ggplot2 Fundamentals\n\n\n\nApr 22, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 1\n\n\nA Layered Grammar of Graphics ggplot2 methods\n\n\n\nApr 18, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\n\n\n\n\nOur project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications.\n\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)\n\n\n\n\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\nfont_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)\n\n\n\n\n\n\n\nEdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x00000164373bb1f8&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763 \n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)\n\n\n\n\n\n\n\nCode\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\n\n\nShow the code\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\nShow the code\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Our project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "data &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "font_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "EdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x00000164373bb1f8&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "id_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Code\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\n\n\nShow the code\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\nShow the code\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Show the code\noceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Show the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "For this take-home exercise, we will be working on Mini-Challenge 1 from the VAST Challenge 2025. The objective of this exercise is to design visual analytics methods to track the emergence of a rising artist and forecast the next potential breakout star.\nWe will address the questions from the mini-challenge specifically Question 3:\n\n\n\nWho has Sailor Shift been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators within the broader Oceanus Folk community?\n\n\n\n\n\nWas this influence intermittent or did it show a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the conveerse, how has Oceantus Folk changed the rise of Sailor Shift? From which genre does it draw most of its contemporary inspiration?\n\n\n\n\n\nVisualize the careers of 3 Artist\nCompare and Contrast their rise in Popularity and Influence\nUsing this characterization, gives 3 Predictions of the next Oceanus Folk stars with be over the next 5 Years"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-profile-of-sailor-shifts-career",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-profile-of-sailor-shifts-career",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Who has Sailor Shift been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators within the broader Oceanus Folk community?"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-influence-of-oceantus-folk-to-the-music-world",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-influence-of-oceantus-folk-to-the-music-world",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Was this influence intermittent or did it show a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the conveerse, how has Oceantus Folk changed the rise of Sailor Shift? From which genre does it draw most of its contemporary inspiration?"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#profile-of-what-it-means-to-be-a-rising-star-in-the-music-industry",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#profile-of-what-it-means-to-be-a-rising-star-in-the-music-industry",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Visualize the careers of 3 Artist\nCompare and Contrast their rise in Popularity and Influence\nUsing this characterization, gives 3 Predictions of the next Oceanus Folk stars with be over the next 5 Years"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-packages",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-packages",
    "title": "Take Home Exercise 2",
    "section": "3.1 Loading Packages",
    "text": "3.1 Loading Packages\n\nPackagesPackages Information\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork, kableExtra, showtext)\n\n\n\n\n\n\n\n\n\n\nLibrary\nDescription\n\n\n\n\npacman\nA package management tool that simplifies the process of installing, loading, and managing R packages with a single function. Ideal for scripts requiring multiple libraries.\n\n\ntidyverse\nA cohesive collection of R packages for data science, including ggplot2, dplyr, tidyr, readr, and more—providing consistent grammar for data wrangling and visualization.\n\n\njsonlite\nA fast and flexible JSON parser/serializer, useful for importing and exporting structured data such as API responses or configuration files.\n\n\ntidygraph\nA tidyverse-friendly package for network data manipulation and analysis, built on top of igraph. Enables graph operations using dplyr-like syntax.\n\n\nggraph\nAn extension of ggplot2 for visualizing graph/network data using layered grammar of graphics principles. Works seamlessly with tidygraph.\n\n\nigraph\nA powerful low-level package for network analysis and visualization, supporting complex graph structures, centrality metrics, and community detection.\n\n\nplotly\nEnables creation of interactive plots from ggplot2 or native plotly syntax. Useful for dashboards, exploratory data analysis, and web-based visualizations.\n\n\nvisNetwork\nCreates rich, interactive network visualizations using vis.js. Highly customizable and ideal for interactive dashboards and exploratory analysis.\n\n\nggtext\nEnhances ggplot2 by allowing Markdown/HTML formatting in axis labels, legends, titles, and more—perfect for expressive visual storytelling.\n\n\nggiraph\nAdds interactivity (tooltips, hover effects, hyperlinks) to ggplot2 graphics. Useful for embedding interactive plots in Shiny apps or HTML reports.\n\n\npatchwork\nSimplifies the combination of multiple ggplot2 plots into a single layout using intuitive arithmetic-like syntax. Great for dashboards or multi-panel displays.\n\n\nkableExtra\nExtends knitr::kable() to create professional-looking tables in HTML, LaTeX, or Word with styling, column grouping, footnotes, and more.\n\n\nshowtext\nMakes it easy to use custom fonts in R plots, including Chinese, Japanese, and Korean fonts—ideal for multilingual data visualization."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-data",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-data",
    "title": "Take Home Exercise 2",
    "section": "3.2 Loading Data",
    "text": "3.2 Loading Data\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\nglimpse(data)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame': 37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ..."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#custom-style",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#custom-style",
    "title": "Take Home Exercise 2",
    "section": "3.3 Custom Style",
    "text": "3.3 Custom Style\n\nColorsTheme\n\n\n\ncl &lt;- list(\n  bg = \"#FEFCF3\",\n  t_shirt = \"#7B3F00\",\n  sweater = \"#D7A18F\",\n  jeans = \"#D9C6B0\",\n  title = \"#2F3A3F\",\n  background = \"#F8F1E5\",\n  text = \"#B1A293\",\n  \n  #Nodes\n  Person = \"#D5D1E9\",       \n  MusicalGroup = \"#D0E4EE\",  \n  RecordLabel = \"#F3F5A9\",   \n  Song = \"#F5CF9F\",          \n  Album = \"#F28B82\",\n  \n  #Edges\n  PerformerOf         = \"#e6194b\",  \n  ComposerOf          = \"#f58231\",  \n  ProducerOf          = \"#ffe119\",  \n  LyricistOf          = \"#3cb44b\",  \n  RecordedBy          = \"#42d4f4\",  \n  DistributedBy       = \"#4363d8\",  \n  InStyleOf           = \"#911eb4\",  \n  InterpolatesFrom    = \"#f032e6\",  \n  CoverOf             = \"#fabebe\",  \n  LyricalReferenceTo  = \"#ffd8b1\",  \n  DirectlySamples     = \"#fffac8\", \n  MemberOf            = \"#4A7365\"   \n)\n\n\n\n\nfont_add_google(\"Montserrat\", \"montserrat\")\nshowtext_auto()\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = cl$bg,color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = cl$text,\n  panel = element_rect(fill = cl$bg, color = NA),\n  grid = element_line(color = \"#E6DCD0\"),\n  \n  #Text \n  caption = \"Hover on the nodes to see more details.\",\n  \n  #Node\n  node_size = 7.5,\n  arrow_margin = 3.2,\n  arrow_style = arrow(type = \"closed\", length = unit(2, \"pt\")),\n  base_edge_thickness = 0.2,\n  \n  tooltip = \"background-color: #E6DCD0;\n  color: #2F3A3F;\n  border: 1px solid #e0d7ec;\n  border-radius: 6px;\n  padding: 6px;\n  font-size: 12px;\n  box-shadow: 1px 1px 4px rgba(0,0,0,0.1);\n  \"\n)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#extracting",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#extracting",
    "title": "Take Home Exercise 2",
    "section": "4.1 Extracting",
    "text": "4.1 Extracting\n\nEdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\n# A tibble: 12 × 2\n   Edge_Type          Description                                               \n   &lt;chr&gt;              &lt;chr&gt;                                                     \n 1 PerformerOf        Source (Person or Group) performed the destination (Song …\n 2 ComposerOf         Source (Person) composed the destination (Song or Album)  \n 3 ProducerOf         Source (Person or Label) produced the destination's work …\n 4 LyricistOf         Source (Person) wrote lyrics for the destination (Song or…\n 5 RecordedBy         Destination (Label) recorded the source (Song or Album)   \n 6 DistributedBy      Destination (Label) distributed the source (Song or Album)\n 7 InStyleOf          Source (Song/Album) is in the style of the destination (S…\n 8 InterpolatesFrom   Source (Song/Album) interpolates melody from the destinat…\n 9 CoverOf            Source (Song/Album) is a cover of the destination (Song o…\n10 LyricalReferenceTo Source (Song/Album) makes lyrical reference to the destin…\n11 DirectlySamples    Source (Song/Album) directly samples audio from the desti…\n12 MemberOf           Source (Person) is a member of the destination (MusicalGr…\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\""
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-missing-values",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-missing-values",
    "title": "Take Home Exercise 2",
    "section": "4.2 Check Missing Values",
    "text": "4.2 Check Missing Values\n\nEdgesNodes\n\n\n\ncolSums(is.na(edges))\n\nrelation   source   target      key \n       0        0        0        0 \n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-for-duplicates",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-for-duplicates",
    "title": "Take Home Exercise 2",
    "section": "4.3 Check for Duplicates",
    "text": "4.3 Check for Duplicates\n\nEdgesNodes\n\n\n\nedges[duplicated(edges),]\n\n# A tibble: 0 × 4\n# ℹ 4 variables: relation &lt;chr&gt;, source &lt;int&gt;, target &lt;int&gt;, key &lt;int&gt;\n\n\n\n\n\nnodes[duplicated(nodes),]\n\n# A tibble: 0 × 10\n# ℹ 10 variables: type &lt;chr&gt;, name &lt;chr&gt;, single &lt;lgl&gt;, release_date &lt;chr&gt;,\n#   genre &lt;chr&gt;, notable &lt;lgl&gt;, id &lt;int&gt;, written_date &lt;chr&gt;, stage_name &lt;chr&gt;,\n#   notoriety_date &lt;chr&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#mapping-from-node-id-to-row-index",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#mapping-from-node-id-to-row-index",
    "title": "Take Home Exercise 2",
    "section": "5.1 Mapping from node id to row index",
    "text": "5.1 Mapping from node id to row index\n\nid_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#map-source-and-target-ids-to-row-indices",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#map-source-and-target-ids-to-row-indices",
    "title": "Take Home Exercise 2",
    "section": "5.2 Map source and target IDs to row indices",
    "text": "5.2 Map source and target IDs to row indices\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-out-unmatched-edges",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-out-unmatched-edges",
    "title": "Take Home Exercise 2",
    "section": "5.3 Filtering out unmatched edges",
    "text": "5.3 Filtering out unmatched edges\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-whole-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-whole-graph",
    "title": "Take Home Exercise 2",
    "section": "5.4 Plotting the Whole Graph",
    "text": "5.4 Plotting the Whole Graph\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)\n\ngraph &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(`Node Type` = factor(type, levels = names(cl)))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#understanding-the-most-connected-nodes",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#understanding-the-most-connected-nodes",
    "title": "Take Home Exercise 2",
    "section": "6.1 Understanding the Most Connected Nodes",
    "text": "6.1 Understanding the Most Connected Nodes\n\n\nCode\ngraph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(degree = centrality_degree()) %&gt;%\n  as_tibble() %&gt;%\n  arrange(desc(degree)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  ggplot(aes(x = reorder(name, degree), \n             y = degree, \n             fill = `Node Type`)) +\n  geom_col() +\n  geom_text(aes(label = degree), \n            hjust = -0.2, \n            size = 4, \n            family = theme$font) +\n  coord_flip() +\n  labs(title = \"Top 10 Most Connected Nodes\", x = \"Name\", y = \"Degree\") + \n  scale_fill_manual(values = cl\n  ) +\n  theme_classic() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(family = theme$font, size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\n\n\nDegree is a measure in network analysis that represents the number of direct connections a node has to other nodes.\nHere I plot Top 10 Most Connected Nodes Plot to quickly see the key collaborators and influencers based on their direct connections within the community."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#top-genres",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#top-genres",
    "title": "Take Home Exercise 2",
    "section": "6.2 Top Genres",
    "text": "6.2 Top Genres\n\n\nCode\nnodes %&gt;%\n  filter(!is.na(genre)) %&gt;%\n  count(genre, sort = TRUE) %&gt;%\n  slice_max(n, n = 10) %&gt;%\n  ggplot(aes(x = reorder(genre, n), y = n, fill = n)) +\n  geom_col() +\n  scale_fill_gradient(low = cl$jeans, high = cl$text) +\n  coord_flip() +\n  labs(title = \"Top 10 Genres\", x = \"Genre\", y = \"Count\") +\n  theme_classic() +\n  theme(plot.background = theme$background,\n        panel.background = theme$panel,\n        panel.grid.major = theme$grid,\n        text = element_text(family = theme$font,\n                            size = theme$size),\n        plot.title = theme$title)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\n\n\nOceanus Folk is among the top genres which align with the narrative that Sailor Shift’s rise helped the Oceanus Folk genre into the mainstream music genres.\nDream Pop, Indie Folk, and Synthwave are the most represented genres in the dataset."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#functions",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#functions",
    "title": "Take Home Exercise 2",
    "section": "7.1 Functions",
    "text": "7.1 Functions\nEgo\n\n\nCode\nego_subgraph &lt;- function(graph, center_name) {\n  graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(is_target = name == center_name) %&gt;%\n    convert(to_subgraph, node_is_adjacent(which(is_target)) | is_target)\n}\n\n\nGenre\n\n\nCode\nget_oceanusfolk_subgraph &lt;- function(graph, genre_name = \"Oceanus Folk\", relation_type = \"PerformerOf\") {\n  oceanus_songs &lt;- V(graph)[type == \"Song\" & genre == genre_name]\n  performer_edges &lt;- E(graph)[relation == relation_type & .inc(oceanus_songs)]\n  connected_nodes &lt;- unique(as.vector(ends(graph, performer_edges)))\n  temp_subgraph &lt;- induced_subgraph(graph, V(graph)[name %in% connected_nodes])\n  subgraph.edges(temp_subgraph, E(temp_subgraph)[relation == relation_type])\n}"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#sailor-shift-ego-network",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#sailor-shift-ego-network",
    "title": "Take Home Exercise 2",
    "section": "7.2 Sailor Shift Ego Network",
    "text": "7.2 Sailor Shift Ego Network\n\n\nCode\nsailor_ego &lt;- ego_subgraph(graph, \"Sailor Shift\")\nplot(sailor_ego,\"Sailor Shift\",\"Ego Network of Sailor Shift\",3,5)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#oceanus-folk-sub-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#oceanus-folk-sub-graph",
    "title": "Take Home Exercise 2",
    "section": "7.3 Oceanus Folk Sub Graph",
    "text": "7.3 Oceanus Folk Sub Graph\n\n\nCode\noceanusfolk_subgraph &lt;- get_oceanusfolk_subgraph(graph)\nplot(oceanusfolk_subgraph, center_name = \"\", title = \"Oceanus Folk Songs\",1,2,FALSE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-visualize-the-careers-of-three-artists",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-visualize-the-careers-of-three-artists",
    "title": "Take Home Exercise 2",
    "section": "8.1 Question 3 : Visualize the careers of three artists",
    "text": "8.1 Question 3 : Visualize the careers of three artists\nTo ensure genre-relevant comparisons, I limited my analysis to artists connected to the Oceanus Folk community through performer or stylistic influence links.\nTo have a data driven definition of a rising star within Oceanus Folk music industry, I begin by examining the career of Sailor Shift. Her rise in popularity provides a benchmark for identifying the key traits and network patterns that characterize emerging breakout artists in this genre.\nTo identify rising stars in the Oceanus Folk genre, I propose the following set of metrics based on network structure and artist activity:\n\n8.1.1 Defining Key Metrics\n\n\n\nRising Star Profile Metrics\n\n\n\n\n\n\nTrait\nMeasured By\n\n\n\n\nCreative Activity\nSongs & Album released over time\n\n\nCreative Contribution\nComposerOf, LyricistOf, ProducerOf edges\n\n\nCollaboration\nAny other person who is connected to the same song(s) as the artist via a creative roles\n\n\nPublic Recognition\nNumber of notable releases over time\n\n\n\n\n\n\n\n8.1.2 Functions\nPlot\n\n\nCode\nplot &lt;- function(graph, center_name, title, size_1, size_2, show_arrows = TRUE, layout = \"fr\") {\n  set.seed(123)\n\n  V(graph)$type       &lt;- trimws(as.character(V(graph)$type))\n  V(graph)$name       &lt;- gsub(\"'\", \"`\", V(graph)$name)\n  V(graph)$is_center  &lt;- V(graph)$name == center_name\n  V(graph)$tooltip    &lt;- paste0(\"Name: \", V(graph)$name, \"\\nYear: \", V(graph)$release_date)\n  V(graph)$node_size  &lt;- scales::rescale(degree(graph), to = c(size_1, size_2))\n\n  E(graph)$relation   &lt;- trimws(as.character(E(graph)$relation))\n\n  node_colors &lt;- cl[names(cl) %in% unique(V(graph)$type)]\n  edge_colors &lt;- unlist(cl[names(cl) %in% unique(E(graph)$relation)])\n\n  g &lt;- ggraph(graph, layout = layout) +\n    geom_edge_link(\n      aes(edge_colour = relation),\n      arrow     = if (show_arrows) arrow(length = unit(3, \"mm\"), type = \"closed\") else NULL,\n      end_cap   = circle(0.5, \"mm\"),\n      start_cap = circle(0.5, \"mm\"),\n      width     = 0.3,\n      alpha     = 0.7\n    ) +\n    scale_edge_colour_manual(values = edge_colors, name = \"Edge Type\") +\n    \n    geom_point_interactive(\n      aes(\n        x = x, y = y,\n        fill     = as.character(type),\n        tooltip  = tooltip,\n        data_id  = name,\n        size     = node_size,\n        stroke   = ifelse(is_center, 1, 0.15)\n      ),\n      shape = 21\n    ) +\n    scale_size_identity() +\n\n    geom_node_text(\n      aes(label = ifelse(is_center, name, \"\")),\n      nudge_y = 0.5, \n      nudge_x = 0.2,\n      repel   = TRUE,\n      size    = 4,\n      color   = \"black\"\n    ) +\n\n    labs(\n      title   = title,\n      caption = \"Hover to view node's details\"\n    ) +\n    scale_fill_manual(values = node_colors, name = \"Node Type\") +\n    theme_minimal() +\n    theme(\n      panel.border      = element_rect(color = \"black\", fill = NA, size = 0.5),\n      axis.title        = element_blank(),\n      axis.text         = element_blank(),\n      axis.ticks        = element_blank(),\n      panel.grid        = element_blank(),\n      plot.background   = element_rect(fill = \"#FEFCF3\", color = NA),\n      plot.title        = element_text(color = cl$title, size = 14, face = \"bold\"),\n      plot.caption      = element_text(hjust = 0, size = 8, face = \"bold\", \n                                       margin = margin(t = 10), color = cl$title),\n      legend.text       = element_text(size = 9),\n      legend.title      = element_text(size = 10),\n      legend.key.size   = unit(0.5, \"lines\"),\n      legend.spacing.y  = unit(2, \"pt\")\n    )\n\n  girafe(\n    ggobj   = g,\n    options = list(opts_tooltip(css = theme$tooltip))\n  )\n}\n\n\nClean Duplicates\n\n\nCode\nclean_duplicate_artist &lt;- function(graph, artist_name) {\n\n  igraph &lt;- as.igraph(graph)\n\n  node_ids &lt;- which(V(igraph)$name == artist_name)\n\n  if (length(node_ids) &gt; 1) {\n    main_node &lt;- node_ids[1]\n    dup_nodes &lt;- node_ids[-1]\n\n    for (dup in dup_nodes) {\n      inc_edges &lt;- incident(igraph, dup, mode = \"all\")\n\n      for (e in inc_edges) {\n        ends_ids &lt;- ends(igraph, e, names = FALSE)\n\n        from_id &lt;- ends_ids[1]\n        to_id   &lt;- ends_ids[2]\n\n        if (from_id == dup) from_id &lt;- main_node\n        if (to_id == dup) to_id &lt;- main_node\n\n        if (from_id != to_id) {\n          edge_attrs &lt;- edge.attributes(igraph, e)\n\n          igraph &lt;- add_edges(igraph, c(from_id, to_id))\n          new_edge_id &lt;- ecount(igraph)\n\n          for (attr_name in names(edge_attrs)) {\n            edge_attr(igraph, attr_name, index = new_edge_id) &lt;- edge_attrs[[attr_name]]\n          }\n        }\n      }\n    }\n\n    igraph &lt;- delete_vertices(igraph, dup_nodes)\n  }\n\n  return(as_tbl_graph(igraph))\n}\n\n\nCreative Activity\n\n\nCode\nartist_creativity &lt;- function(graph, artist_name) {\n\n  artist_index &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(index)\n\n  member_of_groups &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n    pull(to)\n\n  group_names &lt;- character()\n  group_indices &lt;- integer()\n\n  if (length(member_of_groups) &gt; 0) {\n    group_names &lt;- graph %&gt;%\n      activate(nodes) %&gt;%\n      mutate(index = row_number()) %&gt;%\n      filter(index %in% member_of_groups) %&gt;%\n      pull(name)\n\n    group_indices &lt;- graph %&gt;%\n      activate(nodes) %&gt;%\n      mutate(index = row_number()) %&gt;%\n      filter(name %in% group_names) %&gt;%\n      pull(index)\n  }\n\n  performer_ids &lt;- c(artist_index, group_indices)\n\n  performed_ids &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n    pull(to)\n\n  performed_works &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(index %in% performed_ids,\n           (type == \"Song\" & single == TRUE & !is.na(single)) | type == \"Album\") %&gt;%\n    select(name, release_date, type, index) %&gt;%\n    arrange(release_date) %&gt;%\n    as_tibble()\n\n  subgraph_indices &lt;- unique(c(artist_index, group_indices, performed_works$index))\n\n  subgraph &lt;- induced_subgraph(graph, vids = subgraph_indices) %&gt;%\n    as_tbl_graph() %&gt;%\n    activate(edges) %&gt;%\n    filter(relation %in% c(\"PerformerOf\", \"MemberOf\")) %&gt;%\n    activate(nodes) %&gt;%\n    mutate(label = case_when(\n      type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n      type == \"Album\" ~ paste0(\"[Album] \", name, \" (\", release_date, \")\"),\n      TRUE ~ name\n    ))\n\n  return(list(\n    graph = subgraph,\n    works = performed_works %&gt;% select(name, type, release_date),\n    group = group_names\n  ))\n}\n\n\n\n\nCode\nrelease_timeline &lt;- function(song_years, artist_name = \"Artist\") {\n\n  release_counts &lt;- song_years %&gt;%\n    filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(release_year = as.integer(release_date)) %&gt;%\n    count(release_year)\n\n  ggplot(release_counts, aes(x = release_year, y = n)) +\n    geom_line(color = cl$jeans, linewidth = 1.2) +\n    geom_point(color = cl$t_shirt, size = 2) +\n    labs(\n      title = paste0(artist_name, \"'s Songs or Albums Release Timeline\"),\n      x = \"Year\",\n      y = \"Number of Releases\"\n    ) +\n    scale_x_continuous(breaks = seq(min(release_counts$release_year),\n                                    max(release_counts$release_year), by = 1)) +\n    scale_y_continuous(breaks = seq(0, max(release_counts$n), by = 1)) +\n    theme_classic() +\n    theme(\n      plot.background = theme$background,\n      panel.background = theme$panel,\n      panel.grid.major = theme$grid,\n      text = element_text(family = theme$font, size = theme$size),\n      plot.title = theme$title,\n      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)\n    )\n}\n\n\nCreative Contribution\n\n\nCode\ncontribution_network &lt;- function(graph, artist_name) {\n\n  artist_id &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(index)\n\n  creative_edges &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_id, relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n    as_tibble()\n\n  node_info &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(index = row_number()) %&gt;%\n  as_tibble()  \n\n  creative_edges &lt;- creative_edges %&gt;%\n    left_join(node_info %&gt;% select(index, name, release_date, type) %&gt;%\n              mutate(release_year = as.integer(release_date)),\n            by = c(\"to\" = \"index\"))\n\n  song_ids &lt;- creative_edges$to\n  subgraph_indices &lt;- unique(c(artist_id, song_ids))\n\n  subgraph &lt;- induced_subgraph(graph, vids = subgraph_indices) %&gt;%\n    as_tbl_graph() %&gt;%\n    activate(edges) %&gt;%\n    filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n    activate(nodes) %&gt;%\n    mutate(\n      label = paste0(name, \" (\", release_date, \")\")\n    )\n\n  song_data &lt;- creative_edges %&gt;%\n    select(name, relation, release_date, release_year) %&gt;%\n    arrange(release_date)\n\n  return(list(graph = subgraph, song_data = song_data))\n}\n\n\nArtist Collaborators\n\n\nCode\nartist_collab_network &lt;- function(graph, artist_name) {\n  collab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  \n  artist_index &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(index)\n  \n  artist_songs &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_index, relation %in% collab_roles) %&gt;%\n    pull(to)\n  \n  collab_edges &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(to %in% artist_songs, relation %in% collab_roles) %&gt;%\n    filter(from != artist_index) %&gt;%\n    as_tibble()\n  \n  collab_node_ids &lt;- unique(c(artist_index, collab_edges$from, collab_edges$to))\n  \n  subgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    `Node Type` == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n  ))\n  \n  return(subgraph)\n}\n\n\nPublic Recognition\n\n\nCode\npublic_recognition_table &lt;- function(graph, artist_name) {\n  artist_id &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(row_id = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(row_id)\n\n  group_ids &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_id, relation == \"MemberOf\") %&gt;%\n    pull(to)\n\n  performer_ids &lt;- if (length(group_ids) &gt; 0) c(artist_id, group_ids) else artist_id\n\n  performer_edges &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from %in% performer_ids, relation == \"PerformerOf\") %&gt;%\n    as_tibble() %&gt;%\n    mutate(Performer = ifelse(from == artist_id, \"Solo\", \"Group\"))\n\n  node_df &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    as_tibble() %&gt;%\n    mutate(row_id = row_number())\n\n  charted &lt;- performer_edges %&gt;%\n    left_join(node_df, by = c(\"to\" = \"row_id\")) %&gt;%\n    filter(type %in% c(\"Song\", \"Album\"), notable == TRUE) %&gt;%\n    filter(type != \"Song\" | single == TRUE) %&gt;%\n    transmute(\n      Title = name,\n      Type = type,\n      Performer,\n      `Release Year` = release_date\n    )\n\n  solo &lt;- charted %&gt;%\n    filter(Performer == \"Solo\") %&gt;%\n    bind_rows(tibble(\n      Title = \"Total\",\n      Type = \"\",\n      Performer = \"\",\n      `Release Year` = as.character(nrow(.))\n    ))\n\n  group &lt;- charted %&gt;%\n    filter(Performer == \"Group\") %&gt;%\n    bind_rows(tibble(\n      Title = \"Total\",\n      Type = \"\",\n      Performer = \"\",\n      `Release Year` = as.character(nrow(.))\n    ))\n\n  return(list(Solo = solo, Group = group))\n}\n\n\n\n\nCode\npublic_recognition_line &lt;- function(graph, artist_name = \"Sailor Shift\") {\n  artist_id &lt;- graph %&gt;% \n    activate(nodes) %&gt;% mutate(row_id = row_number()) %&gt;% filter(name == artist_name) %&gt;% pull(row_id)\n  group_ids &lt;- graph %&gt;% activate(edges) %&gt;% filter(from == artist_id, relation == \"MemberOf\") %&gt;% pull(to)\n  has_group &lt;- length(group_ids) &gt; 0\n  performer_ids &lt;- if (has_group) c(artist_id, group_ids) else artist_id\n\n  performer_edges &lt;- graph %&gt;% activate(edges) %&gt;%\n    filter(from %in% performer_ids, relation == \"PerformerOf\") %&gt;%\n    as_tibble() %&gt;%\n    mutate(Performer = ifelse(from == artist_id, \"Solo\", \"Group\"))\n\n  node_df &lt;- graph %&gt;% activate(nodes) %&gt;% as_tibble() %&gt;% mutate(row_id = row_number())\n\n  charted_releases &lt;- performer_edges %&gt;%\n    left_join(node_df, by = c(\"to\" = \"row_id\")) %&gt;%\n    filter(type %in% c(\"Song\", \"Album\"), notable == TRUE) %&gt;%\n    transmute(Title = name, Type = type, Performer, `Release Year` = as.integer(release_date), Single = single)\n\n  albums &lt;- charted_releases %&gt;% filter(Type == \"Album\")\n  singles &lt;- charted_releases %&gt;% filter(Type == \"Song\", Single == TRUE)\n\n  album_counts &lt;- albums %&gt;% count(`Release Year`, Performer, name = \"Count\") %&gt;% mutate(Type = \"Album\")\n  single_counts &lt;- singles %&gt;% count(`Release Year`, Performer, name = \"Count\") %&gt;% mutate(Type = \"Song\")\n\n  all_years &lt;- min(c(album_counts$`Release Year`, single_counts$`Release Year`), na.rm = TRUE):max(c(album_counts$`Release Year`, single_counts$`Release Year`), na.rm = TRUE)\n  all_performers &lt;- unique(charted_releases$Performer)\n\n  album_complete &lt;- album_counts %&gt;% complete(`Release Year` = all_years, Performer = all_performers, Type = \"Album\", fill = list(Count = 0))\n  single_complete &lt;- single_counts %&gt;% complete(`Release Year` = all_years, Performer = all_performers, Type = \"Song\", fill = list(Count = 0))\n\n  song_dots &lt;- expand.grid(`Release Year` = all_years, Performer = all_performers, stringsAsFactors = FALSE) %&gt;%\n    left_join(singles %&gt;% count(`Release Year`, Performer, name = \"Count\"), by = c(\"Release Year\", \"Performer\")) %&gt;%\n    mutate(Count = replace_na(Count, 0), Type = \"Song\")\n\n  make_plot &lt;- function(df, dots, performer_label, type_label) {\n    line_color &lt;- ifelse(type_label == \"Song\", cl$jeans, cl$jeans)\n    dot_fill &lt;- ifelse(performer_label == \"Solo\", cl$t_shirt, cl$t_shirt)\n\n    ggplot(df, aes(x = `Release Year`, y = Count)) +\n      geom_line(color = line_color, linewidth = 1, alpha = 0.5, linetype = \"dashed\") +\n      geom_point(data = dots, aes(x = `Release Year`, y = Count), color = \"black\", fill = dot_fill, shape = 21, size = 2, inherit.aes = FALSE) +\n      scale_y_continuous(limits = c(0, max(df$Count, na.rm = TRUE) + 1), expand = c(0, 0)) +\n      scale_x_continuous(breaks = all_years) +\n      labs(title = paste(performer_label, type_label), x = \"Release Year\", y = \"Number of Releases\") +\n      theme_classic() +\n      theme(\n        plot.background = theme$background,\n        panel.background = theme$panel,\n        panel.grid.major = theme$grid,\n        text = element_text(family = theme$font, size = theme$size),\n        plot.title = theme$title,\n        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)\n      )\n  }\n\n  p1 &lt;- make_plot(album_complete %&gt;% filter(Performer == \"Solo\"), album_complete %&gt;% filter(Performer == \"Solo\"), \"Solo\", \"Album\")\n  p2 &lt;- make_plot(single_complete %&gt;% filter(Performer == \"Solo\"), song_dots %&gt;% filter(Performer == \"Solo\"), \"Solo\", \"Song\")\n  p3 &lt;- make_plot(album_complete %&gt;% filter(Performer == \"Group\"), album_complete %&gt;% filter(Performer == \"Group\"), \"Group\", \"Album\")\n  p4 &lt;- make_plot(single_complete %&gt;% filter(Performer == \"Group\"), song_dots %&gt;% filter(Performer == \"Group\"), \"Group\", \"Song\")\n\n  if (has_group) {\n  (p1 | p2) / (p3 | p4)\n} else {\n  p1 | p2\n}\n}\n\n\n\n\n8.1.3 List of Oceanus Folk Artist\n\n\nCode\noceanus_nodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(genre == \"Oceanus Folk\", `Node Type` %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;%\n  unique()\n\ngraph_with_centrality &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(\n    degree_centrality = centrality_degree()\n  )\n\ncentrality_table &lt;- graph_with_centrality %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% oceanus_performers, `Node Type` == \"Person\") %&gt;%\n  as_tibble() %&gt;%\n  select(name, `Node Type`, degree_centrality) %&gt;%\n  arrange(desc(degree_centrality))\n\ncolnames(centrality_table) &lt;- c(\"Artist\", \"Node Type\", \"Connections\")\n\ncentrality_table %&gt;%\n  kable(caption = \"Artists Who Performed Oceanus Folk Songs or Albums\")%&gt;%\n  scroll_box(height = \"400px\")\n\n\n\n\nArtists Who Performed Oceanus Folk Songs or Albums\n\n\nArtist\nNode Type\nConnections\n\n\n\n\nSailor Shift\nPerson\n52\n\n\nYang Wan\nPerson\n30\n\n\nRüdiger Graf\nPerson\n18\n\n\nFilippo Pelli\nPerson\n18\n\n\nMin Lei\nPerson\n16\n\n\nYong Dong\nPerson\n15\n\n\nXiuying Huang\nPerson\n15\n\n\nPing Zeng\nPerson\n14\n\n\nZacharie Martins\nPerson\n14\n\n\nBeatrice Albright\nPerson\n14\n\n\nDaniel O'Connell\nPerson\n14\n\n\nOrla Seabloom\nPerson\n12\n\n\nGuiying Liao\nPerson\n11\n\n\nTheresa Rivera\nPerson\n11\n\n\nVanessa Ramos\nPerson\n11\n\n\nMin Kong\nPerson\n10\n\n\nXia Jia\nPerson\n10\n\n\nGuiying Cao\nPerson\n9\n\n\nNa Lai\nPerson\n9\n\n\nChao Zeng\nPerson\n9\n\n\nXiuying Fang\nPerson\n9\n\n\nNicola Bernetti\nPerson\n9\n\n\nVincentio Gentili\nPerson\n9\n\n\nYong Wang\nPerson\n9\n\n\nTao Jin\nPerson\n9\n\n\nYan Zou\nPerson\n8\n\n\nLei Jin\nPerson\n8\n\n\nXiulan Yi\nPerson\n8\n\n\nMartino Michelangeli\nPerson\n8\n\n\nIsabella Farinelli\nPerson\n8\n\n\nXia Cui\nPerson\n8\n\n\nGuglielmo Canetta\nPerson\n8\n\n\nJuan Gong\nPerson\n8\n\n\nXia Zeng\nPerson\n8\n\n\nGenevieve Bell\nPerson\n8\n\n\nJing Kang\nPerson\n7\n\n\nYong Shen\nPerson\n7\n\n\nYong Lai\nPerson\n7\n\n\nJuan Yu\nPerson\n7\n\n\nMonica Nelson\nPerson\n7\n\n\nYoko Fujita\nPerson\n7\n\n\nSerena Lettiere\nPerson\n7\n\n\nXiulan Wang\nPerson\n7\n\n\nTao Yao\nPerson\n7\n\n\nCharles Vazquez\nPerson\n7\n\n\nWalter White\nPerson\n6\n\n\nJie Fan\nPerson\n6\n\n\nJie Cui\nPerson\n6\n\n\nTao Lei\nPerson\n6\n\n\nQiang Xie\nPerson\n6\n\n\nAlfred Thibault\nPerson\n6\n\n\nXiuying Li\nPerson\n6\n\n\nWei Cheng\nPerson\n6\n\n\nYang Zhao\nPerson\n6\n\n\nJing Jin\nPerson\n6\n\n\nChao Zheng\nPerson\n6\n\n\nJörg Niemeier\nPerson\n6\n\n\nMaya Jensen\nPerson\n6\n\n\nTao Cui\nPerson\n5\n\n\nPing Sun\nPerson\n5\n\n\nChao Tan\nPerson\n5\n\n\nNa Peng\nPerson\n5\n\n\nWei Gao\nPerson\n5\n\n\nStephen Meyer\nPerson\n5\n\n\nYang Yao\nPerson\n5\n\n\nAneta Pruschke-Sölzer\nPerson\n5\n\n\nConstance Guibert\nPerson\n5\n\n\nYan Yan\nPerson\n5\n\n\nZoé-Agnès Delaunay\nPerson\n5\n\n\nPing Peng\nPerson\n5\n\n\nLisa Hofmann\nPerson\n5\n\n\nYan Zhou\nPerson\n5\n\n\nXia Zhu\nPerson\n5\n\n\nMing Jia\nPerson\n5\n\n\nJie Su\nPerson\n5\n\n\nBryan Smith\nPerson\n5\n\n\nRonald Kennedy\nPerson\n5\n\n\nFrédéric de la Coulon\nPerson\n5\n\n\nMing Xiao\nPerson\n5\n\n\nNa Dai\nPerson\n5\n\n\nTao Dai\nPerson\n4\n\n\nJeffrey Watson\nPerson\n4\n\n\nQiang Song\nPerson\n4\n\n\nXia Xia\nPerson\n4\n\n\nMin Jin\nPerson\n4\n\n\nIgnazio Pastine\nPerson\n4\n\n\nFang Duan\nPerson\n4\n\n\nChao Xiao\nPerson\n4\n\n\nTao Lei\nPerson\n4\n\n\nTao Du\nPerson\n4\n\n\nChristine Ward\nPerson\n4\n\n\nMikayla Cook\nPerson\n4\n\n\nNa Wen\nPerson\n4\n\n\nMing Zhong\nPerson\n4\n\n\nValérie Mathieu\nPerson\n4\n\n\nXia Wu\nPerson\n4\n\n\nJing Zhang\nPerson\n4\n\n\nYan Luo\nPerson\n4\n\n\nMichael Rivera\nPerson\n4\n\n\nFang Wu\nPerson\n4\n\n\nChad Marks\nPerson\n4\n\n\nThomas Ball\nPerson\n4\n\n\nKai Reynolds\nPerson\n4\n\n\nGang Shao\nPerson\n3\n\n\nXiulan Hao\nPerson\n3\n\n\nGuiying Ding\nPerson\n3\n\n\nJun Wen\nPerson\n3\n\n\nNadia van Dooren-de Jode Vastraedsd\nPerson\n3\n\n\nCoriolano Luria-Scialpi\nPerson\n3\n\n\nLisa Martin\nPerson\n3\n\n\nMelissa Wheeler\nPerson\n3\n\n\nXiulan Ye\nPerson\n3\n\n\nXia Jia\nPerson\n3\n\n\nDonna Caldwell\nPerson\n3\n\n\nMin Gao\nPerson\n3\n\n\nPing Liao\nPerson\n3\n\n\nChao Sun\nPerson\n3\n\n\nMadeleine Pineau\nPerson\n3\n\n\nLaetitia Petitjean\nPerson\n3\n\n\nJun Shao\nPerson\n3\n\n\nWei Chang\nPerson\n3\n\n\nNa Ma\nPerson\n3\n\n\nThibault Hardy\nPerson\n3\n\n\nPing Wu\nPerson\n3\n\n\nNa Ren\nPerson\n3\n\n\nVictoria Higgins\nPerson\n3\n\n\nDonald Medina\nPerson\n3\n\n\nJoshua Orozco\nPerson\n3\n\n\nQiang Qian\nPerson\n3\n\n\nJeffery Bailey\nPerson\n3\n\n\nLauretta Tresoldi\nPerson\n3\n\n\nKimberly Stanton\nPerson\n3\n\n\nJing Guo\nPerson\n3\n\n\nPatricia Pope\nPerson\n3\n\n\nCesare Cicilia\nPerson\n3\n\n\nJie Yan\nPerson\n3\n\n\nAdèle Bonneau\nPerson\n3\n\n\nJun Hao\nPerson\n3\n\n\nJun Han\nPerson\n3\n\n\nXiulan Zhang\nPerson\n3\n\n\nXiuying Mo\nPerson\n3\n\n\nYong Tao\nPerson\n3\n\n\nJun Xu\nPerson\n3\n\n\nYang Zhang\nPerson\n3\n\n\nYang Ma\nPerson\n3\n\n\nPing Xu\nPerson\n3\n\n\nXiulan Liang\nPerson\n3\n\n\nAlphons Donati-Pederiva\nPerson\n3\n\n\nQiang Han\nPerson\n3\n\n\nMin Mo\nPerson\n3\n\n\nJing Li\nPerson\n3\n\n\nJie Zhong\nPerson\n3\n\n\nJie Wang\nPerson\n3\n\n\nXia Du\nPerson\n3\n\n\nLi Li\nPerson\n3\n\n\nRyan Adams\nPerson\n3\n\n\nMin Huang\nPerson\n3\n\n\nXiulan Zhong\nPerson\n3\n\n\nJing Feng\nPerson\n3\n\n\nCarlos Duffy\nPerson\n2\n\n\nMin Qin\nPerson\n2\n\n\nJustin Morse\nPerson\n2\n\n\nTara Kota\nPerson\n2\n\n\nXiuying Liang\nPerson\n2\n\n\nWei Liao\nPerson\n2\n\n\nXiulan Lin\nPerson\n2\n\n\nMing Yan\nPerson\n2\n\n\nDonna Ryan\nPerson\n2\n\n\nXia Yan\nPerson\n2\n\n\nJing Ding\nPerson\n2\n\n\nJuan Wen\nPerson\n2\n\n\nWei Guo\nPerson\n2\n\n\nXia Xiang\nPerson\n2\n\n\nJing Zhong\nPerson\n2\n\n\nJuan Zeng\nPerson\n2\n\n\nChao Wu\nPerson\n2\n\n\nTimothy Hansen\nPerson\n2\n\n\nLei Zeng\nPerson\n2\n\n\nNa Ren\nPerson\n2\n\n\nDavid Morgan\nPerson\n2\n\n\nMary Parsons\nPerson\n2\n\n\nSusan Da Silva\nPerson\n2\n\n\nTao Ren\nPerson\n2\n\n\nGuiying Xia\nPerson\n2\n\n\nYong Dai\nPerson\n2\n\n\nQiang He\nPerson\n2\n\n\nChao Tang\nPerson\n2\n\n\nYui Kondo\nPerson\n2\n\n\nQiang Song\nPerson\n2\n\n\nChao Lu\nPerson\n2\n\n\nIda Vigliotti\nPerson\n2\n\n\nTao Yin\nPerson\n2\n\n\nMichael Snyder\nPerson\n2\n\n\nFang Gu\nPerson\n2\n\n\nTao Yao\nPerson\n2\n\n\nPing Cui\nPerson\n2\n\n\nTao Long\nPerson\n2\n\n\nYang Zhong\nPerson\n2\n\n\nJun Yu\nPerson\n2\n\n\nLei Kong\nPerson\n2\n\n\nYang Shao\nPerson\n2\n\n\nXiulan Hu\nPerson\n2\n\n\nMichael Smith\nPerson\n2\n\n\nLi Wen\nPerson\n2\n\n\nLei Tan\nPerson\n2\n\n\nTao Hu\nPerson\n2\n\n\nGuiying Tao\nPerson\n2\n\n\nChao Wu\nPerson\n2\n\n\nJames Clark\nPerson\n2\n\n\nLei Qian\nPerson\n2\n\n\nCourtney Phillips\nPerson\n2\n\n\nWei Ma\nPerson\n2\n\n\nGang Xiong\nPerson\n2\n\n\nQiang Luo\nPerson\n2\n\n\nMin Song\nPerson\n2\n\n\nJun Yuan\nPerson\n2\n\n\nChristine Jones\nPerson\n2\n\n\nMorgan Hernandez\nPerson\n2\n\n\nPing Shao\nPerson\n2\n\n\nTao Qin\nPerson\n2\n\n\nXiulan Dong\nPerson\n2\n\n\nXiuying Zhang\nPerson\n2\n\n\nXiuying Deng\nPerson\n2\n\n\nJennifer Alexander\nPerson\n2\n\n\nLatasha Watts\nPerson\n2\n\n\nJie Chang\nPerson\n2\n\n\nCarly Luna\nPerson\n2\n\n\nJustin Berry\nPerson\n2\n\n\nStephen Allen\nPerson\n2\n\n\nChao Qiao\nPerson\n2\n\n\nFang Xiang\nPerson\n2\n\n\nMichael Anderson\nPerson\n2\n\n\nRicardo Ward\nPerson\n2\n\n\nFang Zhou\nPerson\n2\n\n\nXiulan Zhou\nPerson\n2\n\n\nJuan Duan\nPerson\n2\n\n\nTao Qian\nPerson\n2\n\n\nChao Kang\nPerson\n2\n\n\nJun Ye\nPerson\n2\n\n\nTomoya Nakamura\nPerson\n2\n\n\nCharles du Perez\nPerson\n2\n\n\nFeliciano Pizarro Moll\nPerson\n2\n\n\nAugusto Villaverde Armengol\nPerson\n2\n\n\nJun Zou\nPerson\n2\n\n\nJie Wan\nPerson\n2\n\n\nMargaretha Sager\nPerson\n2\n\n\nGuiying Pan\nPerson\n2\n\n\nXiuying Duan\nPerson\n2\n\n\nMin Xia\nPerson\n2\n\n\nJie Wu\nPerson\n2\n\n\nIsaiah Morales\nPerson\n2\n\n\nGuiying Tang\nPerson\n2\n\n\nGang Shen\nPerson\n2\n\n\nRenata Manolesso\nPerson\n2\n\n\nRussell Bates\nPerson\n2\n\n\nGang Yang\nPerson\n2\n\n\nMin Tian\nPerson\n2\n\n\nTao Xu\nPerson\n2\n\n\nJun Yi\nPerson\n2\n\n\nPing Meng\nPerson\n2\n\n\nGuiying Zhong\nPerson\n2\n\n\nQiang Yang\nPerson\n2\n\n\nXia Zhao\nPerson\n2\n\n\nQiang Jiang\nPerson\n2\n\n\nTanya Garrett\nPerson\n2\n\n\nJohn Maldonado\nPerson\n2\n\n\nMichael Reyes\nPerson\n2\n\n\nSummer Bender\nPerson\n2\n\n\nAnn Holland\nPerson\n2\n\n\nGuiying Qin\nPerson\n2\n\n\nLei Zheng\nPerson\n2\n\n\nXia Wang\nPerson\n2\n\n\nNa Yi\nPerson\n2\n\n\nQiang Zhu\nPerson\n2\n\n\nPaulo Oestrovsky\nPerson\n2\n\n\nAmber Ramsey\nPerson\n2\n\n\nLi Wan\nPerson\n2\n\n\nLagan Bhalla\nPerson\n2\n\n\nGeorgina Piñol-Guerra\nPerson\n2\n\n\nJuan Dong\nPerson\n2\n\n\nJenna York\nPerson\n2\n\n\nYuki Hashimoto\nPerson\n2\n\n\nMatthew Murphy\nPerson\n2\n\n\nDouglas Roberts\nPerson\n2\n\n\nMing Zhou\nPerson\n2\n\n\nMin Ding\nPerson\n2\n\n\nMin Xiong\nPerson\n2\n\n\nTara Deshmukh\nPerson\n2\n\n\nYong Ding\nPerson\n2\n\n\nJie Long\nPerson\n2\n\n\nLuce Loiseau\nPerson\n2\n\n\nMing Wang\nPerson\n2\n\n\nChao Zhou\nPerson\n2\n\n\nYesenia Miller\nPerson\n2\n\n\nXiuying Xie\nPerson\n1\n\n\nRyan Devan\nPerson\n1\n\n\nTiya Sani\nPerson\n1\n\n\nKimaya Srinivasan\nPerson\n1\n\n\nRhonda Brown\nPerson\n1\n\n\nMary Medina\nPerson\n1\n\n\nLaura Gibbs\nPerson\n1\n\n\nRaymond Mccoy\nPerson\n1\n\n\nBrandy Reyes\nPerson\n1\n\n\nGang Pan\nPerson\n1\n\n\nChao Mo\nPerson\n1\n\n\nPing Feng\nPerson\n1\n\n\nLi Deng\nPerson\n1\n\n\nLei Tao\nPerson\n1\n\n\nChao Wu\nPerson\n1\n\n\nMin Xue\nPerson\n1\n\n\nMin Yu\nPerson\n1\n\n\nJing Xu\nPerson\n1\n\n\nSonia Weeks\nPerson\n1\n\n\nRichard Frazier\nPerson\n1\n\n\nGang Jiang\nPerson\n1\n\n\nJuan Pan\nPerson\n1\n\n\nSandra Smith\nPerson\n1\n\n\nChristopher Smith\nPerson\n1\n\n\nYong Chen\nPerson\n1\n\n\nGang Lai\nPerson\n1\n\n\nXiulan Lu\nPerson\n1\n\n\nMin Jin\nPerson\n1\n\n\nWei Lai\nPerson\n1\n\n\nMing Wan\nPerson\n1\n\n\nQiang Lai\nPerson\n1\n\n\nYong Tan\nPerson\n1\n\n\nYan Tao\nPerson\n1\n\n\nLi Zou\nPerson\n1\n\n\nGang Yin\nPerson\n1\n\n\nGang Zhang\nPerson\n1\n\n\nNa Zou\nPerson\n1\n\n\nKaori Kobayashi\nPerson\n1\n\n\nJuan Qiao\nPerson\n1\n\n\nJun Jin\nPerson\n1\n\n\nXiulan Ren\nPerson\n1\n\n\nGuiying Yang\nPerson\n1\n\n\nPing Chang\nPerson\n1\n\n\nMargherita Giammusso\nPerson\n1\n\n\nPina Garrone\nPerson\n1\n\n\nYang Mo\nPerson\n1\n\n\nEthan Sanchez\nPerson\n1\n\n\nYan Fang\nPerson\n1\n\n\nNa Yang\nPerson\n1\n\n\nRaymond Martin\nPerson\n1\n\n\nMin Huang\nPerson\n1\n\n\nJing Xiang\nPerson\n1\n\n\nTao Zou\nPerson\n1\n\n\nLi Qiao\nPerson\n1\n\n\nPing Tao\nPerson\n1\n\n\nNa Han\nPerson\n1\n\n\nFang Zhong\nPerson\n1\n\n\nNicole Thomas\nPerson\n1\n\n\nGang Fan\nPerson\n1\n\n\nMing Qiao\nPerson\n1\n\n\nGuiying Ye\nPerson\n1\n\n\nXiuying Huang\nPerson\n1\n\n\nJun Fu\nPerson\n1\n\n\nFang Han\nPerson\n1\n\n\nMing Su\nPerson\n1\n\n\nKelli Turner\nPerson\n1\n\n\nLatasha Chavez\nPerson\n1\n\n\nPatrizio Antonello-Salvemini\nPerson\n1\n\n\nNa Qian\nPerson\n1\n\n\nEric Bartlett\nPerson\n1\n\n\nMin Yan\nPerson\n1\n\n\nLei Tan\nPerson\n1\n\n\nMin He\nPerson\n1\n\n\nLi Qiu\nPerson\n1\n\n\nPing Yan\nPerson\n1\n\n\nXia Kang\nPerson\n1\n\n\nMing Yao\nPerson\n1\n\n\nXia Xia\nPerson\n1\n\n\nNa Cai\nPerson\n1\n\n\nLi Huang\nPerson\n1\n\n\nYong Ye\nPerson\n1\n\n\nMing Chen\nPerson\n1\n\n\nLi Ding\nPerson\n1\n\n\nQiang Du\nPerson\n1\n\n\nDeborah Norton\nPerson\n1\n\n\nLi Long\nPerson\n1\n\n\nXiulan Xu\nPerson\n1\n\n\nGang Fu\nPerson\n1\n\n\nMing Du\nPerson\n1\n\n\nMin Zheng\nPerson\n1\n\n\nJing Long\nPerson\n1\n\n\nXiuying Xiang\nPerson\n1\n\n\nLori Young\nPerson\n1\n\n\nSean Riggs\nPerson\n1\n\n\nGang Wang\nPerson\n1\n\n\nEvelyn Gordon\nPerson\n1\n\n\nYan Hou\nPerson\n1\n\n\nJacob Arnold\nPerson\n1\n\n\nÉdouard-Rémy Clerc\nPerson\n1\n\n\nLi Gu\nPerson\n1\n\n\nJie Cui\nPerson\n1\n\n\nGang Tian\nPerson\n1\n\n\nVictoria Vazquez\nPerson\n1\n\n\nJuan Wang\nPerson\n1\n\n\nJing Zhong\nPerson\n1\n\n\nJuan Wu\nPerson\n1\n\n\nJessica Carney\nPerson\n1\n\n\nChristopher Reilly\nPerson\n1\n\n\nMonica Murphy\nPerson\n1\n\n\nJing Wei\nPerson\n1\n\n\nAnn Anderson\nPerson\n1\n\n\nXiuying Kang\nPerson\n1\n\n\nKaren Robinson\nPerson\n1\n\n\nLi Zhou\nPerson\n1\n\n\nJun Wang\nPerson\n1\n\n\nFenna Zwart\nPerson\n1\n\n\nNa Yang\nPerson\n1\n\n\nKimberly Moore\nPerson\n1\n\n\nXiulan Yi\nPerson\n1\n\n\nChao Fang\nPerson\n1\n\n\nTao Ye\nPerson\n1\n\n\nYong Guo\nPerson\n1\n\n\nJing Cui\nPerson\n1\n\n\nLisa Pennington\nPerson\n1\n\n\nXiuying Shao\nPerson\n1\n\n\nDaria Ceravolo\nPerson\n1\n\n\nLuciano Chindamo\nPerson\n1\n\n\nMin Liao\nPerson\n1\n\n\nJie Bai\nPerson\n1\n\n\nYan Huang\nPerson\n1\n\n\nJoseph Cole\nPerson\n1\n\n\nRachel Ford\nPerson\n1\n\n\nYang Qian\nPerson\n1\n\n\nJuan Deng\nPerson\n1\n\n\nChiyo Suzuki\nPerson\n1\n\n\nKaori Watanabe\nPerson\n1\n\n\nJennifer Harris\nPerson\n1\n\n\nPauline Guyot de la Maillet\nPerson\n1\n\n\nAdrien Weiss\nPerson\n1\n\n\nQiang Mo\nPerson\n1\n\n\nYan Wang\nPerson\n1\n\n\nRegina Davis\nPerson\n1\n\n\nDeborah Davis\nPerson\n1\n\n\nAmanda Ramos\nPerson\n1\n\n\nLeif Bien\nPerson\n1\n\n\nElsbeth Löwer\nPerson\n1\n\n\nAlexej Klotz\nPerson\n1\n\n\nPing Zheng\nPerson\n1\n\n\nGang Meng\nPerson\n1\n\n\nLei Xue\nPerson\n1\n\n\nWei Qian\nPerson\n1\n\n\nNicholas Porter\nPerson\n1\n\n\nXiuying Jia\nPerson\n1\n\n\nChristine Turner\nPerson\n1\n\n\nLi Dai\nPerson\n1\n\n\nYong Tang\nPerson\n1\n\n\nTao Su\nPerson\n1\n\n\nJun Yuan\nPerson\n1\n\n\nXiulan Lai\nPerson\n1\n\n\nLei Su\nPerson\n1\n\n\nElena Nibali\nPerson\n1\n\n\nJose Garrett\nPerson\n1\n\n\nDavid Nash\nPerson\n1\n\n\nAmber Smith\nPerson\n1\n\n\nGang Zhu\nPerson\n1\n\n\nShlok Cherian\nPerson\n1\n\n\nXia Yu\nPerson\n1\n\n\nXiulan Xu\nPerson\n1\n\n\nXiulan Gu\nPerson\n1\n\n\nLei Liao\nPerson\n1\n\n\nJie Li\nPerson\n1\n\n\nMary King\nPerson\n1\n\n\nJie Xu\nPerson\n1\n\n\nYan Chang\nPerson\n1\n\n\nChao Cheng\nPerson\n1\n\n\nNa Ren\nPerson\n1\n\n\nQiang Xie\nPerson\n1\n\n\nMitchell Bryan\nPerson\n1\n\n\nMing Qiu\nPerson\n1\n\n\nYang Lei\nPerson\n1\n\n\nFang Qiao\nPerson\n1\n\n\nMing Yu\nPerson\n1\n\n\nGuiying Qiu\nPerson\n1\n\n\nJason Vaughn\nPerson\n1\n\n\nNa Jin\nPerson\n1\n\n\nPaul-Louis Benard\nPerson\n1\n\n\nYan Zhu\nPerson\n1\n\n\nChao Xiao\nPerson\n1\n\n\nPing Song\nPerson\n1\n\n\nXiulan Mo\nPerson\n1\n\n\nMin Liang\nPerson\n1\n\n\nNa Li\nPerson\n1\n\n\nXia Shao\nPerson\n1\n\n\nKyle Lawrence\nPerson\n1\n\n\nEdward Little\nPerson\n1\n\n\nGuiying Ma\nPerson\n1\n\n\nJonathan Morris\nPerson\n1\n\n\nXiuying Wei\nPerson\n1\n\n\nMichael Jefferson\nPerson\n1\n\n\nAndrew Lee\nPerson\n1\n\n\nMichael Gregory\nPerson\n1\n\n\nMaurice Harrison\nPerson\n1\n\n\nScott Burke\nPerson\n1\n\n\nDevin Chan\nPerson\n1\n\n\nJuan Gu\nPerson\n1\n\n\nQiang Dai\nPerson\n1\n\n\nXiulan He\nPerson\n1\n\n\nTao Chang\nPerson\n1\n\n\nMandy Hood\nPerson\n1\n\n\nRobert Villanueva\nPerson\n1\n\n\nThomas Dudley\nPerson\n1\n\n\nCharles Hall\nPerson\n1\n\n\nJames Mosley\nPerson\n1\n\n\nAdriana Figueroa\nPerson\n1\n\n\nQiang Gao\nPerson\n1\n\n\nFang Yan\nPerson\n1\n\n\nJing Chang\nPerson\n1\n\n\nLi Dong\nPerson\n1\n\n\nQiang Sun\nPerson\n1\n\n\nTomoya Takahashi\nPerson\n1\n\n\nTaichi Sasaki\nPerson\n1\n\n\nNa Deng\nPerson\n1\n\n\nXia Ye\nPerson\n1\n\n\nChelsea Harris\nPerson\n1\n\n\nChao Qiu\nPerson\n1\n\n\nEmily Jackson\nPerson\n1\n\n\nJie Cheng\nPerson\n1\n\n\nJuan Kang\nPerson\n1\n\n\nMichaela Brooks\nPerson\n1\n\n\nRachel Rios\nPerson\n1\n\n\nTammie Johnson\nPerson\n1\n\n\nXia Shen\nPerson\n1\n\n\nGang Ding\nPerson\n1\n\n\nMing Deng\nPerson\n1\n\n\nWei Yao\nPerson\n1\n\n\nMin Guo\nPerson\n1\n\n\nJuan Xiang\nPerson\n1\n\n\nJuan Cao\nPerson\n1\n\n\nYong Qiao\nPerson\n1\n\n\nChristophe-Émile Grégoire\nPerson\n1\n\n\nGeorges Chrétien\nPerson\n1\n\n\nMing Xiang\nPerson\n1\n\n\nWei Chen\nPerson\n1\n\n\nYong Tang\nPerson\n1\n\n\nJie Xu\nPerson\n1\n\n\nSteven Goodman\nPerson\n1\n\n\nLei Wan\nPerson\n1\n\n\nLi Zeng\nPerson\n1\n\n\nGuiying Dong\nPerson\n1\n\n\nNa Peng\nPerson\n1\n\n\nNa Jiang\nPerson\n1\n\n\nIsla Quinn\nPerson\n1\n\n\n\n\n\n\n\n\n\n8.1.4 Sailor Shift\n\nCreative ActivityCreative ContributionCollaborationPublic Recognition\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- artist_creativity(graph,\"Sailor Shift\")\ncenter &lt;- c(\"Sailor Shift\", result$group)\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(center[1], \": Songs and Release Years\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\nLine Graph\n\n\nCode\nrelease_timeline(result$works,\"Sailor Shift\")\n\n\n\n\n\n\n\n\n\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- contribution_network(graph,\"Sailor Shift\")\ncenter &lt;- c(\"Sailor Shift\")\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(\"How many works \",center[1],\" have contributed?\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\n\n\nCode\nresult &lt;- artist_collab_network(graph, \"Sailor Shift\")\ncenter &lt;- c(\"Sailor Shift\")\nplot(\n  result,\n  center_name = center,\n  title = paste0(center[1], \"'s Collaboration Network\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\nCode\ncollaborator_count &lt;- result %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"), name != \"Sailor Shift\") %&gt;%\n  count(`Node Type`)\n\ncollaborator_count %&gt;% \n  kable(caption = \"Number of Collaborators\")\n\n\n\nNumber of Collaborators\n\n\nNode Type\nn\n\n\n\n\nPerson\n40\n\n\nMusicalGroup\n8\n\n\n\n\n\n\n\nTable\n\n\nCode\ntables &lt;- public_recognition_table(graph, \"Sailor Shift\")\n\ntables$Solo %&gt;%\n  kable(caption = \"Solo Charted Releases\", align = \"lccc\")\n\n\n\nSolo Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nTidal Pop Waves\nAlbum\nSolo\n2028\n\n\nSalty Dreams\nAlbum\nSolo\n2030\n\n\nThe Current & The Chord\nAlbum\nSolo\n2032\n\n\nCoral Beats\nAlbum\nSolo\n2034\n\n\nTides & Ballads\nAlbum\nSolo\n2036\n\n\nOceanbound\nAlbum\nSolo\n2038\n\n\nEchoes of the Deep\nAlbum\nSolo\n2040\n\n\nStormsong\nSong\nSolo\n2038\n\n\nTidesworn Ballads\nAlbum\nSolo\n2031\n\n\nSubmerged Sonatas\nAlbum\nSolo\n2031\n\n\nSeashell Serenade\nSong\nSolo\n2030\n\n\nTotal\n\n\n11\n\n\n\n\n\nCode\ntables$Group %&gt;%\n  kable(caption = \"Group Charted Releases\", align = \"lccc\")\n\n\n\nGroup Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nThe Kelp Forest Canticles\nAlbum\nGroup\n2024\n\n\nLuminescent Tides\nAlbum\nGroup\n2025\n\n\nShoreline Sonnets\nAlbum\nGroup\n2026\n\n\nSalt-Kissed Rhymes\nSong\nGroup\n2026\n\n\nTotal\n\n\n4\n\n\n\n\n\nLine Graph\n\n\nCode\npublic_recognition_line(graph, \"Sailor Shift\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.1.5 Yang Wan\n\nCreative ActivityCreative ContributionCollaborationPublic Recognition\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- artist_creativity(wan, \"Yang Wan\")\ncenter &lt;- c(\"Yang Wan\", result$group)\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(center[1], \": Songs and Release Years\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\nLine Graph\n\n\nCode\nrelease_timeline(result$works,\"Yang Wan\")\n\n\n\n\n\n\n\n\n\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- contribution_network(wan,\"Yang Wan\")\ncenter &lt;- c(\"Yang Wan\")\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(\"How many works \",center[1],\" have contributed?\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\n\n\nCode\nresult &lt;- artist_collab_network(wan, \"Yang Wan\")\ncenter &lt;- c(\"Yang Wan\")\nplot(\n  result,\n  center_name = center,\n  title = paste0(center[1], \"'s Collaboration Network\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\nCode\ncollaborator_count &lt;- result %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"), name != \"Yang Wan\") %&gt;%\n  count(`Node Type`)\n\ncollaborator_count %&gt;% \n  kable(caption = \"Number of Collaborators\")\n\n\n\nNumber of Collaborators\n\n\nNode Type\nn\n\n\n\n\nPerson\n76\n\n\nMusicalGroup\n2\n\n\n\n\n\n\n\nTable\n\n\nCode\ntables &lt;- public_recognition_table(wan, \"Yang Wan\")\n\ntables$Solo %&gt;%\n  kable(caption = \"Solo Charted Releases\", align = \"lccc\")\n\n\n\nSolo Charted Releases\n\n\n\n\n\n\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nSilent Projectiles\nSong\nSolo\n2027\n\n\nEchoes of Naomi\nSong\nSolo\n2020\n\n\nBananal’s Gentle Whispers\nSong\nSolo\n2020\n\n\nTender Embrace\nSong\nSolo\n1994\n\n\nRakkauden Varjossa (In the Shadow of Love)\nSong\nSolo\n2013\n\n\nPerfect Harmony\nSong\nSolo\n2003\n\n\nUrban Haze\nSong\nSolo\n2022\n\n\nWhispers in the Unknown\nSong\nSolo\n2026\n\n\nMoments Between Heartbeats\nSong\nSolo\n2023\n\n\nWhispers Between Rooms\nAlbum\nSolo\n2022\n\n\nScales and Streetlights\nAlbum\nSolo\n2000\n\n\nCanonical Refrain\nSong\nSolo\n2015\n\n\nRingtone Requiem\nSong\nSolo\n2013\n\n\nEchoes of Armenia’s Crown\nSong\nSolo\n2021\n\n\nSilent Steps of Summer’s Daughter\nAlbum\nSolo\n2001\n\n\nTotal\n\n\n15\n\n\n\n\n\nCode\ntables$Group %&gt;%\n  kable(caption = \"Group Charted Releases\", align = \"lccc\")\n\n\n\nGroup Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nTotal\n\n\n0\n\n\n\n\n\nLine Graph\n\n\nCode\npublic_recognition_line(wan, \"Yang Wan\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.1.6 Rüdiger Graf\n\nCreative ActivityCreative ContributionCollaborationPublic Recognition\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- artist_creativity(graf, \"Rüdiger Graf\")\ncenter &lt;- c(\"Rüdiger Graf\", result$group)\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(center[1], \": Songs and Release Years\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\nLine Graph\n\n\nCode\nrelease_timeline(result$works,\"Rüdiger Graf\")\n\n\n\n\n\n\n\n\n\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- contribution_network(graf,\"Rüdiger Graf\")\ncenter &lt;- c(\"Rüdiger Graf\")\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(\"How many works \",center[1],\" have contributed?\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\n\n\nCode\nresult &lt;- artist_collab_network(graf, \"Rüdiger Graf\")\ncenter &lt;- c(\"Rüdiger Graf\")\nplot(\n  result,\n  center_name = center,\n  title = paste0(center[1], \"'s Collaboration Network\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\nCode\ncollaborator_count &lt;- result %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"), name != \"Rüdiger Graf\") %&gt;%\n  count(`Node Type`)\n\ncollaborator_count %&gt;% \n  kable(caption = \"Number of Collaborators\")\n\n\n\nNumber of Collaborators\n\n\nNode Type\nn\n\n\n\n\nPerson\n25\n\n\nMusicalGroup\n1\n\n\n\n\n\n\n\nTable\n\n\nCode\ntables &lt;- public_recognition_table(graf, \"Rüdiger Graf\")\n\ntables$Solo %&gt;%\n  kable(caption = \"Solo Charted Releases\", align = \"lccc\")\n\n\n\nSolo Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nGlasses Raised\nSong\nSolo\n2027\n\n\nConcrete Kingdom\nSong\nSolo\n2026\n\n\nColorful Traditions\nSong\nSolo\n2026\n\n\nArtificial Intuition Node\nSong\nSolo\n2024\n\n\nCosmic Cartography\nSong\nSolo\n2026\n\n\nTotal\n\n\n5\n\n\n\n\n\nCode\ntables$Group %&gt;%\n  kable(caption = \"Group Charted Releases\", align = \"lccc\")\n\n\n\nGroup Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nTotal\n\n\n0\n\n\n\n\n\nLine Graph\n\n\nCode\npublic_recognition_line(graf, \"Rüdiger Graf\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nCreative Activity : Sailor Shift built a long, steady career from 2024 to 2040, consistently releasing music, Yang Wan had an early start in 1994, disappeared for years, then made several strong comebacks after 2010, Rüdiger Graf rose quickly between 2024 and 2026, peaking fast but dropping off just as quickly a brief flash of fame that didn’t last. These distinct career patterns reveal that rising stars in Oceanus Folk begin with consistent growth.\nCreative Contribution: Sailor Shift maintained a steady presence as a focused lyricist, Yang Wan contributed across multiple creative roles composer, lyricist, and producer showing strong versatility, Rüdiger Graf took on a mix of roles early on but lacked sustained involvement. This kind of observations suggest that rising stars often emerge through either consistent specialization on the rolse or early multi role engagement.\nCollaboration: Yang Wan has the largest network with 76 individuals and 2 groups, showing broad influence and strong community presence, Sailor Shift has 40 individual and 8 group collaborators, suggesting a balanced, stable network built over time, while Rüdiger Graf has 25 individuals and 1 group—more limited, but notable given the shorter career span. Artists with high collaborator counts—especially early in their careers—tend to gain more exposure, expand their influence, and accelerate their growth. Thus, emerging artists who are quickly building networks are strong candidates to watch as the next rising stars.\nPublic Recognition: Sailor Shift stands out with both solo and group charted releases, showing broad reach and influence, Yang Wan has a strong solo-only chart record that reflects resilience and longevity, while Rüdiger Graf shows early momentum through recent solo chart activity, this is a key signal of rising star potential characteristics."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-the-next-rising-star-of-oceanus-folk",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-the-next-rising-star-of-oceanus-folk",
    "title": "Take Home Exercise 2",
    "section": "8.2 Question 3: The Next Rising Star of Oceanus Folk",
    "text": "8.2 Question 3: The Next Rising Star of Oceanus Folk\n\n\nCode\nnodes &lt;- graph %&gt;% \n  activate(nodes) %&gt;% \n  mutate(row_id = row_number()) %&gt;% \n  as_tibble()\n\nedges &lt;- graph %&gt;% \n  activate(edges) %&gt;% \n  as_tibble()\n\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", `Node Type` %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, `Node Type`) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00\n\n\n\n\n\n\n\n\n\n\n\nConclusions\n\n\n\nBased on the computed metrics including total works, charted ratio, collaboration count, creative contributions, and a freshness score that penalizes inactivity the predicted rising stars in the Oceanus Folk genre are The Brine Choir, Selkie’s Hollow, and Copper Canyon.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat Makes a Rising Star:\nThe model goes beyond just popularity. It also looks at:\n\nCreative Activity: Regular releases, like Sailor Shift’s, suggest steady growth.\nCreative Contribution: Versatile creators like Yang Wan, or focused ones like Sailor Shift, both show strong artistic identity.\nCollaboration: Large, active networks—especially built early—are often signs of rising stars.\nPublic Recognition: Charted songs help, but they aren’t everything. Sailor Shift, for example, may not have a perfect chart ratio, but her consistency and connections still make her stand out.\n\nRising Star Score :\nThe score combines multiple aspects of an artist’s career to highlight those with strong future potential.\n\nTotal Works reflects how productive an artist has been.\nCharted Ratio emphasizes public recognition impact matters more than volume.\nCollaboration Count and Creative Contributions show how engaged and versatile an artist is behind the scenes.\nAll of these are adjusted by Freshness, which penalizes long inactivity artists who started early but went quiet get lower scores.\n\nAdditional Notes:\n\nThe current year is assumed to be 2040.\nWe filter artists whose works have release years between 2030 and 2040, and only artists with at least 3 releases during this period are included.This filtering helps exclude inactive or minimally active artists."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\n\n\n\n\nOur project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, we will be providing the prototype module report and the UIs designed for the above applications.\n\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\n\n\n\n\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nThe storyboard is designed to visually represent the user’s journey within the R Shiny dashboard applications. It acts as a bridge between research insights and user interaction, illustrating how findings are translated into visual and interactive elements. The UI design and interactive features are thoughtfully developed to enable seamless exploration and analysis of data including network components helping users identify key patterns and trace the rising of artist in the music industry.\nThe prototype is organized into three main focus areas:\n\nSailor Shift’s Career Explorer\nOceanus Folk Influence Tracker\nRising Star Prediction Dashboard\n\n\n\n\n\n\nThis tab serves as the landing page for Sailor Shift’s Career Explorer module. It provides a high-level summary of the artist’s musical trajectory. As shown in the figure below, the Overview sub-tab consolidates key statistics into a series of information cards that allow users to quickly grasp the scope and success of her career.\nCareer metrics display, showing:\n\nYears active\nNumber of releases\nNumber of collaborators\nNumber of creative roles\nNumber of charted works\nChart success ratio\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI for Overview tab - Sailor Shift’s Career Explorer\nSailorOverviewRow1 &lt;- fluidRow(\n  tabsetPanel(\n    tabPanel(\"Overview\", \n      fluidRow(\n        valueBox(),\n        valueBox(),\n        valueBox()\n      ),\n      fluidRow(\n        valueBox(),\n        valueBox(),\n        valueBox()\n      )\n    )\n  )\n)\n\n# Server Components\n \noutput$activeYears &lt;- renderValueBox({})\noutput$totalReleases &lt;- renderValueBox({})\noutput$collaborators &lt;- renderValueBox({})\noutput$creativeRoles &lt;- renderValueBox({})\noutput$chartedWorks &lt;- renderValueBox({})\noutput$chartSuccess &lt;- renderValueBox({})\n\n\n\n\n\nThe Career Timeline tab enables users to interactively explore Sailor Shift’s music releases over the years. Users can:\n\nFilter releases by type (Album or Song)\nSelect a year range using a slider\nRead description text that updates dynamically\nView a bar chart displaying the number of releases per year by type\nExamine a detailed data table of Sailor’s works with attributes like title, release year, genre, and whether the work was notable\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI \nCareerTimelineUI &lt;- fluidPage(\n  titlePanel(\"Sailor Shift’s Career Timeline\"),\n  \n  tabsetPanel(\n    tabPanel(\"Career Timeline\",\n      fluidRow(\n        column(\n          selectInput()),\n          sliderInput(),\n          textAreaInput()\n        ),\n        column(\n          plotOutput()\n        )\n      ),\n      br(),\n      DT::dataTableOutput()\n    )\n  )\n)\n\n#Server\noutput$release_barplot &lt;- renderPlot({})\noutput$release_table &lt;- DT::renderDataTable({})\n\n\n\n\n\nThe Collaborations tab provides a detailed network-based view of Sailor Shift’s creative relationships. It includes:\nNode and Relation Type Filters: These checkboxes allow users to filter the network by the type of entity (e.g., person, song, album) or relationship (e.g., ComposerOf, LyricistOf).\nInteractive Network Plot: A central network visualization shows Sailor at the center, connected to collaborators through edges labeled with their creative roles.\nDescriptive Panel: Offers a placeholder for dynamic text or analysis summaries.\nData Table: Lists each collaborator with their name, relation to the work, work title, type (Album/Song), and release date.\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nSailorCollabUI &lt;- fluidPage(\n  titlePanel(\"Sailor Shift’s Collaborations\"),\n  \n  tabsetPanel(\n    tabPanel(\"Collaborations\",\n      fluidRow(\n        column( \n          checkboxGroupInput(), selected =),\n          checkboxGroupInput(),\n          textAreaInput()\n        ),\n        column(\n          visNetworkOutput()\n        )\n      ),\n      br(),\n      DT::dataTableOutput()\n    )\n  )\n)\n\n#Server\noutput$collab_network &lt;- renderVisNetwork({})\noutput$collab_table &lt;- DT::renderDataTable({})\n\n\n\n\n\nThe Influence Network tab visualizes how Sailor Shift’s musical works relate to others through influence connections. It allows users to:\n\nFilter by Genre (e.g., Doom Metal, Blues Rock)\nFilter by Influence Type (e.g., CoverOf, InStyleOf, DirectlySamples)\nSearch and Select a Work from a dropdown list for focused exploration\nView a directed network plot that visually maps how her songs and albums connect to or are influenced by other artists’ works\nRead descriptive context in a dedicated panel\nExamine a data table listing all pairwise influence relationships, their types, and associated genres\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nInfluenceNetworkUI &lt;- fluidPage(\n  titlePanel(\"Sailor Shift’s Influence Network\"),\n  \n  tabsetPanel(\n    tabPanel( \n      fluidRow(\n        column( \n          selectInput(, choices = c(), selected =),\n          checkboxGroupInput(\n                             choices = c(),\n                             selected = c()),\n          selectizeInput(),\n          textAreaInput()\n        ),\n        column(\n          visNetworkOutput()\n        )\n      ),\n      br(),\n      DT::dataTableOutput()\n    )\n  )\n)\n\n#Server\noutput$influence_graph&lt;- renderVisNetwork({})\noutput$influence_table &lt;- DT::renderDataTable({})\n\n\n\n\n\n\n\n\nThe Overview tab within the Oceanus Folk Influence Tracker module provides users with a macro-level snapshot of the genre’s scope and evolution.\nKey features include:\nMetric summary cards for:\n\nTotal performers in the Oceanus Folk community\nTotal music releases\nSpan of activity years\nA stacked bar chart visualizing the number of songs vs albums released over time, helping users observe patterns in creative output (e.g., genre peaks, format preferences)\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nOceanusFolkOverviewUI &lt;- fluidPage(\n  titlePanel(\"Oceanus Folk Overview\"),\n  \n  tabsetPanel(\n    tabPanel(\n      fluidRow(\n        valueBox(),\n        valueBox(),\n        valueBox()\n      ),\n      br(),\n      fluidRow(\n        column(\n          plotOutput()\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$totalperformers &lt;- renderValueBox({})\noutput$totalReleases &lt;- renderValueBox({})\noutput$activity_year &lt;- renderValueBox({})\n\noutput$folk_release_chart &lt;- renderPlot({})\n\n\n\n\n\nThe Influence Timeline tab visualizes how Oceanus Folk has contributed to musical influence across time. Key components include:\n\nCheckbox filters to select different influence types (e.g., CoverOf, InterpolatesFrom, LyricalReferenceTo)\nA year range slider to narrow the temporal window of interest\nA multicolored line chart showing trends in the number of influence connections (by type) over time\nA description box for narrative or insight generation\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nInfluenceTimelineUI &lt;- fluidPage(\n  titlePanel(),\n  \n  tabsetPanel(\n    tabPanel(\n      fluidRow(\n        column(\n          checkboxGroupInput( \n            choices = c(),\n            selected = c()),\n          sliderInput(),\n          textAreaInput()\n        ),\n        column(\n          plotOutput()\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$influence_timeline_chart &lt;- renderPlot({})\n\n\n\n\n\nThe Outward Impact tab explores the ripple effect of the Oceanus Folk genre across genres and artists. It features:\n\nA genre filter dropdown to narrow results by specific genres influenced\nA central network graph visualizing songs/albums influenced by Oceanus Folk across different genres and artists\nA description box for contextual notes or automated narrative summaries\n\nTwo tables: - One summarizing the number of songs per genre influenced by Oceanus Folk - Another listing artists with the most notable songs influenced by the genre\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nOutwardImpactUI &lt;- fluidPage(\n  titlePanel(\"Genre & Artist Influenced by Oceanus Folk\"),\n  \n  tabsetPanel(\n    tabPanel( \n      fluidRow(\n        column(\n          selectInput(),\n          textAreaInput()\n        ),\n        column(\n          visNetworkOutput()\n        )\n      ),\n      br(),\n      fluidRow(\n        column(\n          h5(),\n          DT::dataTableOutput()\n        ),\n        column(\n          h5(),\n          DT::dataTableOutput()\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$influenced_network &lt;- renderVisNetwork({})\noutput$influenced_genre_table &lt;- DT::renderDataTable({})\noutput$influenced_artist_table &lt;- DT::renderDataTable({})\n\n\n\n\n\nThe Roots tab helps users uncover the foundation influences behind Oceanus Folk songs.\nUsers can:\n\nFilter the network by genre to explore specific stylistic influences\nView a network graph highlighting genres and songs that influenced Oceanus Folk, with Oceanus Folk nodes and influenced song nodes distinctly colored\nRead a dynamic description that explains the context and insights\nAnalyze a table summarizing which genres most frequently influenced Oceanus Folk tracks\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nRootsTab &lt;- fluidPage(\n  titlePanel(\"Oceanus Folk’s Evolving Roots\"),\n  \n  fluidRow(\n    column(\n      selectInput( inputId, label, choices = c()), # Dropdown to filter genre\n      \n      tabsetPanel(\n        tabPanel(\n          title = \"Description\",\n          verbatimTextOutput(\"description_text\") # Descriptive explanation\n          )\n      )\n    ),\n    \n    column(\n      plotOutput() # Display network visualization of genre-song influence\n    )\n  ),\n  \n  fluidRow(\n    column(\n      DT::dataTableOutput() # Data table showing genre and count\n    )\n  )\n)\n\n\n# Server\noutput$roots_description_text &lt;- renderText({})\noutput$roots_network &lt;- renderPlot({})\noutput$roots_genre_table &lt;- DT::renderDataTable({})\n\n\n\n\n\n\n\n\nThe Activity tab provides a comparative view of artists’ release behaviors and performance history.\nUsers can:\n\nSelect up to three artists (A, B, and C) for side-by-side comparison\nView individual network graphs showing each artist’s release and influence structure\nAnalyze a timeline line chart of songs or albums released by the selected artists over time\nTrack activity trends to identify peak creative periods and gaps across artist careers\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nArtistsActivityTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Activity\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(\n      plotOutput() # Plot for Artist A\n    ),\n    column(\n      plotOutput() # Plot for Artist B\n    )\n  ),\n  \n  fluidRow(\n    column(\n      plotOutput() # Plot for Artist C\n    ),\n    column(\n      plotOutput() # Line graph comparing release trends\n    )\n  )\n)\n\n# Server\n\noutput$artist_a_network &lt;- renderPlot({})\noutput$artist_b_network &lt;- renderPlot({})\noutput$artist_c_network &lt;- renderPlot({})\noutput$release_timeline &lt;- renderPlot({})\n\n\n\n\n\nThe Contribution tab highlights the creative roles played by artists in Oceanus Folk.\nUsers can:\n\nSelect and compare up to three artists (A, B, and C)\nExplore network graphs that visualize each artist’s contributions as a composer, lyricist, or producer\nAnalyze a contribution table showing the number of works attributed to each role\nIdentify key contributors to the genre’s development through their behind-the-scenes impact\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nArtistsContributionTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Contribution\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist A Network Graph\n    ),\n    column(plotOutput() # Artist B Network Graph\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist C Network Graph\n    ),\n    column(DT::dataTableOutput() # Contribution_table\n    )\n  )\n)\n\n# Server\noutput$contrib_graph_a &lt;- renderPlot({}) # Network graph for Artist A's contributions (ComposerOf, LyricistOf, ProducerOf)\noutput$contrib_graph_b &lt;- renderPlot({}) # Network graph for Artist B's contributions\noutput$contrib_graph_c &lt;- renderPlot({}) # Network graph for Artist C's contributions\n\noutput$contribution_table &lt;- DT::renderDataTable({}) # DataTable showing ComposerOf, LyricistOf, and ProducerOf for selected artists\n\n\n\n\n\nThe Artist’s Collaboration tab showcases the collaborative relationships of Oceanus Folk artists. Users can:\n\nSelect and compare up to three artists (A, B, and C)\nVisualize each artist’s collaboration network with individuals and musical groups\nAnalyze differences in collaboration patterns using structured network graphs\nRefer to a summary table that lists the number of collaborations with persons and musical groups per artist\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nArtistsCollaborationTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Collaboration\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist A Network Graph\n    ),\n    column(plotOutput() # Artist B Network Graph\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist C Network Graph\n    ),\n    column(DT::dataTableOutput() # Collaboration_table\n    )\n  )\n)\n\n# Server\noutput$collab_graph_a &lt;- renderPlot({}) # Network plot showing Artist A's collaborations\noutput$collab_graph_b &lt;- renderPlot({}) # Network plot showing Artist B's collaborations\noutput$collab_graph_c &lt;- renderPlot({}) # Network plot showing Artist C's collaborations\noutput$collaboration_table &lt;- DT::renderDataTable({}) # Table showing artist + number of collaborations with Person & MusicalGroup\n\n\n\n\n\nThe Public Recognition tab compares how often each artist’s work charted in public rankings. Users can:\n\nSelect up to three artists (A, B, and C) for comparison\nView a stacked bar chart that contrasts the number of charted versus uncharted releases per artist\nExplore a detailed table listing each artist’s songs or albums along with their release year, type, and chart status\nAnalyze recognition trends and identify which artists consistently achieve public acclaim\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\n\nPublicRecognitionTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Charted vs Uncharted Songs\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Stacked bar chart for releases\n    )\n  ),\n  \n  fluidRow(\n    column(DT::dataTableOutput() # Detailed list of songs/albums and chart status\n    )\n  )\n)\n\n# Server\noutput$charted_vs_uncharted &lt;- renderPlot({}) # Create a stacked bar chart showing Charted vs Uncharted songs per artist\noutput$charted_table &lt;- DT::renderDataTable({}) # Table with artist name, song/album, year, type, and charted status\n\n\n\n\n\nThe Predictions tab identifies emerging talents most likely to become the next big names in Oceanus Folk. Users can:\n\nExplore a ranked table of rising stars, sorted by calculated “Rising Star Score”\nReview artist attributes including first release year, total works, collaborations, freshness, and inactivity\nUnderstand how metrics like charted ratio and creative activity contribute to the prediction\nRead a description that explains how the prediction model works and what each variable means\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\n\nPredictionsTab &lt;- fluidPage(\n  titlePanel(\"Oceanus Folk Next Rising Star\"),\n  \n  fluidRow(\n    column(DT::dataTableOutput() # Main prediction result table\n    )\n  ),\n  \n  fluidRow(\n    column(tabsetPanel(\n        tabPanel(\n          title = \"Description\",\n          wellPanel(verbatimTextOutput(\"rising_star_description\") # Descriptive Explanation\n          )\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$rising_star_table &lt;- DT::renderDataTable({}) # Table with columns like: Artist, ID, First Release, Total Works, etc.\noutput$rising_star_description &lt;- renderText({}) # Explanation of the Rising Star Score and what users should interpret"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#the-task",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#getting-started",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#getting-started",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Our project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, we will be providing the prototype module report and the UIs designed for the above applications."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#r-packages",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#dataset",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#dataset",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "data &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#storyboard",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#storyboard",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "The storyboard is designed to visually represent the user’s journey within the R Shiny dashboard applications. It acts as a bridge between research insights and user interaction, illustrating how findings are translated into visual and interactive elements. The UI design and interactive features are thoughtfully developed to enable seamless exploration and analysis of data including network components helping users identify key patterns and trace the rising of artist in the music industry.\nThe prototype is organized into three main focus areas:\n\nSailor Shift’s Career Explorer\nOceanus Folk Influence Tracker\nRising Star Prediction Dashboard"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#sailor-shifts-career-explorer",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#sailor-shifts-career-explorer",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "This tab serves as the landing page for Sailor Shift’s Career Explorer module. It provides a high-level summary of the artist’s musical trajectory. As shown in the figure below, the Overview sub-tab consolidates key statistics into a series of information cards that allow users to quickly grasp the scope and success of her career.\nCareer metrics display, showing:\n\nYears active\nNumber of releases\nNumber of collaborators\nNumber of creative roles\nNumber of charted works\nChart success ratio\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI for Overview tab - Sailor Shift’s Career Explorer\nSailorOverviewRow1 &lt;- fluidRow(\n  tabsetPanel(\n    tabPanel(\"Overview\", \n      fluidRow(\n        valueBox(),\n        valueBox(),\n        valueBox()\n      ),\n      fluidRow(\n        valueBox(),\n        valueBox(),\n        valueBox()\n      )\n    )\n  )\n)\n\n# Server Components\n \noutput$activeYears &lt;- renderValueBox({})\noutput$totalReleases &lt;- renderValueBox({})\noutput$collaborators &lt;- renderValueBox({})\noutput$creativeRoles &lt;- renderValueBox({})\noutput$chartedWorks &lt;- renderValueBox({})\noutput$chartSuccess &lt;- renderValueBox({})\n\n\n\n\n\nThe Career Timeline tab enables users to interactively explore Sailor Shift’s music releases over the years. Users can:\n\nFilter releases by type (Album or Song)\nSelect a year range using a slider\nRead description text that updates dynamically\nView a bar chart displaying the number of releases per year by type\nExamine a detailed data table of Sailor’s works with attributes like title, release year, genre, and whether the work was notable\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI \nCareerTimelineUI &lt;- fluidPage(\n  titlePanel(\"Sailor Shift’s Career Timeline\"),\n  \n  tabsetPanel(\n    tabPanel(\"Career Timeline\",\n      fluidRow(\n        column(\n          selectInput()),\n          sliderInput(),\n          textAreaInput()\n        ),\n        column(\n          plotOutput()\n        )\n      ),\n      br(),\n      DT::dataTableOutput()\n    )\n  )\n)\n\n#Server\noutput$release_barplot &lt;- renderPlot({})\noutput$release_table &lt;- DT::renderDataTable({})\n\n\n\n\n\nThe Collaborations tab provides a detailed network-based view of Sailor Shift’s creative relationships. It includes:\nNode and Relation Type Filters: These checkboxes allow users to filter the network by the type of entity (e.g., person, song, album) or relationship (e.g., ComposerOf, LyricistOf).\nInteractive Network Plot: A central network visualization shows Sailor at the center, connected to collaborators through edges labeled with their creative roles.\nDescriptive Panel: Offers a placeholder for dynamic text or analysis summaries.\nData Table: Lists each collaborator with their name, relation to the work, work title, type (Album/Song), and release date.\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nSailorCollabUI &lt;- fluidPage(\n  titlePanel(\"Sailor Shift’s Collaborations\"),\n  \n  tabsetPanel(\n    tabPanel(\"Collaborations\",\n      fluidRow(\n        column( \n          checkboxGroupInput(), selected =),\n          checkboxGroupInput(),\n          textAreaInput()\n        ),\n        column(\n          visNetworkOutput()\n        )\n      ),\n      br(),\n      DT::dataTableOutput()\n    )\n  )\n)\n\n#Server\noutput$collab_network &lt;- renderVisNetwork({})\noutput$collab_table &lt;- DT::renderDataTable({})\n\n\n\n\n\nThe Influence Network tab visualizes how Sailor Shift’s musical works relate to others through influence connections. It allows users to:\n\nFilter by Genre (e.g., Doom Metal, Blues Rock)\nFilter by Influence Type (e.g., CoverOf, InStyleOf, DirectlySamples)\nSearch and Select a Work from a dropdown list for focused exploration\nView a directed network plot that visually maps how her songs and albums connect to or are influenced by other artists’ works\nRead descriptive context in a dedicated panel\nExamine a data table listing all pairwise influence relationships, their types, and associated genres\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nInfluenceNetworkUI &lt;- fluidPage(\n  titlePanel(\"Sailor Shift’s Influence Network\"),\n  \n  tabsetPanel(\n    tabPanel( \n      fluidRow(\n        column( \n          selectInput(, choices = c(), selected =),\n          checkboxGroupInput(\n                             choices = c(),\n                             selected = c()),\n          selectizeInput(),\n          textAreaInput()\n        ),\n        column(\n          visNetworkOutput()\n        )\n      ),\n      br(),\n      DT::dataTableOutput()\n    )\n  )\n)\n\n#Server\noutput$influence_graph&lt;- renderVisNetwork({})\noutput$influence_table &lt;- DT::renderDataTable({})"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#oceanus-folk-influence-tracker",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#oceanus-folk-influence-tracker",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "The Overview tab within the Oceanus Folk Influence Tracker module provides users with a macro-level snapshot of the genre’s scope and evolution.\nKey features include:\nMetric summary cards for:\n\nTotal performers in the Oceanus Folk community\nTotal music releases\nSpan of activity years\nA stacked bar chart visualizing the number of songs vs albums released over time, helping users observe patterns in creative output (e.g., genre peaks, format preferences)\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nOceanusFolkOverviewUI &lt;- fluidPage(\n  titlePanel(\"Oceanus Folk Overview\"),\n  \n  tabsetPanel(\n    tabPanel(\n      fluidRow(\n        valueBox(),\n        valueBox(),\n        valueBox()\n      ),\n      br(),\n      fluidRow(\n        column(\n          plotOutput()\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$totalperformers &lt;- renderValueBox({})\noutput$totalReleases &lt;- renderValueBox({})\noutput$activity_year &lt;- renderValueBox({})\n\noutput$folk_release_chart &lt;- renderPlot({})\n\n\n\n\n\nThe Influence Timeline tab visualizes how Oceanus Folk has contributed to musical influence across time. Key components include:\n\nCheckbox filters to select different influence types (e.g., CoverOf, InterpolatesFrom, LyricalReferenceTo)\nA year range slider to narrow the temporal window of interest\nA multicolored line chart showing trends in the number of influence connections (by type) over time\nA description box for narrative or insight generation\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nInfluenceTimelineUI &lt;- fluidPage(\n  titlePanel(),\n  \n  tabsetPanel(\n    tabPanel(\n      fluidRow(\n        column(\n          checkboxGroupInput( \n            choices = c(),\n            selected = c()),\n          sliderInput(),\n          textAreaInput()\n        ),\n        column(\n          plotOutput()\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$influence_timeline_chart &lt;- renderPlot({})\n\n\n\n\n\nThe Outward Impact tab explores the ripple effect of the Oceanus Folk genre across genres and artists. It features:\n\nA genre filter dropdown to narrow results by specific genres influenced\nA central network graph visualizing songs/albums influenced by Oceanus Folk across different genres and artists\nA description box for contextual notes or automated narrative summaries\n\nTwo tables: - One summarizing the number of songs per genre influenced by Oceanus Folk - Another listing artists with the most notable songs influenced by the genre\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nOutwardImpactUI &lt;- fluidPage(\n  titlePanel(\"Genre & Artist Influenced by Oceanus Folk\"),\n  \n  tabsetPanel(\n    tabPanel( \n      fluidRow(\n        column(\n          selectInput(),\n          textAreaInput()\n        ),\n        column(\n          visNetworkOutput()\n        )\n      ),\n      br(),\n      fluidRow(\n        column(\n          h5(),\n          DT::dataTableOutput()\n        ),\n        column(\n          h5(),\n          DT::dataTableOutput()\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$influenced_network &lt;- renderVisNetwork({})\noutput$influenced_genre_table &lt;- DT::renderDataTable({})\noutput$influenced_artist_table &lt;- DT::renderDataTable({})\n\n\n\n\n\nThe Roots tab helps users uncover the foundation influences behind Oceanus Folk songs.\nUsers can:\n\nFilter the network by genre to explore specific stylistic influences\nView a network graph highlighting genres and songs that influenced Oceanus Folk, with Oceanus Folk nodes and influenced song nodes distinctly colored\nRead a dynamic description that explains the context and insights\nAnalyze a table summarizing which genres most frequently influenced Oceanus Folk tracks\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nRootsTab &lt;- fluidPage(\n  titlePanel(\"Oceanus Folk’s Evolving Roots\"),\n  \n  fluidRow(\n    column(\n      selectInput( inputId, label, choices = c()), # Dropdown to filter genre\n      \n      tabsetPanel(\n        tabPanel(\n          title = \"Description\",\n          verbatimTextOutput(\"description_text\") # Descriptive explanation\n          )\n      )\n    ),\n    \n    column(\n      plotOutput() # Display network visualization of genre-song influence\n    )\n  ),\n  \n  fluidRow(\n    column(\n      DT::dataTableOutput() # Data table showing genre and count\n    )\n  )\n)\n\n\n# Server\noutput$roots_description_text &lt;- renderText({})\noutput$roots_network &lt;- renderPlot({})\noutput$roots_genre_table &lt;- DT::renderDataTable({})"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#rising-star-prediction-dashboard",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#rising-star-prediction-dashboard",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "The Activity tab provides a comparative view of artists’ release behaviors and performance history.\nUsers can:\n\nSelect up to three artists (A, B, and C) for side-by-side comparison\nView individual network graphs showing each artist’s release and influence structure\nAnalyze a timeline line chart of songs or albums released by the selected artists over time\nTrack activity trends to identify peak creative periods and gaps across artist careers\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nArtistsActivityTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Activity\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(\n      plotOutput() # Plot for Artist A\n    ),\n    column(\n      plotOutput() # Plot for Artist B\n    )\n  ),\n  \n  fluidRow(\n    column(\n      plotOutput() # Plot for Artist C\n    ),\n    column(\n      plotOutput() # Line graph comparing release trends\n    )\n  )\n)\n\n# Server\n\noutput$artist_a_network &lt;- renderPlot({})\noutput$artist_b_network &lt;- renderPlot({})\noutput$artist_c_network &lt;- renderPlot({})\noutput$release_timeline &lt;- renderPlot({})\n\n\n\n\n\nThe Contribution tab highlights the creative roles played by artists in Oceanus Folk.\nUsers can:\n\nSelect and compare up to three artists (A, B, and C)\nExplore network graphs that visualize each artist’s contributions as a composer, lyricist, or producer\nAnalyze a contribution table showing the number of works attributed to each role\nIdentify key contributors to the genre’s development through their behind-the-scenes impact\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nArtistsContributionTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Contribution\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist A Network Graph\n    ),\n    column(plotOutput() # Artist B Network Graph\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist C Network Graph\n    ),\n    column(DT::dataTableOutput() # Contribution_table\n    )\n  )\n)\n\n# Server\noutput$contrib_graph_a &lt;- renderPlot({}) # Network graph for Artist A's contributions (ComposerOf, LyricistOf, ProducerOf)\noutput$contrib_graph_b &lt;- renderPlot({}) # Network graph for Artist B's contributions\noutput$contrib_graph_c &lt;- renderPlot({}) # Network graph for Artist C's contributions\n\noutput$contribution_table &lt;- DT::renderDataTable({}) # DataTable showing ComposerOf, LyricistOf, and ProducerOf for selected artists\n\n\n\n\n\nThe Artist’s Collaboration tab showcases the collaborative relationships of Oceanus Folk artists. Users can:\n\nSelect and compare up to three artists (A, B, and C)\nVisualize each artist’s collaboration network with individuals and musical groups\nAnalyze differences in collaboration patterns using structured network graphs\nRefer to a summary table that lists the number of collaborations with persons and musical groups per artist\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\nArtistsCollaborationTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Collaboration\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist A Network Graph\n    ),\n    column(plotOutput() # Artist B Network Graph\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Artist C Network Graph\n    ),\n    column(DT::dataTableOutput() # Collaboration_table\n    )\n  )\n)\n\n# Server\noutput$collab_graph_a &lt;- renderPlot({}) # Network plot showing Artist A's collaborations\noutput$collab_graph_b &lt;- renderPlot({}) # Network plot showing Artist B's collaborations\noutput$collab_graph_c &lt;- renderPlot({}) # Network plot showing Artist C's collaborations\noutput$collaboration_table &lt;- DT::renderDataTable({}) # Table showing artist + number of collaborations with Person & MusicalGroup\n\n\n\n\n\nThe Public Recognition tab compares how often each artist’s work charted in public rankings. Users can:\n\nSelect up to three artists (A, B, and C) for comparison\nView a stacked bar chart that contrasts the number of charted versus uncharted releases per artist\nExplore a detailed table listing each artist’s songs or albums along with their release year, type, and chart status\nAnalyze recognition trends and identify which artists consistently achieve public acclaim\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\n\nPublicRecognitionTab &lt;- fluidPage(\n  titlePanel(\"Artist’s Charted vs Uncharted Songs\"),\n  \n  fluidRow(\n    column(selectInput(choices = c()) # Dropdown for Artist A\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist B\n    ),\n    column(selectInput(choices = c()) # Dropdown for Artist C\n    )\n  ),\n  \n  fluidRow(\n    column(plotOutput() # Stacked bar chart for releases\n    )\n  ),\n  \n  fluidRow(\n    column(DT::dataTableOutput() # Detailed list of songs/albums and chart status\n    )\n  )\n)\n\n# Server\noutput$charted_vs_uncharted &lt;- renderPlot({}) # Create a stacked bar chart showing Charted vs Uncharted songs per artist\noutput$charted_table &lt;- DT::renderDataTable({}) # Table with artist name, song/album, year, type, and charted status\n\n\n\n\n\nThe Predictions tab identifies emerging talents most likely to become the next big names in Oceanus Folk. Users can:\n\nExplore a ranked table of rising stars, sorted by calculated “Rising Star Score”\nReview artist attributes including first release year, total works, collaborations, freshness, and inactivity\nUnderstand how metrics like charted ratio and creative activity contribute to the prediction\nRead a description that explains how the prediction model works and what each variable means\n\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab.\n\n\nCode\n# UI\n\nPredictionsTab &lt;- fluidPage(\n  titlePanel(\"Oceanus Folk Next Rising Star\"),\n  \n  fluidRow(\n    column(DT::dataTableOutput() # Main prediction result table\n    )\n  ),\n  \n  fluidRow(\n    column(tabsetPanel(\n        tabPanel(\n          title = \"Description\",\n          wellPanel(verbatimTextOutput(\"rising_star_description\") # Descriptive Explanation\n          )\n        )\n      )\n    )\n  )\n)\n\n# Server\noutput$rising_star_table &lt;- DT::renderDataTable({}) # Table with columns like: Artist, ID, First Release, Total Works, etc.\noutput$rising_star_description &lt;- renderText({}) # Explanation of the Rising Star Score and what users should interpret"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#inspect-structure",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#inspect-structure",
    "title": "In Class Exercise 3",
    "section": "2.1 Inspect Structure",
    "text": "2.1 Inspect Structure\n\nstr(kg,max.level=1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#extract-and-inspect",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#extract-and-inspect",
    "title": "In Class Exercise 3",
    "section": "2.2 Extract and Inspect",
    "text": "2.2 Extract and Inspect\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#initial-eda",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#initial-eda",
    "title": "In Class Exercise 3",
    "section": "2.3 Initial EDA",
    "text": "2.3 Initial EDA\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n       geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n       geom_bar()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-1-mapping-from-node-id-to-row-index",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-1-mapping-from-node-id-to-row-index",
    "title": "In Class Exercise 3",
    "section": "3.1 Step 1 : Mapping from Node ID to Row Index",
    "text": "3.1 Step 1 : Mapping from Node ID to Row Index\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)\n                  )\n                 )\n\nThis ensures each id from your node list is mapped to the correct row number"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-2-map-source-and-target-ids-to-row-indicises",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-2-map-source-and-target-ids-to-row-indicises",
    "title": "In Class Exercise 3",
    "section": "3.2 Step 2 : Map Source and Target IDs to row indicises",
    "text": "3.2 Step 2 : Map Source and Target IDs to row indicises\n\nedges_tbl &lt;- edges_tbl %&gt;% \n  left_join(id_map, by = c(\"source\" = \"id\"))%&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\"))%&gt;%\n  rename(to = index)\n\n\n3.2.1 Step 3 : Filter out any unmatched (invalid) edges\n\nedges_tbl&lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n3.2.2 Step 4 : Creating the Graph\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#visualising-the-knowledge-graph",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#visualising-the-knowledge-graph",
    "title": "In Class Exercise 3",
    "section": "3.3 Visualising the knowledge graph",
    "text": "3.3 Visualising the knowledge graph\n\nset.seed(1234)\n\n\n3.3.1 Visualising the Whole Graph\n\nggraph(graph,layout = \"fr\")+\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n3.3.2 Visualising The Sub Graph\n\n3.3.2.1 Step 1 : Filter Edges to only “MemberOf”\n\ngraph_memberof &lt;- graph %&gt;% \n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n3.3.2.2 Step 2 : Extract only connected nodes (i.e., used in these edges)\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;% \n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n3.3.3 Step 3 : Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;% \n  mutate(row_id = row_number()) %&gt;% \n  filter(row_id %in% used_node_indices) %&gt;% \n  select(-row_id)\n\n\n\n3.3.4 Plot the sub-graph\n\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 color = \"gray\")+\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\nWarning: ggrepel: 789 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  }
]