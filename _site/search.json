[
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\nWe are required to prepare the prototype module report as Take-home Exercise 3 submission.\nWe are required to include a section called UI design for the different components of the UIs for the proposed design.\n\n\n\n\nOur project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications.\n\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)\n\n\n\n\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\nfont_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)\n\n\n\n\n\n\n\nEdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x0000013d06d46348&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763 \n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)\n\n\n\n\n\n\n\nCode\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n ### Tab 5 : Prediction\n\n\n\n\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html",
    "title": "Take Home Exercise 1 Feedback",
    "section": "",
    "text": "Choose one of my classmate’s submissions and identify three strengths based on good design principles, as well as three aspects that could be improved. Based our your critique, create an improved version of the data visualization."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#task",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#task",
    "title": "Take Home Exercise 1 Feedback",
    "section": "",
    "text": "Choose one of my classmate’s submissions and identify three strengths based on good design principles, as well as three aspects that could be improved. Based our your critique, create an improved version of the data visualization."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#peer-review",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#peer-review",
    "title": "Take Home Exercise 1 Feedback",
    "section": "Peer Review",
    "text": "Peer Review\nThis review is based on one of my classmate submission which is available at here"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#the-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#the-data",
    "title": "Take Home Exercise 1 Feedback",
    "section": "The Data",
    "text": "The Data\nThe dataset titled “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, published by the Department of Statistics Singapore (DOS) was used for our class assignment"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#loading-packages",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#loading-packages",
    "title": "Take Home Exercise 1 Feedback",
    "section": "Loading Packages",
    "text": "Loading Packages\nBelow is the package that was downloaded by the peer.\n\nlibrary(tidyverse)\n\nHere is some additional packages that I use for this peer review :\n\nlibrary(scales)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#loading-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#loading-data",
    "title": "Take Home Exercise 1 Feedback",
    "section": "Loading Data",
    "text": "Loading Data\nThe code chunk below loads the data. I’ve prepared two datasets, one for the original plot and another is for the makeover.\n\noriginaldata &lt;- read_csv(\"data/respopagesex2024.csv\")\n\n\nmakeover &lt;- read_csv(\"data/respopagesex2024.csv\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#visualization-review",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#visualization-review",
    "title": "Take Home Exercise 1 Feedback",
    "section": "Visualization Review",
    "text": "Visualization Review\n\nVisualisation 2: Top 10 Planning Areas by Total Population\n\nThe Original Visualization\n\ntop_pa &lt;- originaldata %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 10)\n\nggplot(top_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Top 10 Most Populous Planning Areas (2024)\",\n       x = \"Planning Area\", y = \"Total Population\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nFeedbacks\n\n\nOverall Rating – Quadrant III:\n\n\nReferring to the Clarity vs. Aesthetics framework by Ben Jones, I would place this chart in Quadrant III, which represents visualizations that are both confusing and unattractive. Visually, the chart could be enhanced with better spacing, labeling, and color contrast to improve its aesthetic appeal and overall clarity.\n\nGood Design Points :\n\n1. Well Ordered from Highest Population to Lowest\n\nThe bars are arranged in descending order, starting from the planning area with the highest population at the top to the lowest at the bottom. With this type of ordering it helps the audience especially for general readers to quickly grasp the ranking of each area without the need to compare individual values. Thus, this type of graph enhance the readanility and allows easy visual comparison across planning areas.\n\n2. Clear Axis Label\n\nBoth the x-axis and y-axis title are clearly labeled which ensure the readers can immediately understand what the chart is showing without additional need of explanation.\n\n3. Horizontal Layout \n\nUsing horizontal bars is well considered design choice, especially dealing with long category names such as “Jurong West” and “Choa Chu Kang”. If the writer decided to use vertical bar charts, lenghty category names often will become overlaped which can significantly reduce readability.\n\n\nAreas for Improvement\n\n1. X-Axis Values Format\n\nI believe as a general audience especially for those who does not have any mathemathical background, scientific notation like 1e+05 would be hard to understand and confusing. It is not immediately clear so instead I would suggest using some basic mathemathical formatting like (comma) would be more friendly and easier to interpret for general audience.\n\n2. Lack of Data Labels on Bars\n\nIn this case, since the chart is presented using a static chart (without interactive features), as an audience it is impossible for us to know the exact population per planning areas. As a result this chart becomes somewhat limited in usefulness eventhough it clearly shows the ranking of the planning area. In my opinion, adding data labels would greatly enhance the clarity and make the chart more informative.\n\n3. Monochromatic Color Scheme\n\nSince the chart uses a single color (steelblue) for all bars, it is harder to distinguish or emphasize which one is the top ranked area. In my opinion choosing this kind of visualization makes a limitation for the visual impact. Including color variation (gradient) based on the population size would make the chart more engaging and help the readers to draw attention to the most important values.\n\n\n\nMakeover Visualization\n\ntop_pa &lt;- makeover %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 10)\n\nggplot(top_pa, \n  aes(x = reorder(PA, Total_Pop), y = Total_Pop, fill = Total_Pop)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = comma(Total_Pop)), hjust = -0.15, size = 3) +\n  coord_flip() +\n  scale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.15))) +\n  labs(\n    title = \"Top 10 Most Populous Planning Areas (2024)\",\n    subtitle = \"Source: Department of Statistics, Singapore (DOS)\",\n    x = \"Planning Area\", \n    y = \"Total Population\"\n  ) +\n  scale_fill_gradient(low = \"#D6EAF8\", high = \"#154360\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14),\n    plot.subtitle = element_text(size = 10),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\n\n\n\n\n\n\n\n\nfill = Total_Pop was added inside aes() to create a color gradient that represents population.\ngeom_text(aes(label = comma(Total_Pop)), ...) was added to display population values on each bar.\nscale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.15))) was added to format the y-axis with commas instead of scientific notation and also expand the axis range so that the text labels per bar could fit into the chart.\nscale_fill_gradient(low = \"#D6EAF8\", high = \"#154360\") was added to apply gradient color scheme to the bars.\nThe labs(..., subtitle = \"Source: Department of Statistics, Singapore (DOS), ...)\" was also added to provide data source information so that the reader could understand the credibillity of the chart.\n\n\nAdditional Critique :\n\nBesides evaluating the visualization itself, I would like to offer a critique on the data preparation process. As analysts, one of our most important responsibilities before diving into visualization is to question and examine the data quality. Data cleaning and recoding are essential steps in ensuring that the information we present is accurate and meaningful.\nFor instance, in the first visualization shared by my peer, the age values appeared cluttered. This could have been improved through data recoding, such as grouping individual ages into age categories, which would make the chart more organized and easier to interpret.\nAdditionally, during my own analysis, I noticed that some planning areas had a population of zero. While this may not affect Visualization 2 which only shows the 10 most populous planning areas, questioning the data could have a great impact on catch inconsistencies and outliers."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#references",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01Feedback.html#references",
    "title": "Take Home Exercise 1 Feedback",
    "section": "References",
    "text": "References\nData visualization: Clarity or aesthetics?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evangeline Olivia’s Visual Analytics Coursework",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications website. In this website, you will find my coursework prepared for this course.\n\nLatest Work :\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 1\n\n\nA Layered Grammar of Graphics ggplot2 methods\n\n\n\nApr 18, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 2\n\n\nBeyond ggplot2 Fundamentals\n\n\n\nApr 22, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3b\n\n\nProgramming Animated Statistical Graphics with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3a\n\n\nProgramming Interactive Data Visualisation with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1\n\n\nSingapore Population Analysis\n\n\n\nMay 01, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4a\n\n\nVisualising Distribution\n\n\n\nMay 04, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4c\n\n\nVisualising Uncertainty\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4b\n\n\nVisual Statistical Analysis\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4d\n\n\nFunnel Plots for Fair Comparisons\n\n\n\nMay 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1 Feedback\n\n\nLearn from Peers\n\n\n\nMay 08, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 5\n\n\nModelling, Visualising and Analysing Network Data with R\n\n\n\nMay 11, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 2\n\n\nVAST Challenge 2025 Mini-Challenge 1\n\n\n\nMay 13, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 6\n\n\nVisualising and Analysing Time-Oriented Data\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 3\n\n\nExploring VAST 2025 Mini Challenge 1\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8c\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8b\n\n\nVisualising Geospatial Point Data\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8a\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 01\n\n\nSuperstore Sales and Profit Report\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "title": "In Class Exercise 01",
    "section": "",
    "text": "Here is my Tableau Public Dashboard :"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html",
    "title": "Hands on Exercise 8b",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap.\n\n\nBy the end of this hands-on exercise, we will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "title": "Hands on Exercise 8b",
    "section": "",
    "text": "By the end of this hands-on exercise, we will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "title": "Hands on Exercise 8b",
    "section": "14.1 The data",
    "text": "14.1 The data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System.\n ## Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands on Exercise 8b",
    "section": "14.2 Creating a sf data frame from an aspatial data frame",
    "text": "14.2 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\n\n\n\n\n\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\n\n\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nWe can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands on Exercise 8b",
    "section": "15.1 It all started with an interactive point symbol map",
    "text": "15.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n           size = 1,\n           col = \"black\",\n           lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "title": "Hands on Exercise 8b",
    "section": "15.2 Lets make it proportional",
    "text": "15.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "title": "Hands on Exercise 8b",
    "section": "15.3 Lets give it a different colour",
    "text": "15.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#faceted-plots",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#faceted-plots",
    "title": "Hands on Exercise 8b",
    "section": "15.4 Faceted plots",
    "text": "15.4 Faceted plots\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1) + \n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#all-about-tmap-package",
    "title": "Hands on Exercise 8b",
    "section": "16.1 All about tmap package",
    "text": "16.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#geospatial-data-wrangling-1",
    "title": "Hands on Exercise 8b",
    "section": "16.2 Geospatial data wrangling",
    "text": "16.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-wrangling",
    "title": "Hands on Exercise 8b",
    "section": "16.3 Data wrangling",
    "text": "16.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, we will be able to:\n\nCreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nBuild network graph visualisation using appropriate functions of ggraph, compute network geometrics using tidygraph,\nBuild advanced graph visualisation by incorporating the network geometrics, and\nBuild interactive network visualisation using visNetwork package.\n\n\n\n\n\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched.\n\nigraph: A core package for creating and analyzing network graphs.\ntidygraph: Integrates tidyverse principles into graph data manipulation.\nggraph: Extends ggplot2 for network graph visualization.\nvisNetwork: Provides interactive network visualizations using vis.js.\n\nIn addition to the four network packages above, the following will also be installed and loaded:\n\ntidyverse: A collection of R packages for data manipulation and visualization.\nlubridate: Designed specifically for working with and wrangling time-related data.\n\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)\n\n\n\n\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nThe output report of GAStech_edges shows that the SentDate field is currently treated as a character data type instead of a date. This is incorrect. Before proceeding, we need to convert the SentDate field back to the correct date data type.\n\n\n\n\n\n\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nBoth dmy() and wday() are functions from the lubridate package, which is designed to simplify working with dates and times in R.\ndmy() is used to convert the SentDate column from character to proper Date data type.\nwday() returns the day of the week from a date:\n\nIt can return the result as a decimal number or as an ordered factor when label = TRUE.\nSetting abbr = FALSE ensures that the day names are spelled out in full (e.g., “Monday” instead of “Mon”).\n\nThe output of wday() will be saved into a new column called Weekday in the data frame.\nThe values in the Weekday column represent an ordinal scale, as the days of the week have a natural order.\n\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nFour functions from the dplyr package are used: filter(), group(), summarise(), and ungroup().\nThe resulting data frame is named GAStech_edges_aggregated.\nA new field called Weight has been added to GAStech_edges_aggregated.\n\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n\n\n\n\n\n\nIn this section, we’ll use the tidygraph package to build a graph data model. Although network data isn’t tidy by default, it can be viewed as two tidy tables: one for nodes and one for edges. tidygraph lets you switch between them and apply dplyr-style operations, while also providing access to common graph algorithms within a tidy workflow.\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nactivate(nodes) switches to the node table.\nmutate(Species = ...) adds a new Species column to leaf nodes using labels from the original iris dataset.\nactivate(edges) switches to the edge table.\nmutate(to_setose = ...) adds a column that marks TRUE if the edge points to a node with species \"setosa\".\n.N() is used to access the node data while working within the edge context.\n\n\n\n\n\n\n\n\n.N() → Access the nodes table from within edge operations.\n\n.E() → Access the edges table (not used here).\n\n.G() → Access the entire tbl_graph object.\n\n\n\n\n\n\n\nIn this section, we will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\n\n\n\n\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes.\n\nCodeExploration 💭\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(color = \"grey70\") +\n  geom_node_point(color = \"#A94442\", size = 2)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\nCodeExploration 💭\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\ng2 &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(color = \"Edge\"), alpha = 0.6) +\n  geom_node_point(aes(color = \"Node\"), size = 2) +\n  scale_edge_color_manual(name = \"Edge Colour\", values = c(\"Edge\" = \"white\")) +\n  scale_color_manual(name = \"Node Colour\", values = c(\"Node\" = \"#A94442\")) +\n  theme_graph(background = \"grey10\", text_colour = \"white\")\n\ng2 + theme_graph(background = 'grey10',\n                 text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n \n\n\n\n\nCodeExploration 💭\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlayout argument is used to define the layout to be used.\n\n\n\n\n\n\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, layout = \"kk\") +\n  geom_edge_link() +\n  geom_node_point()\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, layout = \"circle\") +\n  geom_edge_link() +\n  geom_node_point()\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will colour each node by referring to their respective departments.\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes.\n\n\n\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_edge_link draws straight edges between nodes. In the example, width maps line thickness to the Weight attribute, and alpha adds transparency.\n\n\n\n\n\n\n\n\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used.\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\nCodeExploration 💭\n\n\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = \"bottom\",\n      legend.box = \"vertical\")\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds frame to each graph.\n\n\nShow Code\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"#F2C6DE\",  \n                border = TRUE) +\n  theme(legend.position = \"bottom\",\n      legend.box = \"vertical\")\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, facet_nodes() is used.\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"#F2C6DE\",  \n                border = TRUE) +\n  theme(legend.position = \"bottom\",\n      legend.box = \"vertical\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\n\ng + theme_graph() +\n  theme(\n    legend.text = element_text(size = 8),\n    legend.title = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\n\n\n\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it.link\nIn the code chunk below group_edge_betweenness() is used.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"), \n    radius = unit(0.3, \"cm\")  \n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nCodeExploration 💭\n\n\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\n\n\n\nShow Code\nvisNetwork(GAStech_nodes, GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_in_circle\")\n\n\n\n\n\n\n\n\n\nvisIgraphLayout’s argument : Igraph\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nvisEdges’s argument : visEdges\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nvisOption’s argument : visOption"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, we will be able to:\n\nCreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nBuild network graph visualisation using appropriate functions of ggraph, compute network geometrics using tidygraph,\nBuild advanced graph visualisation by incorporating the network geometrics, and\nBuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, four network data modelling and visualisation packages will be installed and launched.\n\nigraph: A core package for creating and analyzing network graphs.\ntidygraph: Integrates tidyverse principles into graph data manipulation.\nggraph: Extends ggplot2 for network graph visualization.\nvisNetwork: Provides interactive network visualizations using vis.js.\n\nIn addition to the four network packages above, the following will also be installed and loaded:\n\ntidyverse: A collection of R packages for data manipulation and visualization.\nlubridate: Designed specifically for working with and wrangling time-related data.\n\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nThe output report of GAStech_edges shows that the SentDate field is currently treated as a character data type instead of a date. This is incorrect. Before proceeding, we need to convert the SentDate field back to the correct date data type.\n\n\n\n\n\n\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nBoth dmy() and wday() are functions from the lubridate package, which is designed to simplify working with dates and times in R.\ndmy() is used to convert the SentDate column from character to proper Date data type.\nwday() returns the day of the week from a date:\n\nIt can return the result as a decimal number or as an ordered factor when label = TRUE.\nSetting abbr = FALSE ensures that the day names are spelled out in full (e.g., “Monday” instead of “Mon”).\n\nThe output of wday() will be saved into a new column called Weekday in the data frame.\nThe values in the Weekday column represent an ordinal scale, as the days of the week have a natural order.\n\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nFour functions from the dplyr package are used: filter(), group(), summarise(), and ungroup().\nThe resulting data frame is named GAStech_edges_aggregated.\nA new field called Weight has been added to GAStech_edges_aggregated.\n\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "In this section, we’ll use the tidygraph package to build a graph data model. Although network data isn’t tidy by default, it can be viewed as two tidy tables: one for nodes and one for edges. tidygraph lets you switch between them and apply dplyr-style operations, while also providing access to common graph algorithms within a tidy workflow.\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nactivate(nodes) switches to the node table.\nmutate(Species = ...) adds a new Species column to leaf nodes using labels from the original iris dataset.\nactivate(edges) switches to the edge table.\nmutate(to_setose = ...) adds a column that marks TRUE if the edge points to a node with species \"setosa\".\n.N() is used to access the node data while working within the edge context.\n\n\n\n\n\n\n\n\n.N() → Access the nodes table from within edge operations.\n\n.E() → Access the edges table (not used here).\n\n.G() → Access the entire tbl_graph object.\n\n\n\n\n\n\n\nIn this section, we will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "ggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes.\n\nCodeExploration 💭\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(color = \"grey70\") +\n  geom_node_point(color = \"#A94442\", size = 2)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\nCodeExploration 💭\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\ng2 &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(color = \"Edge\"), alpha = 0.6) +\n  geom_node_point(aes(color = \"Node\"), size = 2) +\n  scale_edge_color_manual(name = \"Edge Colour\", values = c(\"Edge\" = \"white\")) +\n  scale_color_manual(name = \"Node Colour\", values = c(\"Node\" = \"#A94442\")) +\n  theme_graph(background = \"grey10\", text_colour = \"white\")\n\ng2 + theme_graph(background = 'grey10',\n                 text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n \n\n\n\n\nCodeExploration 💭\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlayout argument is used to define the layout to be used.\n\n\n\n\n\n\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, layout = \"kk\") +\n  geom_edge_link() +\n  geom_node_point()\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, layout = \"circle\") +\n  geom_edge_link() +\n  geom_node_point()\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will colour each node by referring to their respective departments.\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes.\n\n\n\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nShow Code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_edge_link draws straight edges between nodes. In the example, width maps line thickness to the Weight attribute, and alpha adds transparency."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "Another very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used.\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\nCodeExploration 💭\n\n\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = \"bottom\",\n      legend.box = \"vertical\")\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds frame to each graph.\n\n\nShow Code\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"#F2C6DE\",  \n                border = TRUE) +\n  theme(legend.position = \"bottom\",\n      legend.box = \"vertical\")\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, facet_nodes() is used.\n\n\nShow Code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"#F2C6DE\",  \n                border = TRUE) +\n  theme(legend.position = \"bottom\",\n      legend.box = \"vertical\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metrics-analysis",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\n\ng + theme_graph() +\n  theme(\n    legend.text = element_text(size = 8),\n    legend.title = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\n\n\n\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it.link\nIn the code chunk below group_edge_betweenness() is used.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\nShow Code\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"), \n    radius = unit(0.3, \"cm\")  \n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "visNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nCodeExploration 💭\n\n\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\n\n\n\nShow Code\nvisNetwork(GAStech_nodes, GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_in_circle\")\n\n\n\n\n\n\n\n\n\nvisIgraphLayout’s argument : Igraph\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nvisEdges’s argument : visEdges\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nShow Code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nvisOption’s argument : visOption"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "Hands on Exercise 4c",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, we will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nShow Code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nShow Code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\n\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\nIn this section, we will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nShow Code\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function comes with many arguments. For example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\n\n\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO : Makeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = c(0.95, 0.99),   # 95% and 99% confidence intervals\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + 95% and 99% Confidence Intervals\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\n\n\n\nNote: Only need to perform this step once.\n\n\n\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs.\n\n\nShow Code\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#learning-outcome",
    "title": "Hands on Exercise 4c",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "title": "Hands on Exercise 4c",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands on Exercise 4c",
    "section": "",
    "text": "A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, we will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nShow Code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nShow Code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\n\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\nIn this section, we will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nShow Code\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "title": "Hands on Exercise 4c",
    "section": "",
    "text": "ggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function comes with many arguments. For example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\n\n\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO : Makeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = c(0.95, 0.99),   # 95% and 99% confidence intervals\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + 95% and 99% Confidence Intervals\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow Code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands on Exercise 4c",
    "section": "",
    "text": "devtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\n\n\n\nNote: Only need to perform this step once.\n\n\n\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs.\n\n\nShow Code\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "Hands on Exercise 4a",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, ggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or - color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n\nShow Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) + \n  geom_density_ridges(rel_min_height = 0.02) +\n  theme_ridges()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If we have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nShow Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\", direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "title": "Hands on Exercise 4a",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "title": "Hands on Exercise 4a",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, ggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or - color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands on Exercise 4a",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n\nShow Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) + \n  geom_density_ridges(rel_min_height = 0.02) +\n  theme_ridges()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If we have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nShow Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\", direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands on Exercise 4a",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\nShow Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#reference",
    "title": "Hands on Exercise 4a",
    "section": "",
    "text": "Introducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands on Exercise 3a",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotly packages.\n\n\n\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\n\n\nThe example below demonstrates a typical code chunk for creating an interactive statistical graph using the ggiraph package. The code consists of two main parts: first, a ggplot object is created. Then, the girafe() function from ggiraph is used to transform it into an interactive SVG object.\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)+ theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\n\nNotice that two steps are involved.\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n\nShow Code\nexam_data$tooltip &lt;- c(paste0(\"Name = \", exam_data$ID, \"\\n Class = \", exam_data$CLASS)) #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,breaks = NULL) + theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n\nShow Code\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css))\n)                                             \n\n\n\n\n\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\n\n\nThe code chunk below demonstrates a more advanced method for customizing tooltips. In this example, a function is used to calculate the 90% confidence interval of the mean, and the resulting statistics are then shown within the tooltip.\n\n\nShow Code\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  ) + theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)                     \n\n\n\n\n\n\n\n\n\n\nThe code chunk below demonstrates the second interactive feature provided by ggiraph, known as data_id. In this example, elements linked by the same data_id are highlighted simultaneously when hovered over.\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                          \n\n\n\n\n\n\n\n\n\n\n\n\nThe default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n\n\nIn the code chunk below, CSS styles are applied to customize the appearance of the highlighting effect.\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL, breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #F2C6DE; stroke: none;\"),\n    opts_hover_inv(css = \"opacity: 0.2;\")\n  )\n)                      \n\n\n\n\n\n\n\n\n\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",\n    fill = \"#DBCDF0\",\n    color = \"#BFAECC\") +               \n  scale_y_continuous(NULL,breaks = NULL) + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #F2C6DE; stroke: none;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\n\n\n\n\n\nThe onclick argument in ggiraph enables clickable elements that link to web pages, adding interactive hyperlink functionality.\n\n\nShow Code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,breaks = NULL) + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\nShow Code\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL) + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen a data point is selected in the dotplot, the corresponding ID will also be highlighted in the second data visualisation.\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics.\nDifferent from other plotly platform, plot.R is free and open source.\nThere are two main approaches to creating interactive graphs with the plotly package:\n\nUsing the plot_ly() function to build the plot directly, and\nConverting an existing ggplot2 object into an interactive plot with ggplotly()\n\n\n\n\n\nShow Code\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\n\ncolor argument is mapped to a qualitative visual variable.\n\n\nShow Code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\n\nInteractive scatter plot by using ggplotly().\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\nShow Code\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nShow Code\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight() : from the plotly package sets options for interactive brushing, mainly for linking multiple plotly plots.\nbscols() : from the crosstalk package arranges HTML elements side by side, especially useful in R Markdown.\n\n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\n\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "title": "Hands on Exercise 3a",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotly packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "title": "Hands on Exercise 3a",
    "section": "",
    "text": "ggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "Hands on Exercise 3a",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands on Exercise 3a",
    "section": "",
    "text": "ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\n\n\nThe example below demonstrates a typical code chunk for creating an interactive statistical graph using the ggiraph package. The code consists of two main parts: first, a ggplot object is created. Then, the girafe() function from ggiraph is used to transform it into an interactive SVG object.\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)+ theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\n\nNotice that two steps are involved.\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n\nShow Code\nexam_data$tooltip &lt;- c(paste0(\"Name = \", exam_data$ID, \"\\n Class = \", exam_data$CLASS)) #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,breaks = NULL) + theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n\nShow Code\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css))\n)                                             \n\n\n\n\n\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\n\n\nThe code chunk below demonstrates a more advanced method for customizing tooltips. In this example, a function is used to calculate the 90% confidence interval of the mean, and the resulting statistics are then shown within the tooltip.\n\n\nShow Code\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  ) + theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)                     \n\n\n\n\n\n\n\n\n\n\nThe code chunk below demonstrates the second interactive feature provided by ggiraph, known as data_id. In this example, elements linked by the same data_id are highlighted simultaneously when hovered over.\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                          \n\n\n\n\n\n\n\n\n\n\n\n\nThe default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n\n\nIn the code chunk below, CSS styles are applied to customize the appearance of the highlighting effect.\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL, breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #F2C6DE; stroke: none;\"),\n    opts_hover_inv(css = \"opacity: 0.2;\")\n  )\n)                      \n\n\n\n\n\n\n\n\n\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",\n    fill = \"#DBCDF0\",\n    color = \"#BFAECC\") +               \n  scale_y_continuous(NULL,breaks = NULL) + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #F2C6DE; stroke: none;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\n\n\n\n\n\nThe onclick argument in ggiraph enables clickable elements that link to web pages, adding interactive hyperlink functionality.\n\n\nShow Code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,breaks = NULL) + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\nShow Code\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL) + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen a data point is selected in the dotplot, the corresponding ID will also be highlighted in the second data visualisation.\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands on Exercise 3a",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics.\nDifferent from other plotly platform, plot.R is free and open source.\nThere are two main approaches to creating interactive graphs with the plotly package:\n\nUsing the plot_ly() function to build the plot directly, and\nConverting an existing ggplot2 object into an interactive plot with ggplotly()\n\n\n\n\n\nShow Code\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\n\ncolor argument is mapped to a qualitative visual variable.\n\n\nShow Code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\n\nInteractive scatter plot by using ggplotly().\n\n\nShow Code\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\nShow Code\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nShow Code\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight() : from the plotly package sets options for interactive brushing, mainly for linking multiple plotly plots.\nbscols() : from the crosstalk package arranges HTML elements side by side, especially useful in R Markdown."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "title": "Hands on Exercise 3a",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\n\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nggplot(data = exam_data,aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts) - geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\ngeom_bargeom_dotplotgeom_histogram()geom-density()geom_boxplot()geom_boxplot() : notchesgeom_violin()geom_point()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()      \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()  \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)           \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)                 \n\n\n\n\n\n\n\n\n\n\n\n\ngeom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)      \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe default smoothing line method can be overwritten as :\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet_wrap()facet_grid()\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncoord_flip()coord_cartesian()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\n\n\ntheme_gray()theme_classic()theme_light()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n  theme_light()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-bar-chart",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "ggplot(data = exam_data,aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "R Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "Data: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2data",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-aesthetic-mappings",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-geom",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "Geometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts) - geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\ngeom_bargeom_dotplotgeom_histogram()geom-density()geom_boxplot()geom_boxplot() : notchesgeom_violin()geom_point()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()      \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()  \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-stat",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)           \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#best-fit-curve-for-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#best-fit-curve-for-scatterplot",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)      \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe default smoothing line method can be overwritten as :\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-facets",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "facet_wrap()facet_grid()\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-coordinates",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "coord_flip()coord_cartesian()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot2-themes",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "theme_gray()theme_classic()theme_light()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n  theme_light()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "Use ggrepel functions to precisely control the placement of annotations on graphs.\nCreate publication-quality figures using styling functions from ggthemes and hrbrthemes packages.\nCombine multiple ggplot2 graphs into a composite figure using the patchwork package.\n\n\n\n\n\n\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\ngeom_label()geom_text()\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,size=0.5)+\n  geom_label(aes(label = ID),hjust=0.5,vjust=-0.5)+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme_classic()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,size=0.5)+\n  geom_text(aes(label = ID),hjust=0.5,vjust=-0.5)+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme_classic()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\ngeom_label_repel()geom_text_repel()\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_text_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\ntheme_gray()theme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores with theme_gray()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores with theme_bw()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores with theme_classic()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores with theme_dark()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores with theme_light()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores with theme_linedraw()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores with theme_minimal()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores with theme_void()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\nDefaultCustomized\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s common to need multiple graphs to effectively convey a visual story. Several ggplot2 extensions offer tools for combining multiple plots into a single figure.\nFirst, let us create three statistical graphics:\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\") +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\ntag_levels = ‘I’tag_levels = ‘A’tag_levels = ‘1’\n\n\n\n((p1/p2)|p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n((p1+p2)/p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\n\n\n\n\n((p1/p2)|p3) + \n  plot_annotation(tag_levels = '1')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, left = 0.02, bottom = 0.7, right = 0.5,top = 1)\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "Use ggrepel functions to precisely control the placement of annotations on graphs.\nCreate publication-quality figures using styling functions from ggthemes and hrbrthemes packages.\nCombine multiple ggplot2 graphs into a composite figure using the patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\ngeom_label()geom_text()\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,size=0.5)+\n  geom_label(aes(label = ID),hjust=0.5,vjust=-0.5)+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme_classic()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,size=0.5)+\n  geom_text(aes(label = ID),hjust=0.5,vjust=-0.5)+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme_classic()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\ngeom_label_repel()geom_text_repel()\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_text_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "ggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\ntheme_gray()theme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores with theme_gray()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores with theme_bw()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores with theme_classic()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores with theme_dark()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores with theme_light()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores with theme_linedraw()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores with theme_minimal()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"#A94442\", fill = \"#DBA39A\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores with theme_void()\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\nDefaultCustomized\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "It’s common to need multiple graphs to effectively convey a visual story. Several ggplot2 extensions offer tools for combining multiple plots into a single figure.\nFirst, let us create three statistical graphics:\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"#A94442\", \n                 fill=\"#DBA39A\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\") +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\ntag_levels = ‘I’tag_levels = ‘A’tag_levels = ‘1’\n\n\n\n((p1/p2)|p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n((p1+p2)/p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\n\n\n\n\n((p1/p2)|p3) + \n  plot_annotation(tag_levels = '1')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, left = 0.02, bottom = 0.7, right = 0.5,top = 1)\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands on Exercise 3b",
    "section": "",
    "text": "Animated graphics are often more engaging and impactful than static ones when presenting a visual data story. In this hands-on exercise, I will learn to:\n\nCreate animated data visualisations using the gganimate and plotly packages\nReshape data using the tidyr package\nProcess, wrangle, and transform data using the dplyr package\n\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, a frame shows data at a specific time or for a specific category. As the frame changes, the graph updates accordingly.\nAnimation Attributes: These are settings that control the animation’s behavior—such as frame duration, transition style (easing), and whether the animation starts fresh or continues from the current frame.\n\n\n\n\n\n\n\n\nIf we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment.\nHowever, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\nShow Code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nShow Code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear') +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this section, we will learn how to create an animated bubble plot by using ggplotly() method.\n\n\nShow Code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\nggplotly(gg)\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nShow Code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none') + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\nIn this sub-section, we will learn how to create an animated bubble plot by using plot_ly() method.\n\n\nShow Code\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "Hands on Exercise 3b",
    "section": "",
    "text": "Animated graphics are often more engaging and impactful than static ones when presenting a visual data story. In this hands-on exercise, I will learn to:\n\nCreate animated data visualisations using the gganimate and plotly packages\nReshape data using the tidyr package\nProcess, wrangle, and transform data using the dplyr package\n\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, a frame shows data at a specific time or for a specific category. As the frame changes, the graph updates accordingly.\nAnimation Attributes: These are settings that control the animation’s behavior—such as frame duration, transition style (easing), and whether the animation starts fresh or continues from the current frame.\n\n\n\n\n\n\n\n\nIf we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment.\nHowever, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Hands on Exercise 3b",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands on Exercise 3b",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\nShow Code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nShow Code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear') +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands on Exercise 3b",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this section, we will learn how to create an animated bubble plot by using ggplotly() method.\n\n\nShow Code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\nggplotly(gg)\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nShow Code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none') + \n  theme(plot.background = element_rect(fill = \"#FEFCF3\",color = NA))\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\nIn this sub-section, we will learn how to create an animated bubble plot by using plot_ly() method.\n\n\nShow Code\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "Hands on Exercise 3b",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "Hands on Exercise 4b",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\nhead(exam)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\n\nShow Code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefault information:\n\nStatistical details\nBayes Factor\nSample sizes\nDistribution summary\n\n\n\n\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nShow Code\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefault information:\n\nStatistical details\nBayes Factor\nSample sizes\nDistribution summary\n\n\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\n\nShow Code\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPairwise.display\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\nTestConfidence IntervalSummary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nShow Code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\n\nShow Code\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "title": "Hands on Exercise 4b",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands on Exercise 4b",
    "section": "",
    "text": "ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "title": "Hands on Exercise 4b",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\nhead(exam)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\n\nShow Code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefault information:\n\nStatistical details\nBayes Factor\nSample sizes\nDistribution summary\n\n\n\n\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nShow Code\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefault information:\n\nStatistical details\nBayes Factor\nSample sizes\nDistribution summary\n\n\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\n\nShow Code\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPairwise.display\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\nTestConfidence IntervalSummary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nShow Code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\n\nShow Code\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "title": "Hands on Exercise 4d",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26\n\n\n\n\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\n\nShow Code\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\n\n\n\nShow Code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05)   \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions).\nxrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\n\n\n\n\n\nShow Code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\n\n\n\nIn this section, we will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nShow Code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nShow Code\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#overview",
    "title": "Hands on Exercise 4d",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "title": "Hands on Exercise 4d",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#importing-data",
    "title": "Hands on Exercise 4d",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnelplotr-methods",
    "title": "Hands on Exercise 4d",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\n\nShow Code\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\n\n\n\nShow Code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05)   \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions).\nxrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\n\n\n\n\n\nShow Code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands on Exercise 4d",
    "section": "",
    "text": "In this section, we will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nShow Code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nShow Code\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#references",
    "title": "Hands on Exercise 4d",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise, we will be able to create the following data visualizations using R packages:\n\nCalendar heatmap using ggplot2 functions\nCycle plot using ggplot2 functions\nSlopegraph\nHorizon chart\n\n\n\n\nWe will first load the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, and tidyverse.\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n\n\n\n\n\nBy the end of this section, we will be able to:\n\nCreate a calendar heatmap using ggplot2 and its extensions\nWrite custom functions in R\nExtract and manipulate date- and time-related fields using base R and the lubridate package\nCarry out data preparation tasks using the tidyr and dplyr packages\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nThe kable() function can be used to display and review the structure of an imported data frame in a clean, readable table format.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1 : Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived.\n\nhr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\n\nymd_hms() and hour() are from lubridate package, and weekdays() is a base R function.\n\n\n\n\nStep 2 : Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nattacks\n\n# A tibble: 199,999 × 4\n   tz           source_country wkday    hour \n   &lt;chr&gt;        &lt;chr&gt;          &lt;fct&gt;    &lt;fct&gt;\n 1 Africa/Cairo BG             Saturday 20   \n 2 Africa/Cairo TW             Sunday   6    \n 3 Africa/Cairo TW             Sunday   8    \n 4 Africa/Cairo CN             Sunday   11   \n 5 Africa/Cairo US             Sunday   15   \n 6 Africa/Cairo CA             Monday   11   \n 7 Africa/Cairo GB             Monday   15   \n 8 Africa/Cairo CN             Monday   16   \n 9 Africa/Cairo CN             Monday   17   \n10 Africa/Cairo CN             Thursday 21   \n# ℹ 199,989 more rows\n\n\n\n\n\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte() + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\n\nBuilding multiple heatmaps for the top four countries with the highest number of attacks.\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, we are required to do the followings:\n\nCount the number of attacks by country\nCalculate the percent of attackes by country\nSave the results in a tibble data frame\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the Tidy Data Frame\nIn this step, we will extract the attack records of the top 4 countries from the attacks data frame and store them in a new tibble called top4_attacks.\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"mono\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nIn this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "title": "Hands on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise, we will be able to create the following data visualizations using R packages:\n\nCalendar heatmap using ggplot2 functions\nCycle plot using ggplot2 functions\nSlopegraph\nHorizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands on Exercise 6",
    "section": "",
    "text": "We will first load the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, and tidyverse.\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands on Exercise 6",
    "section": "",
    "text": "By the end of this section, we will be able to:\n\nCreate a calendar heatmap using ggplot2 and its extensions\nWrite custom functions in R\nExtract and manipulate date- and time-related fields using base R and the lubridate package\nCarry out data preparation tasks using the tidyr and dplyr packages\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nThe kable() function can be used to display and review the structure of an imported data frame in a clean, readable table format.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1 : Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived.\n\nhr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\n\nymd_hms() and hour() are from lubridate package, and weekdays() is a base R function.\n\n\n\n\nStep 2 : Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nattacks\n\n# A tibble: 199,999 × 4\n   tz           source_country wkday    hour \n   &lt;chr&gt;        &lt;chr&gt;          &lt;fct&gt;    &lt;fct&gt;\n 1 Africa/Cairo BG             Saturday 20   \n 2 Africa/Cairo TW             Sunday   6    \n 3 Africa/Cairo TW             Sunday   8    \n 4 Africa/Cairo CN             Sunday   11   \n 5 Africa/Cairo US             Sunday   15   \n 6 Africa/Cairo CA             Monday   11   \n 7 Africa/Cairo GB             Monday   15   \n 8 Africa/Cairo CN             Monday   16   \n 9 Africa/Cairo CN             Monday   17   \n10 Africa/Cairo CN             Thursday 21   \n# ℹ 199,989 more rows\n\n\n\n\n\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte() + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\n\nBuilding multiple heatmaps for the top four countries with the highest number of attacks.\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, we are required to do the followings:\n\nCount the number of attacks by country\nCalculate the percent of attackes by country\nSave the results in a tibble data frame\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the Tidy Data Frame\nIn this step, we will extract the attack records of the top 4 countries from the attacks data frame and store them in a new tibble called top4_attacks.\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"mono\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands on Exercise 6",
    "section": "",
    "text": "In this section, we will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nIn this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands on Exercise 6",
    "section": "11.1 Plotting Slopegraph",
    "text": "11.1 Plotting Slopegraph\nIn this section, we will learn how to create a slopegraph using R.\nTo learn more about how to use the newggslopegraph() function, refer to the official vignette.\n\n11.1.1 Step 1 : Data Import\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n11.1.2 Step 2 : Plotting the Slopegraph\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Evangeline Olivia\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html",
    "title": "Hands on Exercise 8a",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\evangelineolivia\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\n\nBefore a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\n\n\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n\n\ntm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\nUsing what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nPrettyQuantileKmeansFisherFisher\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"pretty\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"kmeans\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"fisher\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"sd\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nMap 1 uses broader, simpler bins; Maps 2–5 use finer or irregular decimal ranges.\nOnly Map 5 includes negative dependency values.\nMap 2–5 use more nuanced gradients to show subtle differences in dependency.\n\n\n\nPrepare choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20)\n\n261020\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 2)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 6)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 10)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 20)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nMore classes = more detail, but also more complexity.\nIn my opinion we need to choose class based on our audience :\n\nUse 2–6 classes for public or summary reports.\nUse 10–20 classes for technical deep dives or hotspot detection.\n\n\n\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.height = 0.2,         \n          legend.format = list(digits = 2, format = \"f\"),\n          legend.hist.title = \"\") + \n  tm_layout(\n    legend.outside = TRUE,\n    legend.outside.position = \"right\",\n    legend.text.size = 0.6,              \n    legend.title.size = 0.8,\n    legend.width = 1.5,                  \n    frame = FALSE\n  ) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#overview",
    "title": "Hands on Exercise 8a",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we will learn how to plot functional and truthful choropleth maps by using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#getting-started",
    "title": "Hands on Exercise 8a",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-data-into-r",
    "title": "Hands on Exercise 8a",
    "section": "",
    "text": "Two data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\evangelineolivia\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-preparation",
    "title": "Hands on Exercise 8a",
    "section": "",
    "text": "Before a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\n\n\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands on Exercise 8a",
    "section": "",
    "text": "Two approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n\n\ntm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\nUsing what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nPrettyQuantileKmeansFisherFisher\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"pretty\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"kmeans\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"fisher\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"sd\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nMap 1 uses broader, simpler bins; Maps 2–5 use finer or irregular decimal ranges.\nOnly Map 5 includes negative dependency values.\nMap 2–5 use more nuanced gradients to show subtle differences in dependency.\n\n\n\nPrepare choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20)\n\n261020\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 2)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 6)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 10)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 20)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nMore classes = more detail, but also more complexity.\nIn my opinion we need to choose class based on our audience :\n\nUse 2–6 classes for public or summary reports.\nUse 10–20 classes for technical deep dives or hotspot detection.\n\n\n\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.height = 0.2,         \n          legend.format = list(digits = 2, format = \"f\"),\n          legend.hist.title = \"\") + \n  tm_layout(\n    legend.outside = TRUE,\n    legend.outside.position = \"right\",\n    legend.text.size = 0.6,              \n    legend.title.size = 0.8,\n    legend.width = 1.5,                  \n    frame = FALSE\n  ) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#reference",
    "title": "Hands on Exercise 8a",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap\n\n\n\n\n\n\n\n\npacman::p_load(tmap, tidyverse, sf)\n\n\n\n\n\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n\n\n\nPlot a choropleth map showing the distribution of non-function water point by LGA\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_polygons(fill = \"wp_functional\",\n             fill.scale = tm_scale_intervals(\n               style = \"equal\",\n               n = 10,\n               values = \"brewer.blues\"),\n             fill.legend = tm_legend(\n               position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\")\n\np2 &lt;- tm_shape(NGA_wp) + \n  tm_polygons(fill = \"total_wp\", \n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1, \n             fill_alpha = 1) + \n  tm_title(\"Distribution of total  water point by LGAs\")\n\ntmap_arrange(p2, p1, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\n\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n\nPlot a choropleth map showing the distribution of percentage functional water point by LGA\n\ntm_shape(NGA_wp) +\n  tm_polygons(\"pct_functional\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) + \n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Rate map of functional water point by LGAs\")\n\n\n\n\n\n\n\n\n\n\n\n\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n\n\n\n\nWriting a function has three big advantages over using copy-and-paste:\n\nWe can give a function an evocative name that makes your code easier to understand.\nAs requirements change, we only need to update code in one place, instead of many.\nWe eliminate the chance of making incidental mistakes when we copy and paste (i.e. updating a variable name in one place, but not in another).\n\n\n\n\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nNext, we will write a percentile mapping function by using the code chunk below.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_polygons(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\nTo run the function, type the code chunk as shown below.\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n\n\n\n\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nLet’s test the newly created function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#overview",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#getting-started",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "pacman::p_load(tmap, tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#importing-data",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "For the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#basic-choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#basic-choropleth-mapping",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "Plot a choropleth map showing the distribution of non-function water point by LGA\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_polygons(fill = \"wp_functional\",\n             fill.scale = tm_scale_intervals(\n               style = \"equal\",\n               n = 10,\n               values = \"brewer.blues\"),\n             fill.legend = tm_legend(\n               position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\")\n\np2 &lt;- tm_shape(NGA_wp) + \n  tm_polygons(fill = \"total_wp\", \n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1, \n             fill_alpha = 1) + \n  tm_title(\"Distribution of total  water point by LGAs\")\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#inspect-structure",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#inspect-structure",
    "title": "In Class Exercise 3",
    "section": "2.1 Inspect Structure",
    "text": "2.1 Inspect Structure\n\nstr(kg,max.level=1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#extract-and-inspect",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#extract-and-inspect",
    "title": "In Class Exercise 3",
    "section": "2.2 Extract and Inspect",
    "text": "2.2 Extract and Inspect\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#initial-eda",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#initial-eda",
    "title": "In Class Exercise 3",
    "section": "2.3 Initial EDA",
    "text": "2.3 Initial EDA\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n       geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n       geom_bar()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-1-mapping-from-node-id-to-row-index",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-1-mapping-from-node-id-to-row-index",
    "title": "In Class Exercise 3",
    "section": "3.1 Step 1 : Mapping from Node ID to Row Index",
    "text": "3.1 Step 1 : Mapping from Node ID to Row Index\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)\n                  )\n                 )\n\nThis ensures each id from your node list is mapped to the correct row number"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-2-map-source-and-target-ids-to-row-indicises",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#step-2-map-source-and-target-ids-to-row-indicises",
    "title": "In Class Exercise 3",
    "section": "3.2 Step 2 : Map Source and Target IDs to row indicises",
    "text": "3.2 Step 2 : Map Source and Target IDs to row indicises\n\nedges_tbl &lt;- edges_tbl %&gt;% \n  left_join(id_map, by = c(\"source\" = \"id\"))%&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\"))%&gt;%\n  rename(to = index)\n\n\n3.2.1 Step 3 : Filter out any unmatched (invalid) edges\n\nedges_tbl&lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n3.2.2 Step 4 : Creating the Graph\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#visualising-the-knowledge-graph",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#visualising-the-knowledge-graph",
    "title": "In Class Exercise 3",
    "section": "3.3 Visualising the knowledge graph",
    "text": "3.3 Visualising the knowledge graph\n\nset.seed(1234)\n\n\n3.3.1 Visualising the Whole Graph\n\nggraph(graph,layout = \"fr\")+\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n3.3.2 Visualising The Sub Graph\n\n3.3.2.1 Step 1 : Filter Edges to only “MemberOf”\n\ngraph_memberof &lt;- graph %&gt;% \n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n3.3.2.2 Step 2 : Extract only connected nodes (i.e., used in these edges)\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;% \n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n3.3.3 Step 3 : Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;% \n  mutate(row_id = row_number()) %&gt;% \n  filter(row_id %in% used_node_indices) %&gt;% \n  select(-row_id)\n\n\n\n3.3.4 Plot the sub-graph\n\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 color = \"gray\")+\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\nWarning: ggrepel: 789 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, I am tasked to prepare at most three data visualisation for the article.\n\n\n\nThe dataset titled “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, published by the Department of Statistics Singapore (DOS), provides detailed demographic data of Singapore’s resident population. It breaks down the population by age, gender, and geographic location, including planning areas and subzones defined by the Urban Redevelopment Authority (URA)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#setting-the-scene",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#setting-the-scene",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-task",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, I am tasked to prepare at most three data visualisation for the article."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-data",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "The dataset titled “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, published by the Department of Statistics Singapore (DOS), provides detailed demographic data of Singapore’s resident population. It breaks down the population by age, gender, and geographic location, including planning areas and subzones defined by the Urban Redevelopment Authority (URA)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#singapore-population-pyramid-2024",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#singapore-population-pyramid-2024",
    "title": "Take Home Exercise 1",
    "section": "Singapore Population Pyramid (2024)",
    "text": "Singapore Population Pyramid (2024)\n\n\nShow Code\npyramid_data &lt;- data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\")\n\npopulation_pyramid_women &lt;- ggplot(\n  filter(pyramid_data, Sex == \"Females\"),\n  aes(\n    x = Pop,\n    y = AgeGroup,\n    tooltip = paste(\"Population:\", comma(Pop)),\n    data_id = AgeGroup\n  )\n) +\n  geom_col_interactive(fill = \"#F7d0de\") +\n  scale_x_reverse() +\n  theme_void() +\n  annotate(\n    geom = \"label\",\n    x = 150000,\n    y = \"90 & Over\",\n    label = \"Females\",\n    fill = \"#F7d0de\",\n    color = \"white\",\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  theme(\n    axis.text.x = element_text(),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\npopulation_pyramid_men &lt;- ggplot(\n  filter(pyramid_data, Sex == \"Males\"),\n  aes(\n    x = Pop,\n    y = AgeGroup,\n    tooltip = paste(\"Population:\", comma(Pop)),\n    data_id = AgeGroup\n  )\n) +\n  geom_col_interactive(fill = \"#b2d0eb\") +\n  theme_void() +\n  annotate(\n    geom = \"label\",\n    x = 140000,\n    y = \"90 & Over\",\n    label = \"Males\",\n    fill = \"#b2d0eb\",\n    color = \"white\",\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  theme(\n    axis.text.x = element_text(),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\nage_labels &lt;- tibble(age = fct_inorder(c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\", \"30-34\",\n  \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\",\n  \"65-69\", \"70-74\", \"75-79\", \"80-84\", \"85-89\", \"90 & Over\"\n)))\n\nage_labels_plot &lt;- ggplot(age_labels, aes(x = 1, y = age, label = age)) +\n  geom_text_interactive(aes(tooltip = age, data_id = age)) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\ngirafe(\n  ggobj = population_pyramid_women + age_labels_plot + population_pyramid_men +\n    plot_layout(widths = c(7.5, 2, 7.5)) +\n    plot_annotation(\n      theme = theme(\n        plot.background = element_rect(fill = \"#FEFCF3\", color = NA),\n        panel.border = element_blank()\n      )\n    ),\n  options = list(\n  opts_hover(css = \"stroke:none;\"),\n  opts_hover_inv(css = \"opacity:0.2;\"),\n  opts_tooltip(\n    css = \"background-color:#fef3c7;\n           color:#A94442;\n           padding:6px;\n           border-radius:6px;\n           font-weight:bold;\n           box-shadow: 0px 2px 5px rgba(0,0,0,0.2);\"\n  )\n)\n)\n\n\n\n\n\n\n\nThe total population for female : 2,041,480  The total population for male : 2,152,050\n\n\n\n\n\n\n\nInsights\n\n\n\nThe Singapore’s 2024 population pyramid reveals a balanced distribution between males and females, with 2,152,050 males and 2,041,480 females.\nThe largest population groups are concentrated in the 25–54 age range, which suggest to a strong and stable working-age demographic.\nIn contrast, the younger age groups make up a smaller share."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#singapore-total-population-by-planning-area-2024",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#singapore-total-population-by-planning-area-2024",
    "title": "Take Home Exercise 1",
    "section": "Singapore Total Population by Planning Area (2024)",
    "text": "Singapore Total Population by Planning Area (2024)\n\n\nShow Code\npa_population &lt;- data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(TotalPop = sum(Pop, na.rm = TRUE)) %&gt;%\n  arrange(desc(TotalPop))\n\ninteractive_plot &lt;- ggplot(\n  pa_population,\n  aes(\n    x = reorder(PA, TotalPop),\n    y = TotalPop,\n    fill = TotalPop,\n    tooltip = paste(\"Planning Area:\", PA, \"\\nPopulation:\", comma(TotalPop)),\n    data_id = PA\n  )\n) +\n  geom_col_interactive(\n    aes(),\n    css = \"cursor:pointer;\",\n    hover_css = \"opacity:1;stroke:black;stroke-width:1;\",\n    hover_inv_css = \"opacity:0.3;\") +\n  scale_fill_gradient(high = \"#c2185b\", low = \"#f8bbd0\", labels = comma) +\n  scale_y_continuous(labels = comma) +\n  coord_flip() +\n  labs(\n    title = \"Total Population by Planning Area (2024)\",\n    x = \"Planning Area\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = element_rect(fill = \"#FEFCF3\", color = NA),\n    plot.title = element_text(hjust = 0.5)\n  )\n\n\ngirafe(\n  ggobj = interactive_plot,\n  options = list(\n    opts_hover(css = \"fill:#DBA39A;\"),\n    opts_hover_inv(css = \"opacity:0.3;\"),\n    opts_tooltip(\n      css = \"background-color:#fef3c7;\n             color:#A94442;\n             padding:8px;\n             border-radius:8px;\n             font-weight:bold;\n             box-shadow: 0px 2px 5px rgba(0,0,0,0.2);\n             opacity:0.3;\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nBased on Singapore’s 2024 population data, Tampines, Bedok, and Sengkang emerge as the top three most populous planning areas. Together with Jurong West and Woodlands, these regions comprise a substantial portion of the national population. In contrast, central areas such as Downtown Core and Museum have significantly smaller populations, reflecting their primary use as commercial or institutional zones rather than residential neighborhoods."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#age-distribution-in-the-top-5-planning-areas-2024",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#age-distribution-in-the-top-5-planning-areas-2024",
    "title": "Take Home Exercise 1",
    "section": "Age Distribution in the Top 5 Planning Areas (2024)",
    "text": "Age Distribution in the Top 5 Planning Areas (2024)\n\nTampinesBedokSengkangJurong WestWoodlands\n\n\n\n\nShow Code\ntop5_pa &lt;- data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(TotalPop = sum(Pop, na.rm = TRUE)) %&gt;%\n  slice_max(order_by = TotalPop, n = 5) %&gt;%\n  pull(PA)\n\n\ntop5_data &lt;- data %&gt;%\n  filter(PA %in% top5_pa) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\")\n\ntop5_data$AgeGroup &lt;- factor(top5_data$AgeGroup, levels = c(\n  \"0 – 4\", \"5 – 9\", \"10 – 14\", \"15 – 19\", \"20 – 24\",\n  \"25 – 29\", \"30 – 34\", \"35 – 39\", \"40 – 44\", \"45 – 49\",\n  \"50 – 54\", \"55 – 59\", \"60 – 64\", \"65 – 69\", \"70 – 74\",\n  \"75 – 79\", \"80 – 84\", \"85 – 89\", \"90 & Over\"\n))\n\ninteractive_plot &lt;- ggplot(\n  filter(top5_data, PA == top5_pa[1]),\n  aes(\n    x = AgeGroup,\n    y = Pop,\n    fill = Pop,\n    tooltip = paste(\"Age Group: \", AgeGroup, \"\\nPopulation: \", comma(Pop)),\n    data_id = AgeGroup\n  )\n) +\n  geom_col_interactive(\n    aes(),\n    css = \"cursor:pointer;\",\n    hover_css = \"opacity:1;stroke:black;stroke-width:1;\",\n    hover_inv_css = \"opacity:0.3;\"\n  ) +\n  scale_fill_gradient(high = \"#1565c0\", low = \"#bbdefb\") +\n  labs(\n    x = \"Age Group\",\n    y = \"Population\",\n    fill = \"Population\",\n    title = paste(\"Age Distribution in\", top5_pa[1], \"(2024)\")\n  ) +\n  theme_minimal() +\n  scale_x_discrete(\n    labels = function(x) gsub(\" – \", \"-\", str_wrap(x, width = 10))\n  ) +\n  theme(\n  axis.text.x = element_text(angle = 45, hjust = 1),\n  plot.title = element_text(hjust = 0.5),\n  plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\ngirafe(\n  ggobj = interactive_plot,\n  options = list(\n    opts_hover(css = \"fill:#DBA39A;\"),\n    opts_hover_inv(css = \"opacity:0.3;\"),\n    opts_tooltip(\n      css = \"background-color:#fef3c7;\n             color:#A94442;\n             padding:8px;\n             border-radius:8px;\n             font-weight:bold;\n             box-shadow: 0px 2px 5px rgba(0,0,0,0.2);\n             opacity:0.3;\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nSingapore’s 2024 demographic data highlights a significant concentration of Tampines residents in the 30-34 age range. This pattern suggests that Tampines is a hub for individuals in career-building phases of life. Despite this concentration, the population remains fairly balanced across other age groups, indicating a well-rounded and sustainable community structure.\n\n\n\n\n\n\nShow Code\ninteractive_plot &lt;- ggplot(\n  filter(top5_data, PA == top5_pa[2]),\n  aes(\n    x = AgeGroup,\n    y = Pop,\n    fill = Pop,\n    tooltip = paste(\"Age Group: \", AgeGroup, \"\\nPopulation: \", comma(Pop)),\n    data_id = AgeGroup\n  )\n) +\n  geom_col_interactive(\n    css = \"cursor:pointer;\",\n    hover_css = \"opacity:1;stroke:black;stroke-width:1.5;\",\n    hover_inv_css = \"opacity:0.3;\"\n  ) +\n  scale_fill_gradient(high = \"#2e7d32\", low = \"#c8e6c9\") +\n  labs(\n    x = \"Age Group\",\n    y = \"Population\",\n    fill = \"Population\",\n    title = paste(\"Age Distribution in\", top5_pa[2], \"(2024)\")\n  ) +\n  theme_minimal() +\n  scale_x_discrete(\n    labels = function(x) gsub(\" – \", \"-\", str_wrap(x, width = 10))\n  ) +\n  theme(\n  axis.text.x = element_text(angle = 45, hjust = 1),\n  plot.title = element_text(hjust = 0.5),\n  plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\ngirafe(\n  ggobj = interactive_plot,\n  options = list(\n    opts_hover(css = \"fill:#DBA39A;\"),\n    opts_hover_inv(css = \"opacity:0.3;\"),\n    opts_tooltip(\n      css = \"background-color:#fef3c7;\n             color:#A94442;\n             padding:8px;\n             border-radius:8px;\n             font-weight:bold;\n             box-shadow: 0px 2px 5px rgba(0,0,0,0.2);\n             opacity:0.3;\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nBedok exhibits a population structure heavily represented by residents aged 60-64. This mature demographic suggests Bedok is home more for aging residents. Compared to younger age groups, the higher population in older brackets may indicate that Bedok is a more settled community.\n\n\n\n\n\n\nShow Code\ninteractive_plot &lt;- ggplot(\n  filter(top5_data, PA == top5_pa[3]),\n  aes(\n    x = AgeGroup,\n    y = Pop,\n    fill = Pop,\n    tooltip = paste(\"Age Group:\", AgeGroup, \"\\nPopulation:\", Pop),\n    data_id = AgeGroup\n  )\n) +\n  geom_col_interactive(\n    css = \"cursor:pointer;\",\n    hover_css = \"stroke:black;stroke-width:1;\",\n    hover_inv_css = \"opacity:0.3;\"\n  ) +\n  scale_fill_gradient(high = \"#ef6c00\", low = \"#ffe0b2\") +\n  labs(\n    x = \"Age Group\",\n    y = \"Population\",\n    fill = \"Population\",\n    title = paste(\"Age Distribution in\", top5_pa[3], \"(2024)\")\n  ) +\n  theme_minimal() +\n  scale_x_discrete(labels = function(x) gsub(\" – \", \"-\", str_wrap(x, width = 10))) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\ngirafe(\n  ggobj = interactive_plot,\n  options = list(\n    opts_hover(css = \"fill:#DBA39A;\"),\n    opts_hover_inv(css = \"opacity:0.3;\"),\n    opts_tooltip(\n      css = \"background-color:#fff3e0;\n             color:#333;\n             padding:8px;\n             border-radius:8px;\n             font-weight:bold;\n             box-shadow:0 2px 5px rgba(0,0,0,0.15);\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nSengkang’s population is heavily concentrated in the 35–49 age group, reflecting a younger family demographic. The notable presence of children and newborns aged 0–14 further suggests that Sengkang is a preferred residential area for young families.\n\n\n\n\n\n\nShow Code\ninteractive_plot &lt;- ggplot(\n  filter(top5_data, PA == top5_pa[4]),\n  aes(\n    x = AgeGroup,\n    y = Pop,\n    fill = Pop,\n    tooltip = paste(\"Age Group:\", AgeGroup, \"\\nPopulation:\", Pop),\n    data_id = AgeGroup\n  )\n) +\n  geom_col_interactive(\n    css = \"cursor:pointer;\",\n    hover_css = \"stroke:black;stroke-width:1;\",\n    hover_inv_css = \"opacity:0.3;\"\n  ) +\n  scale_fill_gradient(high = \"#6a1b9a\", low = \"#e1bee7\") +\n  labs(\n    x = \"Age Group\",\n    y = \"Population\",\n    fill = \"Population\",\n    title = paste(\"Age Distribution in\", top5_pa[4], \"(2024)\")\n  ) +\n  theme_minimal() +\n  scale_x_discrete(labels = function(x) gsub(\" – \", \"-\", str_wrap(x, width = 10))) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\ngirafe(\n  ggobj = interactive_plot,\n  options = list(\n    opts_hover(css = \"fill:#DBA39A;\"),\n    opts_hover_inv(css = \"opacity:0.3;\"),\n    opts_tooltip(\n      css = \"background-color:#f3e5f5;\n             color:#333;\n             padding:8px;\n             border-radius:8px;\n             font-weight:bold;\n             box-shadow:0 2px 5px rgba(0,0,0,0.15);\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nJurong West presents a more balanced age distribution, with the largest population concentrated in the 35–59 age group.This suggests the area is home to many established families and individuals nearing retirement age. The balanced spread across other age groups also reflects a stable residential base, demonstrating Jurong West’s role as a settled community in Singapore.\n\n\n\n\n\n\nShow Code\ninteractive_plot &lt;- ggplot(\n  filter(top5_data, PA == top5_pa[5]),\n  aes(\n    x = AgeGroup,\n    y = Pop,\n    fill = Pop,\n    tooltip = paste(\"Age Group:\", AgeGroup, \"\\nPopulation:\", Pop),\n    data_id = AgeGroup\n  )\n) +\n  geom_col_interactive(\n    css = \"cursor:pointer;\",\n    hover_css = \"stroke:black;stroke-width:1;\",\n    hover_inv_css = \"opacity:0.3;\"\n  ) +\n  scale_fill_gradient(high = \"#00695c\", low = \"#b2dfdb\") +\n  labs(\n    x = \"Age Group\",\n    y = \"Population\",\n    fill = \"Population\",\n    title = paste(\"Age Distribution in\", top5_pa[5], \"(2024)\")\n  ) +\n  theme_minimal() +\n  scale_x_discrete(labels = function(x) gsub(\" – \", \"-\", str_wrap(x, width = 10))) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    plot.background = element_rect(fill = \"#FEFCF3\", color = NA)\n  )\n\ngirafe(\n  ggobj = interactive_plot,\n  options = list(\n    opts_hover(css = \"fill:#DBA39A;\"),\n    opts_hover_inv(css = \"opacity:0.3;\"),\n    opts_tooltip(\n      css = \"background-color:#e0f2f1;\n             color:#004d40;\n             padding:8px;\n             border-radius:8px;\n             font-weight:bold;\n             box-shadow: 0px 2px 5px rgba(0,0,0,0.2);\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nWoodlands displays a diverse age distribution, with notable peaks in both younger and older working-age groups. The 25–29 and 55–59 age brackets hold the highest concentrations, indicating a mix of young adults entering the workforce and seasoned professionals nearing retirement."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "For this take-home exercise, we will be working on Mini-Challenge 1 from the VAST Challenge 2025. The objective of this exercise is to design visual analytics methods to track the emergence of a rising artist and forecast the next potential breakout star.\nWe will address the questions from the mini-challenge specifically Question 3:\n\n\n\nWho has Sailor Shift been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators within the broader Oceanus Folk community?\n\n\n\n\n\nWas this influence intermittent or did it show a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the conveerse, how has Oceantus Folk changed the rise of Sailor Shift? From which genre does it draw most of its contemporary inspiration?\n\n\n\n\n\nVisualize the careers of 3 Artist\nCompare and Contrast their rise in Popularity and Influence\nUsing this characterization, gives 3 Predictions of the next Oceanus Folk stars with be over the next 5 Years"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-profile-of-sailor-shifts-career",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-profile-of-sailor-shifts-career",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Who has Sailor Shift been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators within the broader Oceanus Folk community?"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-influence-of-oceantus-folk-to-the-music-world",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-influence-of-oceantus-folk-to-the-music-world",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Was this influence intermittent or did it show a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the conveerse, how has Oceantus Folk changed the rise of Sailor Shift? From which genre does it draw most of its contemporary inspiration?"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#profile-of-what-it-means-to-be-a-rising-star-in-the-music-industry",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#profile-of-what-it-means-to-be-a-rising-star-in-the-music-industry",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Visualize the careers of 3 Artist\nCompare and Contrast their rise in Popularity and Influence\nUsing this characterization, gives 3 Predictions of the next Oceanus Folk stars with be over the next 5 Years"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-packages",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-packages",
    "title": "Take Home Exercise 2",
    "section": "3.1 Loading Packages",
    "text": "3.1 Loading Packages\n\nPackagesPackages Information\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork, kableExtra, showtext)\n\n\n\n\n\n\n\n\n\n\nLibrary\nDescription\n\n\n\n\npacman\nA package management tool that simplifies the process of installing, loading, and managing R packages with a single function. Ideal for scripts requiring multiple libraries.\n\n\ntidyverse\nA cohesive collection of R packages for data science, including ggplot2, dplyr, tidyr, readr, and more—providing consistent grammar for data wrangling and visualization.\n\n\njsonlite\nA fast and flexible JSON parser/serializer, useful for importing and exporting structured data such as API responses or configuration files.\n\n\ntidygraph\nA tidyverse-friendly package for network data manipulation and analysis, built on top of igraph. Enables graph operations using dplyr-like syntax.\n\n\nggraph\nAn extension of ggplot2 for visualizing graph/network data using layered grammar of graphics principles. Works seamlessly with tidygraph.\n\n\nigraph\nA powerful low-level package for network analysis and visualization, supporting complex graph structures, centrality metrics, and community detection.\n\n\nplotly\nEnables creation of interactive plots from ggplot2 or native plotly syntax. Useful for dashboards, exploratory data analysis, and web-based visualizations.\n\n\nvisNetwork\nCreates rich, interactive network visualizations using vis.js. Highly customizable and ideal for interactive dashboards and exploratory analysis.\n\n\nggtext\nEnhances ggplot2 by allowing Markdown/HTML formatting in axis labels, legends, titles, and more—perfect for expressive visual storytelling.\n\n\nggiraph\nAdds interactivity (tooltips, hover effects, hyperlinks) to ggplot2 graphics. Useful for embedding interactive plots in Shiny apps or HTML reports.\n\n\npatchwork\nSimplifies the combination of multiple ggplot2 plots into a single layout using intuitive arithmetic-like syntax. Great for dashboards or multi-panel displays.\n\n\nkableExtra\nExtends knitr::kable() to create professional-looking tables in HTML, LaTeX, or Word with styling, column grouping, footnotes, and more.\n\n\nshowtext\nMakes it easy to use custom fonts in R plots, including Chinese, Japanese, and Korean fonts—ideal for multilingual data visualization."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-data",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-data",
    "title": "Take Home Exercise 2",
    "section": "3.2 Loading Data",
    "text": "3.2 Loading Data\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\nglimpse(data)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame': 37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ..."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#custom-style",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#custom-style",
    "title": "Take Home Exercise 2",
    "section": "3.3 Custom Style",
    "text": "3.3 Custom Style\n\nColorsTheme\n\n\n\ncl &lt;- list(\n  bg = \"#FEFCF3\",\n  t_shirt = \"#7B3F00\",\n  sweater = \"#D7A18F\",\n  jeans = \"#D9C6B0\",\n  title = \"#2F3A3F\",\n  background = \"#F8F1E5\",\n  text = \"#B1A293\",\n  \n  #Nodes\n  Person = \"#D5D1E9\",       \n  MusicalGroup = \"#D0E4EE\",  \n  RecordLabel = \"#F3F5A9\",   \n  Song = \"#F5CF9F\",          \n  Album = \"#F28B82\",\n  \n  #Edges\n  PerformerOf         = \"#e6194b\",  \n  ComposerOf          = \"#f58231\",  \n  ProducerOf          = \"#ffe119\",  \n  LyricistOf          = \"#3cb44b\",  \n  RecordedBy          = \"#42d4f4\",  \n  DistributedBy       = \"#4363d8\",  \n  InStyleOf           = \"#911eb4\",  \n  InterpolatesFrom    = \"#f032e6\",  \n  CoverOf             = \"#fabebe\",  \n  LyricalReferenceTo  = \"#ffd8b1\",  \n  DirectlySamples     = \"#fffac8\", \n  MemberOf            = \"#4A7365\"   \n)\n\n\n\n\nfont_add_google(\"Montserrat\", \"montserrat\")\nshowtext_auto()\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = cl$bg,color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = cl$text,\n  panel = element_rect(fill = cl$bg, color = NA),\n  grid = element_line(color = \"#E6DCD0\"),\n  \n  #Text \n  caption = \"Hover on the nodes to see more details.\",\n  \n  #Node\n  node_size = 7.5,\n  arrow_margin = 3.2,\n  arrow_style = arrow(type = \"closed\", length = unit(2, \"pt\")),\n  base_edge_thickness = 0.2,\n  \n  tooltip = \"background-color: #E6DCD0;\n  color: #2F3A3F;\n  border: 1px solid #e0d7ec;\n  border-radius: 6px;\n  padding: 6px;\n  font-size: 12px;\n  box-shadow: 1px 1px 4px rgba(0,0,0,0.1);\n  \"\n)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#extracting",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#extracting",
    "title": "Take Home Exercise 2",
    "section": "4.1 Extracting",
    "text": "4.1 Extracting\n\nEdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\n# A tibble: 12 × 2\n   Edge_Type          Description                                               \n   &lt;chr&gt;              &lt;chr&gt;                                                     \n 1 PerformerOf        Source (Person or Group) performed the destination (Song …\n 2 ComposerOf         Source (Person) composed the destination (Song or Album)  \n 3 ProducerOf         Source (Person or Label) produced the destination's work …\n 4 LyricistOf         Source (Person) wrote lyrics for the destination (Song or…\n 5 RecordedBy         Destination (Label) recorded the source (Song or Album)   \n 6 DistributedBy      Destination (Label) distributed the source (Song or Album)\n 7 InStyleOf          Source (Song/Album) is in the style of the destination (S…\n 8 InterpolatesFrom   Source (Song/Album) interpolates melody from the destinat…\n 9 CoverOf            Source (Song/Album) is a cover of the destination (Song o…\n10 LyricalReferenceTo Source (Song/Album) makes lyrical reference to the destin…\n11 DirectlySamples    Source (Song/Album) directly samples audio from the desti…\n12 MemberOf           Source (Person) is a member of the destination (MusicalGr…\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\""
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-missing-values",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-missing-values",
    "title": "Take Home Exercise 2",
    "section": "4.2 Check Missing Values",
    "text": "4.2 Check Missing Values\n\nEdgesNodes\n\n\n\ncolSums(is.na(edges))\n\nrelation   source   target      key \n       0        0        0        0 \n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-for-duplicates",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#check-for-duplicates",
    "title": "Take Home Exercise 2",
    "section": "4.3 Check for Duplicates",
    "text": "4.3 Check for Duplicates\n\nEdgesNodes\n\n\n\nedges[duplicated(edges),]\n\n# A tibble: 0 × 4\n# ℹ 4 variables: relation &lt;chr&gt;, source &lt;int&gt;, target &lt;int&gt;, key &lt;int&gt;\n\n\n\n\n\nnodes[duplicated(nodes),]\n\n# A tibble: 0 × 10\n# ℹ 10 variables: type &lt;chr&gt;, name &lt;chr&gt;, single &lt;lgl&gt;, release_date &lt;chr&gt;,\n#   genre &lt;chr&gt;, notable &lt;lgl&gt;, id &lt;int&gt;, written_date &lt;chr&gt;, stage_name &lt;chr&gt;,\n#   notoriety_date &lt;chr&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#mapping-from-node-id-to-row-index",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#mapping-from-node-id-to-row-index",
    "title": "Take Home Exercise 2",
    "section": "5.1 Mapping from node id to row index",
    "text": "5.1 Mapping from node id to row index\n\nid_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#map-source-and-target-ids-to-row-indices",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#map-source-and-target-ids-to-row-indices",
    "title": "Take Home Exercise 2",
    "section": "5.2 Map source and target IDs to row indices",
    "text": "5.2 Map source and target IDs to row indices\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-out-unmatched-edges",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-out-unmatched-edges",
    "title": "Take Home Exercise 2",
    "section": "5.3 Filtering out unmatched edges",
    "text": "5.3 Filtering out unmatched edges\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-whole-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-whole-graph",
    "title": "Take Home Exercise 2",
    "section": "5.4 Plotting the Whole Graph",
    "text": "5.4 Plotting the Whole Graph\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)\n\ngraph &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(`Node Type` = factor(type, levels = names(cl)))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#understanding-the-most-connected-nodes",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#understanding-the-most-connected-nodes",
    "title": "Take Home Exercise 2",
    "section": "6.1 Understanding the Most Connected Nodes",
    "text": "6.1 Understanding the Most Connected Nodes\n\n\nCode\ngraph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(degree = centrality_degree()) %&gt;%\n  as_tibble() %&gt;%\n  arrange(desc(degree)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  ggplot(aes(x = reorder(name, degree), \n             y = degree, \n             fill = `Node Type`)) +\n  geom_col() +\n  geom_text(aes(label = degree), \n            hjust = -0.2, \n            size = 4, \n            family = theme$font) +\n  coord_flip() +\n  labs(title = \"Top 10 Most Connected Nodes\", x = \"Name\", y = \"Degree\") + \n  scale_fill_manual(values = cl\n  ) +\n  theme_classic() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(family = theme$font, size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\n\n\nDegree is a measure in network analysis that represents the number of direct connections a node has to other nodes.\nHere I plot Top 10 Most Connected Nodes Plot to quickly see the key collaborators and influencers based on their direct connections within the community."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#top-genres",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#top-genres",
    "title": "Take Home Exercise 2",
    "section": "6.2 Top Genres",
    "text": "6.2 Top Genres\n\n\nCode\nnodes %&gt;%\n  filter(!is.na(genre)) %&gt;%\n  count(genre, sort = TRUE) %&gt;%\n  slice_max(n, n = 10) %&gt;%\n  ggplot(aes(x = reorder(genre, n), y = n, fill = n)) +\n  geom_col() +\n  scale_fill_gradient(low = cl$jeans, high = cl$text) +\n  coord_flip() +\n  labs(title = \"Top 10 Genres\", x = \"Genre\", y = \"Count\") +\n  theme_classic() +\n  theme(plot.background = theme$background,\n        panel.background = theme$panel,\n        panel.grid.major = theme$grid,\n        text = element_text(family = theme$font,\n                            size = theme$size),\n        plot.title = theme$title)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\n\n\nOceanus Folk is among the top genres which align with the narrative that Sailor Shift’s rise helped the Oceanus Folk genre into the mainstream music genres.\nDream Pop, Indie Folk, and Synthwave are the most represented genres in the dataset."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#functions",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#functions",
    "title": "Take Home Exercise 2",
    "section": "7.1 Functions",
    "text": "7.1 Functions\nEgo\n\n\nCode\nego_subgraph &lt;- function(graph, center_name) {\n  graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(is_target = name == center_name) %&gt;%\n    convert(to_subgraph, node_is_adjacent(which(is_target)) | is_target)\n}\n\n\nGenre\n\n\nCode\nget_oceanusfolk_subgraph &lt;- function(graph, genre_name = \"Oceanus Folk\", relation_type = \"PerformerOf\") {\n  oceanus_songs &lt;- V(graph)[type == \"Song\" & genre == genre_name]\n  performer_edges &lt;- E(graph)[relation == relation_type & .inc(oceanus_songs)]\n  connected_nodes &lt;- unique(as.vector(ends(graph, performer_edges)))\n  temp_subgraph &lt;- induced_subgraph(graph, V(graph)[name %in% connected_nodes])\n  subgraph.edges(temp_subgraph, E(temp_subgraph)[relation == relation_type])\n}"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#sailor-shift-ego-network",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#sailor-shift-ego-network",
    "title": "Take Home Exercise 2",
    "section": "7.2 Sailor Shift Ego Network",
    "text": "7.2 Sailor Shift Ego Network\n\n\nCode\nsailor_ego &lt;- ego_subgraph(graph, \"Sailor Shift\")\nplot(sailor_ego,\"Sailor Shift\",\"Ego Network of Sailor Shift\",3,5)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#oceanus-folk-sub-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#oceanus-folk-sub-graph",
    "title": "Take Home Exercise 2",
    "section": "7.3 Oceanus Folk Sub Graph",
    "text": "7.3 Oceanus Folk Sub Graph\n\n\nCode\noceanusfolk_subgraph &lt;- get_oceanusfolk_subgraph(graph)\nplot(oceanusfolk_subgraph, center_name = \"\", title = \"Oceanus Folk Songs\",1,2,FALSE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-visualize-the-careers-of-three-artists",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-visualize-the-careers-of-three-artists",
    "title": "Take Home Exercise 2",
    "section": "8.1 Question 3 : Visualize the careers of three artists",
    "text": "8.1 Question 3 : Visualize the careers of three artists\nTo ensure genre-relevant comparisons, I limited my analysis to artists connected to the Oceanus Folk community through performer or stylistic influence links.\nTo have a data driven definition of a rising star within Oceanus Folk music industry, I begin by examining the career of Sailor Shift. Her rise in popularity provides a benchmark for identifying the key traits and network patterns that characterize emerging breakout artists in this genre.\nTo identify rising stars in the Oceanus Folk genre, I propose the following set of metrics based on network structure and artist activity:\n\n8.1.1 Defining Key Metrics\n\n\n\nRising Star Profile Metrics\n\n\n\n\n\n\nTrait\nMeasured By\n\n\n\n\nCreative Activity\nSongs & Album released over time\n\n\nCreative Contribution\nComposerOf, LyricistOf, ProducerOf edges\n\n\nCollaboration\nAny other person who is connected to the same song(s) as the artist via a creative roles\n\n\nPublic Recognition\nNumber of notable releases over time\n\n\n\n\n\n\n\n8.1.2 Functions\nPlot\n\n\nCode\nplot &lt;- function(graph, center_name, title, size_1, size_2, show_arrows = TRUE, layout = \"fr\") {\n  set.seed(123)\n\n  V(graph)$type       &lt;- trimws(as.character(V(graph)$type))\n  V(graph)$name       &lt;- gsub(\"'\", \"`\", V(graph)$name)\n  V(graph)$is_center  &lt;- V(graph)$name == center_name\n  V(graph)$tooltip    &lt;- paste0(\"Name: \", V(graph)$name, \"\\nYear: \", V(graph)$release_date)\n  V(graph)$node_size  &lt;- scales::rescale(degree(graph), to = c(size_1, size_2))\n\n  E(graph)$relation   &lt;- trimws(as.character(E(graph)$relation))\n\n  node_colors &lt;- cl[names(cl) %in% unique(V(graph)$type)]\n  edge_colors &lt;- unlist(cl[names(cl) %in% unique(E(graph)$relation)])\n\n  g &lt;- ggraph(graph, layout = layout) +\n    geom_edge_link(\n      aes(edge_colour = relation),\n      arrow     = if (show_arrows) arrow(length = unit(3, \"mm\"), type = \"closed\") else NULL,\n      end_cap   = circle(0.5, \"mm\"),\n      start_cap = circle(0.5, \"mm\"),\n      width     = 0.3,\n      alpha     = 0.7\n    ) +\n    scale_edge_colour_manual(values = edge_colors, name = \"Edge Type\") +\n    \n    geom_point_interactive(\n      aes(\n        x = x, y = y,\n        fill     = as.character(type),\n        tooltip  = tooltip,\n        data_id  = name,\n        size     = node_size,\n        stroke   = ifelse(is_center, 1, 0.15)\n      ),\n      shape = 21\n    ) +\n    scale_size_identity() +\n\n    geom_node_text(\n      aes(label = ifelse(is_center, name, \"\")),\n      nudge_y = 0.5, \n      nudge_x = 0.2,\n      repel   = TRUE,\n      size    = 4,\n      color   = \"black\"\n    ) +\n\n    labs(\n      title   = title,\n      caption = \"Hover to view node's details\"\n    ) +\n    scale_fill_manual(values = node_colors, name = \"Node Type\") +\n    theme_minimal() +\n    theme(\n      panel.border      = element_rect(color = \"black\", fill = NA, size = 0.5),\n      axis.title        = element_blank(),\n      axis.text         = element_blank(),\n      axis.ticks        = element_blank(),\n      panel.grid        = element_blank(),\n      plot.background   = element_rect(fill = \"#FEFCF3\", color = NA),\n      plot.title        = element_text(color = cl$title, size = 14, face = \"bold\"),\n      plot.caption      = element_text(hjust = 0, size = 8, face = \"bold\", \n                                       margin = margin(t = 10), color = cl$title),\n      legend.text       = element_text(size = 9),\n      legend.title      = element_text(size = 10),\n      legend.key.size   = unit(0.5, \"lines\"),\n      legend.spacing.y  = unit(2, \"pt\")\n    )\n\n  girafe(\n    ggobj   = g,\n    options = list(opts_tooltip(css = theme$tooltip))\n  )\n}\n\n\nClean Duplicates\n\n\nCode\nclean_duplicate_artist &lt;- function(graph, artist_name) {\n\n  igraph &lt;- as.igraph(graph)\n\n  node_ids &lt;- which(V(igraph)$name == artist_name)\n\n  if (length(node_ids) &gt; 1) {\n    main_node &lt;- node_ids[1]\n    dup_nodes &lt;- node_ids[-1]\n\n    for (dup in dup_nodes) {\n      inc_edges &lt;- incident(igraph, dup, mode = \"all\")\n\n      for (e in inc_edges) {\n        ends_ids &lt;- ends(igraph, e, names = FALSE)\n\n        from_id &lt;- ends_ids[1]\n        to_id   &lt;- ends_ids[2]\n\n        if (from_id == dup) from_id &lt;- main_node\n        if (to_id == dup) to_id &lt;- main_node\n\n        if (from_id != to_id) {\n          edge_attrs &lt;- edge.attributes(igraph, e)\n\n          igraph &lt;- add_edges(igraph, c(from_id, to_id))\n          new_edge_id &lt;- ecount(igraph)\n\n          for (attr_name in names(edge_attrs)) {\n            edge_attr(igraph, attr_name, index = new_edge_id) &lt;- edge_attrs[[attr_name]]\n          }\n        }\n      }\n    }\n\n    igraph &lt;- delete_vertices(igraph, dup_nodes)\n  }\n\n  return(as_tbl_graph(igraph))\n}\n\n\nCreative Activity\n\n\nCode\nartist_creativity &lt;- function(graph, artist_name) {\n\n  artist_index &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(index)\n\n  member_of_groups &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n    pull(to)\n\n  group_names &lt;- character()\n  group_indices &lt;- integer()\n\n  if (length(member_of_groups) &gt; 0) {\n    group_names &lt;- graph %&gt;%\n      activate(nodes) %&gt;%\n      mutate(index = row_number()) %&gt;%\n      filter(index %in% member_of_groups) %&gt;%\n      pull(name)\n\n    group_indices &lt;- graph %&gt;%\n      activate(nodes) %&gt;%\n      mutate(index = row_number()) %&gt;%\n      filter(name %in% group_names) %&gt;%\n      pull(index)\n  }\n\n  performer_ids &lt;- c(artist_index, group_indices)\n\n  performed_ids &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n    pull(to)\n\n  performed_works &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(index %in% performed_ids,\n           (type == \"Song\" & single == TRUE & !is.na(single)) | type == \"Album\") %&gt;%\n    select(name, release_date, type, index) %&gt;%\n    arrange(release_date) %&gt;%\n    as_tibble()\n\n  subgraph_indices &lt;- unique(c(artist_index, group_indices, performed_works$index))\n\n  subgraph &lt;- induced_subgraph(graph, vids = subgraph_indices) %&gt;%\n    as_tbl_graph() %&gt;%\n    activate(edges) %&gt;%\n    filter(relation %in% c(\"PerformerOf\", \"MemberOf\")) %&gt;%\n    activate(nodes) %&gt;%\n    mutate(label = case_when(\n      type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n      type == \"Album\" ~ paste0(\"[Album] \", name, \" (\", release_date, \")\"),\n      TRUE ~ name\n    ))\n\n  return(list(\n    graph = subgraph,\n    works = performed_works %&gt;% select(name, type, release_date),\n    group = group_names\n  ))\n}\n\n\n\n\nCode\nrelease_timeline &lt;- function(song_years, artist_name = \"Artist\") {\n\n  release_counts &lt;- song_years %&gt;%\n    filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(release_year = as.integer(release_date)) %&gt;%\n    count(release_year)\n\n  ggplot(release_counts, aes(x = release_year, y = n)) +\n    geom_line(color = cl$jeans, linewidth = 1.2) +\n    geom_point(color = cl$t_shirt, size = 2) +\n    labs(\n      title = paste0(artist_name, \"'s Songs or Albums Release Timeline\"),\n      x = \"Year\",\n      y = \"Number of Releases\"\n    ) +\n    scale_x_continuous(breaks = seq(min(release_counts$release_year),\n                                    max(release_counts$release_year), by = 1)) +\n    scale_y_continuous(breaks = seq(0, max(release_counts$n), by = 1)) +\n    theme_classic() +\n    theme(\n      plot.background = theme$background,\n      panel.background = theme$panel,\n      panel.grid.major = theme$grid,\n      text = element_text(family = theme$font, size = theme$size),\n      plot.title = theme$title,\n      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)\n    )\n}\n\n\nCreative Contribution\n\n\nCode\ncontribution_network &lt;- function(graph, artist_name) {\n\n  artist_id &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(index)\n\n  creative_edges &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_id, relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n    as_tibble()\n\n  node_info &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(index = row_number()) %&gt;%\n  as_tibble()  \n\n  creative_edges &lt;- creative_edges %&gt;%\n    left_join(node_info %&gt;% select(index, name, release_date, type) %&gt;%\n              mutate(release_year = as.integer(release_date)),\n            by = c(\"to\" = \"index\"))\n\n  song_ids &lt;- creative_edges$to\n  subgraph_indices &lt;- unique(c(artist_id, song_ids))\n\n  subgraph &lt;- induced_subgraph(graph, vids = subgraph_indices) %&gt;%\n    as_tbl_graph() %&gt;%\n    activate(edges) %&gt;%\n    filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n    activate(nodes) %&gt;%\n    mutate(\n      label = paste0(name, \" (\", release_date, \")\")\n    )\n\n  song_data &lt;- creative_edges %&gt;%\n    select(name, relation, release_date, release_year) %&gt;%\n    arrange(release_date)\n\n  return(list(graph = subgraph, song_data = song_data))\n}\n\n\nArtist Collaborators\n\n\nCode\nartist_collab_network &lt;- function(graph, artist_name) {\n  collab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  \n  artist_index &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(index = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(index)\n  \n  artist_songs &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_index, relation %in% collab_roles) %&gt;%\n    pull(to)\n  \n  collab_edges &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(to %in% artist_songs, relation %in% collab_roles) %&gt;%\n    filter(from != artist_index) %&gt;%\n    as_tibble()\n  \n  collab_node_ids &lt;- unique(c(artist_index, collab_edges$from, collab_edges$to))\n  \n  subgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    `Node Type` == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n  ))\n  \n  return(subgraph)\n}\n\n\nPublic Recognition\n\n\nCode\npublic_recognition_table &lt;- function(graph, artist_name) {\n  artist_id &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    mutate(row_id = row_number()) %&gt;%\n    filter(name == artist_name) %&gt;%\n    pull(row_id)\n\n  group_ids &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from == artist_id, relation == \"MemberOf\") %&gt;%\n    pull(to)\n\n  performer_ids &lt;- if (length(group_ids) &gt; 0) c(artist_id, group_ids) else artist_id\n\n  performer_edges &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(from %in% performer_ids, relation == \"PerformerOf\") %&gt;%\n    as_tibble() %&gt;%\n    mutate(Performer = ifelse(from == artist_id, \"Solo\", \"Group\"))\n\n  node_df &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    as_tibble() %&gt;%\n    mutate(row_id = row_number())\n\n  charted &lt;- performer_edges %&gt;%\n    left_join(node_df, by = c(\"to\" = \"row_id\")) %&gt;%\n    filter(type %in% c(\"Song\", \"Album\"), notable == TRUE) %&gt;%\n    filter(type != \"Song\" | single == TRUE) %&gt;%\n    transmute(\n      Title = name,\n      Type = type,\n      Performer,\n      `Release Year` = release_date\n    )\n\n  solo &lt;- charted %&gt;%\n    filter(Performer == \"Solo\") %&gt;%\n    bind_rows(tibble(\n      Title = \"Total\",\n      Type = \"\",\n      Performer = \"\",\n      `Release Year` = as.character(nrow(.))\n    ))\n\n  group &lt;- charted %&gt;%\n    filter(Performer == \"Group\") %&gt;%\n    bind_rows(tibble(\n      Title = \"Total\",\n      Type = \"\",\n      Performer = \"\",\n      `Release Year` = as.character(nrow(.))\n    ))\n\n  return(list(Solo = solo, Group = group))\n}\n\n\n\n\nCode\npublic_recognition_line &lt;- function(graph, artist_name = \"Sailor Shift\") {\n  artist_id &lt;- graph %&gt;% \n    activate(nodes) %&gt;% mutate(row_id = row_number()) %&gt;% filter(name == artist_name) %&gt;% pull(row_id)\n  group_ids &lt;- graph %&gt;% activate(edges) %&gt;% filter(from == artist_id, relation == \"MemberOf\") %&gt;% pull(to)\n  has_group &lt;- length(group_ids) &gt; 0\n  performer_ids &lt;- if (has_group) c(artist_id, group_ids) else artist_id\n\n  performer_edges &lt;- graph %&gt;% activate(edges) %&gt;%\n    filter(from %in% performer_ids, relation == \"PerformerOf\") %&gt;%\n    as_tibble() %&gt;%\n    mutate(Performer = ifelse(from == artist_id, \"Solo\", \"Group\"))\n\n  node_df &lt;- graph %&gt;% activate(nodes) %&gt;% as_tibble() %&gt;% mutate(row_id = row_number())\n\n  charted_releases &lt;- performer_edges %&gt;%\n    left_join(node_df, by = c(\"to\" = \"row_id\")) %&gt;%\n    filter(type %in% c(\"Song\", \"Album\"), notable == TRUE) %&gt;%\n    transmute(Title = name, Type = type, Performer, `Release Year` = as.integer(release_date), Single = single)\n\n  albums &lt;- charted_releases %&gt;% filter(Type == \"Album\")\n  singles &lt;- charted_releases %&gt;% filter(Type == \"Song\", Single == TRUE)\n\n  album_counts &lt;- albums %&gt;% count(`Release Year`, Performer, name = \"Count\") %&gt;% mutate(Type = \"Album\")\n  single_counts &lt;- singles %&gt;% count(`Release Year`, Performer, name = \"Count\") %&gt;% mutate(Type = \"Song\")\n\n  all_years &lt;- min(c(album_counts$`Release Year`, single_counts$`Release Year`), na.rm = TRUE):max(c(album_counts$`Release Year`, single_counts$`Release Year`), na.rm = TRUE)\n  all_performers &lt;- unique(charted_releases$Performer)\n\n  album_complete &lt;- album_counts %&gt;% complete(`Release Year` = all_years, Performer = all_performers, Type = \"Album\", fill = list(Count = 0))\n  single_complete &lt;- single_counts %&gt;% complete(`Release Year` = all_years, Performer = all_performers, Type = \"Song\", fill = list(Count = 0))\n\n  song_dots &lt;- expand.grid(`Release Year` = all_years, Performer = all_performers, stringsAsFactors = FALSE) %&gt;%\n    left_join(singles %&gt;% count(`Release Year`, Performer, name = \"Count\"), by = c(\"Release Year\", \"Performer\")) %&gt;%\n    mutate(Count = replace_na(Count, 0), Type = \"Song\")\n\n  make_plot &lt;- function(df, dots, performer_label, type_label) {\n    line_color &lt;- ifelse(type_label == \"Song\", cl$jeans, cl$jeans)\n    dot_fill &lt;- ifelse(performer_label == \"Solo\", cl$t_shirt, cl$t_shirt)\n\n    ggplot(df, aes(x = `Release Year`, y = Count)) +\n      geom_line(color = line_color, linewidth = 1, alpha = 0.5, linetype = \"dashed\") +\n      geom_point(data = dots, aes(x = `Release Year`, y = Count), color = \"black\", fill = dot_fill, shape = 21, size = 2, inherit.aes = FALSE) +\n      scale_y_continuous(limits = c(0, max(df$Count, na.rm = TRUE) + 1), expand = c(0, 0)) +\n      scale_x_continuous(breaks = all_years) +\n      labs(title = paste(performer_label, type_label), x = \"Release Year\", y = \"Number of Releases\") +\n      theme_classic() +\n      theme(\n        plot.background = theme$background,\n        panel.background = theme$panel,\n        panel.grid.major = theme$grid,\n        text = element_text(family = theme$font, size = theme$size),\n        plot.title = theme$title,\n        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)\n      )\n  }\n\n  p1 &lt;- make_plot(album_complete %&gt;% filter(Performer == \"Solo\"), album_complete %&gt;% filter(Performer == \"Solo\"), \"Solo\", \"Album\")\n  p2 &lt;- make_plot(single_complete %&gt;% filter(Performer == \"Solo\"), song_dots %&gt;% filter(Performer == \"Solo\"), \"Solo\", \"Song\")\n  p3 &lt;- make_plot(album_complete %&gt;% filter(Performer == \"Group\"), album_complete %&gt;% filter(Performer == \"Group\"), \"Group\", \"Album\")\n  p4 &lt;- make_plot(single_complete %&gt;% filter(Performer == \"Group\"), song_dots %&gt;% filter(Performer == \"Group\"), \"Group\", \"Song\")\n\n  if (has_group) {\n  (p1 | p2) / (p3 | p4)\n} else {\n  p1 | p2\n}\n}\n\n\n\n\n8.1.3 List of Oceanus Folk Artist\n\n\nCode\noceanus_nodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(genre == \"Oceanus Folk\", `Node Type` %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;%\n  unique()\n\ngraph_with_centrality &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(\n    degree_centrality = centrality_degree()\n  )\n\ncentrality_table &lt;- graph_with_centrality %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% oceanus_performers, `Node Type` == \"Person\") %&gt;%\n  as_tibble() %&gt;%\n  select(name, `Node Type`, degree_centrality) %&gt;%\n  arrange(desc(degree_centrality))\n\ncolnames(centrality_table) &lt;- c(\"Artist\", \"Node Type\", \"Connections\")\n\ncentrality_table %&gt;%\n  kable(caption = \"Artists Who Performed Oceanus Folk Songs or Albums\")%&gt;%\n  scroll_box(height = \"400px\")\n\n\n\n\nArtists Who Performed Oceanus Folk Songs or Albums\n\n\nArtist\nNode Type\nConnections\n\n\n\n\nSailor Shift\nPerson\n52\n\n\nYang Wan\nPerson\n30\n\n\nRüdiger Graf\nPerson\n18\n\n\nFilippo Pelli\nPerson\n18\n\n\nMin Lei\nPerson\n16\n\n\nYong Dong\nPerson\n15\n\n\nXiuying Huang\nPerson\n15\n\n\nPing Zeng\nPerson\n14\n\n\nZacharie Martins\nPerson\n14\n\n\nBeatrice Albright\nPerson\n14\n\n\nDaniel O'Connell\nPerson\n14\n\n\nOrla Seabloom\nPerson\n12\n\n\nGuiying Liao\nPerson\n11\n\n\nTheresa Rivera\nPerson\n11\n\n\nVanessa Ramos\nPerson\n11\n\n\nMin Kong\nPerson\n10\n\n\nXia Jia\nPerson\n10\n\n\nGuiying Cao\nPerson\n9\n\n\nNa Lai\nPerson\n9\n\n\nChao Zeng\nPerson\n9\n\n\nXiuying Fang\nPerson\n9\n\n\nNicola Bernetti\nPerson\n9\n\n\nVincentio Gentili\nPerson\n9\n\n\nYong Wang\nPerson\n9\n\n\nTao Jin\nPerson\n9\n\n\nYan Zou\nPerson\n8\n\n\nLei Jin\nPerson\n8\n\n\nXiulan Yi\nPerson\n8\n\n\nMartino Michelangeli\nPerson\n8\n\n\nIsabella Farinelli\nPerson\n8\n\n\nXia Cui\nPerson\n8\n\n\nGuglielmo Canetta\nPerson\n8\n\n\nJuan Gong\nPerson\n8\n\n\nXia Zeng\nPerson\n8\n\n\nGenevieve Bell\nPerson\n8\n\n\nJing Kang\nPerson\n7\n\n\nYong Shen\nPerson\n7\n\n\nYong Lai\nPerson\n7\n\n\nJuan Yu\nPerson\n7\n\n\nMonica Nelson\nPerson\n7\n\n\nYoko Fujita\nPerson\n7\n\n\nSerena Lettiere\nPerson\n7\n\n\nXiulan Wang\nPerson\n7\n\n\nTao Yao\nPerson\n7\n\n\nCharles Vazquez\nPerson\n7\n\n\nWalter White\nPerson\n6\n\n\nJie Fan\nPerson\n6\n\n\nJie Cui\nPerson\n6\n\n\nTao Lei\nPerson\n6\n\n\nQiang Xie\nPerson\n6\n\n\nAlfred Thibault\nPerson\n6\n\n\nXiuying Li\nPerson\n6\n\n\nWei Cheng\nPerson\n6\n\n\nYang Zhao\nPerson\n6\n\n\nJing Jin\nPerson\n6\n\n\nChao Zheng\nPerson\n6\n\n\nJörg Niemeier\nPerson\n6\n\n\nMaya Jensen\nPerson\n6\n\n\nTao Cui\nPerson\n5\n\n\nPing Sun\nPerson\n5\n\n\nChao Tan\nPerson\n5\n\n\nNa Peng\nPerson\n5\n\n\nWei Gao\nPerson\n5\n\n\nStephen Meyer\nPerson\n5\n\n\nYang Yao\nPerson\n5\n\n\nAneta Pruschke-Sölzer\nPerson\n5\n\n\nConstance Guibert\nPerson\n5\n\n\nYan Yan\nPerson\n5\n\n\nZoé-Agnès Delaunay\nPerson\n5\n\n\nPing Peng\nPerson\n5\n\n\nLisa Hofmann\nPerson\n5\n\n\nYan Zhou\nPerson\n5\n\n\nXia Zhu\nPerson\n5\n\n\nMing Jia\nPerson\n5\n\n\nJie Su\nPerson\n5\n\n\nBryan Smith\nPerson\n5\n\n\nRonald Kennedy\nPerson\n5\n\n\nFrédéric de la Coulon\nPerson\n5\n\n\nMing Xiao\nPerson\n5\n\n\nNa Dai\nPerson\n5\n\n\nTao Dai\nPerson\n4\n\n\nJeffrey Watson\nPerson\n4\n\n\nQiang Song\nPerson\n4\n\n\nXia Xia\nPerson\n4\n\n\nMin Jin\nPerson\n4\n\n\nIgnazio Pastine\nPerson\n4\n\n\nFang Duan\nPerson\n4\n\n\nChao Xiao\nPerson\n4\n\n\nTao Lei\nPerson\n4\n\n\nTao Du\nPerson\n4\n\n\nChristine Ward\nPerson\n4\n\n\nMikayla Cook\nPerson\n4\n\n\nNa Wen\nPerson\n4\n\n\nMing Zhong\nPerson\n4\n\n\nValérie Mathieu\nPerson\n4\n\n\nXia Wu\nPerson\n4\n\n\nJing Zhang\nPerson\n4\n\n\nYan Luo\nPerson\n4\n\n\nMichael Rivera\nPerson\n4\n\n\nFang Wu\nPerson\n4\n\n\nChad Marks\nPerson\n4\n\n\nThomas Ball\nPerson\n4\n\n\nKai Reynolds\nPerson\n4\n\n\nGang Shao\nPerson\n3\n\n\nXiulan Hao\nPerson\n3\n\n\nGuiying Ding\nPerson\n3\n\n\nJun Wen\nPerson\n3\n\n\nNadia van Dooren-de Jode Vastraedsd\nPerson\n3\n\n\nCoriolano Luria-Scialpi\nPerson\n3\n\n\nLisa Martin\nPerson\n3\n\n\nMelissa Wheeler\nPerson\n3\n\n\nXiulan Ye\nPerson\n3\n\n\nXia Jia\nPerson\n3\n\n\nDonna Caldwell\nPerson\n3\n\n\nMin Gao\nPerson\n3\n\n\nPing Liao\nPerson\n3\n\n\nChao Sun\nPerson\n3\n\n\nMadeleine Pineau\nPerson\n3\n\n\nLaetitia Petitjean\nPerson\n3\n\n\nJun Shao\nPerson\n3\n\n\nWei Chang\nPerson\n3\n\n\nNa Ma\nPerson\n3\n\n\nThibault Hardy\nPerson\n3\n\n\nPing Wu\nPerson\n3\n\n\nNa Ren\nPerson\n3\n\n\nVictoria Higgins\nPerson\n3\n\n\nDonald Medina\nPerson\n3\n\n\nJoshua Orozco\nPerson\n3\n\n\nQiang Qian\nPerson\n3\n\n\nJeffery Bailey\nPerson\n3\n\n\nLauretta Tresoldi\nPerson\n3\n\n\nKimberly Stanton\nPerson\n3\n\n\nJing Guo\nPerson\n3\n\n\nPatricia Pope\nPerson\n3\n\n\nCesare Cicilia\nPerson\n3\n\n\nJie Yan\nPerson\n3\n\n\nAdèle Bonneau\nPerson\n3\n\n\nJun Hao\nPerson\n3\n\n\nJun Han\nPerson\n3\n\n\nXiulan Zhang\nPerson\n3\n\n\nXiuying Mo\nPerson\n3\n\n\nYong Tao\nPerson\n3\n\n\nJun Xu\nPerson\n3\n\n\nYang Zhang\nPerson\n3\n\n\nYang Ma\nPerson\n3\n\n\nPing Xu\nPerson\n3\n\n\nXiulan Liang\nPerson\n3\n\n\nAlphons Donati-Pederiva\nPerson\n3\n\n\nQiang Han\nPerson\n3\n\n\nMin Mo\nPerson\n3\n\n\nJing Li\nPerson\n3\n\n\nJie Zhong\nPerson\n3\n\n\nJie Wang\nPerson\n3\n\n\nXia Du\nPerson\n3\n\n\nLi Li\nPerson\n3\n\n\nRyan Adams\nPerson\n3\n\n\nMin Huang\nPerson\n3\n\n\nXiulan Zhong\nPerson\n3\n\n\nJing Feng\nPerson\n3\n\n\nCarlos Duffy\nPerson\n2\n\n\nMin Qin\nPerson\n2\n\n\nJustin Morse\nPerson\n2\n\n\nTara Kota\nPerson\n2\n\n\nXiuying Liang\nPerson\n2\n\n\nWei Liao\nPerson\n2\n\n\nXiulan Lin\nPerson\n2\n\n\nMing Yan\nPerson\n2\n\n\nDonna Ryan\nPerson\n2\n\n\nXia Yan\nPerson\n2\n\n\nJing Ding\nPerson\n2\n\n\nJuan Wen\nPerson\n2\n\n\nWei Guo\nPerson\n2\n\n\nXia Xiang\nPerson\n2\n\n\nJing Zhong\nPerson\n2\n\n\nJuan Zeng\nPerson\n2\n\n\nChao Wu\nPerson\n2\n\n\nTimothy Hansen\nPerson\n2\n\n\nLei Zeng\nPerson\n2\n\n\nNa Ren\nPerson\n2\n\n\nDavid Morgan\nPerson\n2\n\n\nMary Parsons\nPerson\n2\n\n\nSusan Da Silva\nPerson\n2\n\n\nTao Ren\nPerson\n2\n\n\nGuiying Xia\nPerson\n2\n\n\nYong Dai\nPerson\n2\n\n\nQiang He\nPerson\n2\n\n\nChao Tang\nPerson\n2\n\n\nYui Kondo\nPerson\n2\n\n\nQiang Song\nPerson\n2\n\n\nChao Lu\nPerson\n2\n\n\nIda Vigliotti\nPerson\n2\n\n\nTao Yin\nPerson\n2\n\n\nMichael Snyder\nPerson\n2\n\n\nFang Gu\nPerson\n2\n\n\nTao Yao\nPerson\n2\n\n\nPing Cui\nPerson\n2\n\n\nTao Long\nPerson\n2\n\n\nYang Zhong\nPerson\n2\n\n\nJun Yu\nPerson\n2\n\n\nLei Kong\nPerson\n2\n\n\nYang Shao\nPerson\n2\n\n\nXiulan Hu\nPerson\n2\n\n\nMichael Smith\nPerson\n2\n\n\nLi Wen\nPerson\n2\n\n\nLei Tan\nPerson\n2\n\n\nTao Hu\nPerson\n2\n\n\nGuiying Tao\nPerson\n2\n\n\nChao Wu\nPerson\n2\n\n\nJames Clark\nPerson\n2\n\n\nLei Qian\nPerson\n2\n\n\nCourtney Phillips\nPerson\n2\n\n\nWei Ma\nPerson\n2\n\n\nGang Xiong\nPerson\n2\n\n\nQiang Luo\nPerson\n2\n\n\nMin Song\nPerson\n2\n\n\nJun Yuan\nPerson\n2\n\n\nChristine Jones\nPerson\n2\n\n\nMorgan Hernandez\nPerson\n2\n\n\nPing Shao\nPerson\n2\n\n\nTao Qin\nPerson\n2\n\n\nXiulan Dong\nPerson\n2\n\n\nXiuying Zhang\nPerson\n2\n\n\nXiuying Deng\nPerson\n2\n\n\nJennifer Alexander\nPerson\n2\n\n\nLatasha Watts\nPerson\n2\n\n\nJie Chang\nPerson\n2\n\n\nCarly Luna\nPerson\n2\n\n\nJustin Berry\nPerson\n2\n\n\nStephen Allen\nPerson\n2\n\n\nChao Qiao\nPerson\n2\n\n\nFang Xiang\nPerson\n2\n\n\nMichael Anderson\nPerson\n2\n\n\nRicardo Ward\nPerson\n2\n\n\nFang Zhou\nPerson\n2\n\n\nXiulan Zhou\nPerson\n2\n\n\nJuan Duan\nPerson\n2\n\n\nTao Qian\nPerson\n2\n\n\nChao Kang\nPerson\n2\n\n\nJun Ye\nPerson\n2\n\n\nTomoya Nakamura\nPerson\n2\n\n\nCharles du Perez\nPerson\n2\n\n\nFeliciano Pizarro Moll\nPerson\n2\n\n\nAugusto Villaverde Armengol\nPerson\n2\n\n\nJun Zou\nPerson\n2\n\n\nJie Wan\nPerson\n2\n\n\nMargaretha Sager\nPerson\n2\n\n\nGuiying Pan\nPerson\n2\n\n\nXiuying Duan\nPerson\n2\n\n\nMin Xia\nPerson\n2\n\n\nJie Wu\nPerson\n2\n\n\nIsaiah Morales\nPerson\n2\n\n\nGuiying Tang\nPerson\n2\n\n\nGang Shen\nPerson\n2\n\n\nRenata Manolesso\nPerson\n2\n\n\nRussell Bates\nPerson\n2\n\n\nGang Yang\nPerson\n2\n\n\nMin Tian\nPerson\n2\n\n\nTao Xu\nPerson\n2\n\n\nJun Yi\nPerson\n2\n\n\nPing Meng\nPerson\n2\n\n\nGuiying Zhong\nPerson\n2\n\n\nQiang Yang\nPerson\n2\n\n\nXia Zhao\nPerson\n2\n\n\nQiang Jiang\nPerson\n2\n\n\nTanya Garrett\nPerson\n2\n\n\nJohn Maldonado\nPerson\n2\n\n\nMichael Reyes\nPerson\n2\n\n\nSummer Bender\nPerson\n2\n\n\nAnn Holland\nPerson\n2\n\n\nGuiying Qin\nPerson\n2\n\n\nLei Zheng\nPerson\n2\n\n\nXia Wang\nPerson\n2\n\n\nNa Yi\nPerson\n2\n\n\nQiang Zhu\nPerson\n2\n\n\nPaulo Oestrovsky\nPerson\n2\n\n\nAmber Ramsey\nPerson\n2\n\n\nLi Wan\nPerson\n2\n\n\nLagan Bhalla\nPerson\n2\n\n\nGeorgina Piñol-Guerra\nPerson\n2\n\n\nJuan Dong\nPerson\n2\n\n\nJenna York\nPerson\n2\n\n\nYuki Hashimoto\nPerson\n2\n\n\nMatthew Murphy\nPerson\n2\n\n\nDouglas Roberts\nPerson\n2\n\n\nMing Zhou\nPerson\n2\n\n\nMin Ding\nPerson\n2\n\n\nMin Xiong\nPerson\n2\n\n\nTara Deshmukh\nPerson\n2\n\n\nYong Ding\nPerson\n2\n\n\nJie Long\nPerson\n2\n\n\nLuce Loiseau\nPerson\n2\n\n\nMing Wang\nPerson\n2\n\n\nChao Zhou\nPerson\n2\n\n\nYesenia Miller\nPerson\n2\n\n\nXiuying Xie\nPerson\n1\n\n\nRyan Devan\nPerson\n1\n\n\nTiya Sani\nPerson\n1\n\n\nKimaya Srinivasan\nPerson\n1\n\n\nRhonda Brown\nPerson\n1\n\n\nMary Medina\nPerson\n1\n\n\nLaura Gibbs\nPerson\n1\n\n\nRaymond Mccoy\nPerson\n1\n\n\nBrandy Reyes\nPerson\n1\n\n\nGang Pan\nPerson\n1\n\n\nChao Mo\nPerson\n1\n\n\nPing Feng\nPerson\n1\n\n\nLi Deng\nPerson\n1\n\n\nLei Tao\nPerson\n1\n\n\nChao Wu\nPerson\n1\n\n\nMin Xue\nPerson\n1\n\n\nMin Yu\nPerson\n1\n\n\nJing Xu\nPerson\n1\n\n\nSonia Weeks\nPerson\n1\n\n\nRichard Frazier\nPerson\n1\n\n\nGang Jiang\nPerson\n1\n\n\nJuan Pan\nPerson\n1\n\n\nSandra Smith\nPerson\n1\n\n\nChristopher Smith\nPerson\n1\n\n\nYong Chen\nPerson\n1\n\n\nGang Lai\nPerson\n1\n\n\nXiulan Lu\nPerson\n1\n\n\nMin Jin\nPerson\n1\n\n\nWei Lai\nPerson\n1\n\n\nMing Wan\nPerson\n1\n\n\nQiang Lai\nPerson\n1\n\n\nYong Tan\nPerson\n1\n\n\nYan Tao\nPerson\n1\n\n\nLi Zou\nPerson\n1\n\n\nGang Yin\nPerson\n1\n\n\nGang Zhang\nPerson\n1\n\n\nNa Zou\nPerson\n1\n\n\nKaori Kobayashi\nPerson\n1\n\n\nJuan Qiao\nPerson\n1\n\n\nJun Jin\nPerson\n1\n\n\nXiulan Ren\nPerson\n1\n\n\nGuiying Yang\nPerson\n1\n\n\nPing Chang\nPerson\n1\n\n\nMargherita Giammusso\nPerson\n1\n\n\nPina Garrone\nPerson\n1\n\n\nYang Mo\nPerson\n1\n\n\nEthan Sanchez\nPerson\n1\n\n\nYan Fang\nPerson\n1\n\n\nNa Yang\nPerson\n1\n\n\nRaymond Martin\nPerson\n1\n\n\nMin Huang\nPerson\n1\n\n\nJing Xiang\nPerson\n1\n\n\nTao Zou\nPerson\n1\n\n\nLi Qiao\nPerson\n1\n\n\nPing Tao\nPerson\n1\n\n\nNa Han\nPerson\n1\n\n\nFang Zhong\nPerson\n1\n\n\nNicole Thomas\nPerson\n1\n\n\nGang Fan\nPerson\n1\n\n\nMing Qiao\nPerson\n1\n\n\nGuiying Ye\nPerson\n1\n\n\nXiuying Huang\nPerson\n1\n\n\nJun Fu\nPerson\n1\n\n\nFang Han\nPerson\n1\n\n\nMing Su\nPerson\n1\n\n\nKelli Turner\nPerson\n1\n\n\nLatasha Chavez\nPerson\n1\n\n\nPatrizio Antonello-Salvemini\nPerson\n1\n\n\nNa Qian\nPerson\n1\n\n\nEric Bartlett\nPerson\n1\n\n\nMin Yan\nPerson\n1\n\n\nLei Tan\nPerson\n1\n\n\nMin He\nPerson\n1\n\n\nLi Qiu\nPerson\n1\n\n\nPing Yan\nPerson\n1\n\n\nXia Kang\nPerson\n1\n\n\nMing Yao\nPerson\n1\n\n\nXia Xia\nPerson\n1\n\n\nNa Cai\nPerson\n1\n\n\nLi Huang\nPerson\n1\n\n\nYong Ye\nPerson\n1\n\n\nMing Chen\nPerson\n1\n\n\nLi Ding\nPerson\n1\n\n\nQiang Du\nPerson\n1\n\n\nDeborah Norton\nPerson\n1\n\n\nLi Long\nPerson\n1\n\n\nXiulan Xu\nPerson\n1\n\n\nGang Fu\nPerson\n1\n\n\nMing Du\nPerson\n1\n\n\nMin Zheng\nPerson\n1\n\n\nJing Long\nPerson\n1\n\n\nXiuying Xiang\nPerson\n1\n\n\nLori Young\nPerson\n1\n\n\nSean Riggs\nPerson\n1\n\n\nGang Wang\nPerson\n1\n\n\nEvelyn Gordon\nPerson\n1\n\n\nYan Hou\nPerson\n1\n\n\nJacob Arnold\nPerson\n1\n\n\nÉdouard-Rémy Clerc\nPerson\n1\n\n\nLi Gu\nPerson\n1\n\n\nJie Cui\nPerson\n1\n\n\nGang Tian\nPerson\n1\n\n\nVictoria Vazquez\nPerson\n1\n\n\nJuan Wang\nPerson\n1\n\n\nJing Zhong\nPerson\n1\n\n\nJuan Wu\nPerson\n1\n\n\nJessica Carney\nPerson\n1\n\n\nChristopher Reilly\nPerson\n1\n\n\nMonica Murphy\nPerson\n1\n\n\nJing Wei\nPerson\n1\n\n\nAnn Anderson\nPerson\n1\n\n\nXiuying Kang\nPerson\n1\n\n\nKaren Robinson\nPerson\n1\n\n\nLi Zhou\nPerson\n1\n\n\nJun Wang\nPerson\n1\n\n\nFenna Zwart\nPerson\n1\n\n\nNa Yang\nPerson\n1\n\n\nKimberly Moore\nPerson\n1\n\n\nXiulan Yi\nPerson\n1\n\n\nChao Fang\nPerson\n1\n\n\nTao Ye\nPerson\n1\n\n\nYong Guo\nPerson\n1\n\n\nJing Cui\nPerson\n1\n\n\nLisa Pennington\nPerson\n1\n\n\nXiuying Shao\nPerson\n1\n\n\nDaria Ceravolo\nPerson\n1\n\n\nLuciano Chindamo\nPerson\n1\n\n\nMin Liao\nPerson\n1\n\n\nJie Bai\nPerson\n1\n\n\nYan Huang\nPerson\n1\n\n\nJoseph Cole\nPerson\n1\n\n\nRachel Ford\nPerson\n1\n\n\nYang Qian\nPerson\n1\n\n\nJuan Deng\nPerson\n1\n\n\nChiyo Suzuki\nPerson\n1\n\n\nKaori Watanabe\nPerson\n1\n\n\nJennifer Harris\nPerson\n1\n\n\nPauline Guyot de la Maillet\nPerson\n1\n\n\nAdrien Weiss\nPerson\n1\n\n\nQiang Mo\nPerson\n1\n\n\nYan Wang\nPerson\n1\n\n\nRegina Davis\nPerson\n1\n\n\nDeborah Davis\nPerson\n1\n\n\nAmanda Ramos\nPerson\n1\n\n\nLeif Bien\nPerson\n1\n\n\nElsbeth Löwer\nPerson\n1\n\n\nAlexej Klotz\nPerson\n1\n\n\nPing Zheng\nPerson\n1\n\n\nGang Meng\nPerson\n1\n\n\nLei Xue\nPerson\n1\n\n\nWei Qian\nPerson\n1\n\n\nNicholas Porter\nPerson\n1\n\n\nXiuying Jia\nPerson\n1\n\n\nChristine Turner\nPerson\n1\n\n\nLi Dai\nPerson\n1\n\n\nYong Tang\nPerson\n1\n\n\nTao Su\nPerson\n1\n\n\nJun Yuan\nPerson\n1\n\n\nXiulan Lai\nPerson\n1\n\n\nLei Su\nPerson\n1\n\n\nElena Nibali\nPerson\n1\n\n\nJose Garrett\nPerson\n1\n\n\nDavid Nash\nPerson\n1\n\n\nAmber Smith\nPerson\n1\n\n\nGang Zhu\nPerson\n1\n\n\nShlok Cherian\nPerson\n1\n\n\nXia Yu\nPerson\n1\n\n\nXiulan Xu\nPerson\n1\n\n\nXiulan Gu\nPerson\n1\n\n\nLei Liao\nPerson\n1\n\n\nJie Li\nPerson\n1\n\n\nMary King\nPerson\n1\n\n\nJie Xu\nPerson\n1\n\n\nYan Chang\nPerson\n1\n\n\nChao Cheng\nPerson\n1\n\n\nNa Ren\nPerson\n1\n\n\nQiang Xie\nPerson\n1\n\n\nMitchell Bryan\nPerson\n1\n\n\nMing Qiu\nPerson\n1\n\n\nYang Lei\nPerson\n1\n\n\nFang Qiao\nPerson\n1\n\n\nMing Yu\nPerson\n1\n\n\nGuiying Qiu\nPerson\n1\n\n\nJason Vaughn\nPerson\n1\n\n\nNa Jin\nPerson\n1\n\n\nPaul-Louis Benard\nPerson\n1\n\n\nYan Zhu\nPerson\n1\n\n\nChao Xiao\nPerson\n1\n\n\nPing Song\nPerson\n1\n\n\nXiulan Mo\nPerson\n1\n\n\nMin Liang\nPerson\n1\n\n\nNa Li\nPerson\n1\n\n\nXia Shao\nPerson\n1\n\n\nKyle Lawrence\nPerson\n1\n\n\nEdward Little\nPerson\n1\n\n\nGuiying Ma\nPerson\n1\n\n\nJonathan Morris\nPerson\n1\n\n\nXiuying Wei\nPerson\n1\n\n\nMichael Jefferson\nPerson\n1\n\n\nAndrew Lee\nPerson\n1\n\n\nMichael Gregory\nPerson\n1\n\n\nMaurice Harrison\nPerson\n1\n\n\nScott Burke\nPerson\n1\n\n\nDevin Chan\nPerson\n1\n\n\nJuan Gu\nPerson\n1\n\n\nQiang Dai\nPerson\n1\n\n\nXiulan He\nPerson\n1\n\n\nTao Chang\nPerson\n1\n\n\nMandy Hood\nPerson\n1\n\n\nRobert Villanueva\nPerson\n1\n\n\nThomas Dudley\nPerson\n1\n\n\nCharles Hall\nPerson\n1\n\n\nJames Mosley\nPerson\n1\n\n\nAdriana Figueroa\nPerson\n1\n\n\nQiang Gao\nPerson\n1\n\n\nFang Yan\nPerson\n1\n\n\nJing Chang\nPerson\n1\n\n\nLi Dong\nPerson\n1\n\n\nQiang Sun\nPerson\n1\n\n\nTomoya Takahashi\nPerson\n1\n\n\nTaichi Sasaki\nPerson\n1\n\n\nNa Deng\nPerson\n1\n\n\nXia Ye\nPerson\n1\n\n\nChelsea Harris\nPerson\n1\n\n\nChao Qiu\nPerson\n1\n\n\nEmily Jackson\nPerson\n1\n\n\nJie Cheng\nPerson\n1\n\n\nJuan Kang\nPerson\n1\n\n\nMichaela Brooks\nPerson\n1\n\n\nRachel Rios\nPerson\n1\n\n\nTammie Johnson\nPerson\n1\n\n\nXia Shen\nPerson\n1\n\n\nGang Ding\nPerson\n1\n\n\nMing Deng\nPerson\n1\n\n\nWei Yao\nPerson\n1\n\n\nMin Guo\nPerson\n1\n\n\nJuan Xiang\nPerson\n1\n\n\nJuan Cao\nPerson\n1\n\n\nYong Qiao\nPerson\n1\n\n\nChristophe-Émile Grégoire\nPerson\n1\n\n\nGeorges Chrétien\nPerson\n1\n\n\nMing Xiang\nPerson\n1\n\n\nWei Chen\nPerson\n1\n\n\nYong Tang\nPerson\n1\n\n\nJie Xu\nPerson\n1\n\n\nSteven Goodman\nPerson\n1\n\n\nLei Wan\nPerson\n1\n\n\nLi Zeng\nPerson\n1\n\n\nGuiying Dong\nPerson\n1\n\n\nNa Peng\nPerson\n1\n\n\nNa Jiang\nPerson\n1\n\n\nIsla Quinn\nPerson\n1\n\n\n\n\n\n\n\n\n\n8.1.4 Sailor Shift\n\nCreative ActivityCreative ContributionCollaborationPublic Recognition\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- artist_creativity(graph,\"Sailor Shift\")\ncenter &lt;- c(\"Sailor Shift\", result$group)\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(center[1], \": Songs and Release Years\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\nLine Graph\n\n\nCode\nrelease_timeline(result$works,\"Sailor Shift\")\n\n\n\n\n\n\n\n\n\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- contribution_network(graph,\"Sailor Shift\")\ncenter &lt;- c(\"Sailor Shift\")\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(\"How many works \",center[1],\" have contributed?\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\n\n\nCode\nresult &lt;- artist_collab_network(graph, \"Sailor Shift\")\ncenter &lt;- c(\"Sailor Shift\")\nplot(\n  result,\n  center_name = center,\n  title = paste0(center[1], \"'s Collaboration Network\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\nCode\ncollaborator_count &lt;- result %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"), name != \"Sailor Shift\") %&gt;%\n  count(`Node Type`)\n\ncollaborator_count %&gt;% \n  kable(caption = \"Number of Collaborators\")\n\n\n\nNumber of Collaborators\n\n\nNode Type\nn\n\n\n\n\nPerson\n40\n\n\nMusicalGroup\n8\n\n\n\n\n\n\n\nTable\n\n\nCode\ntables &lt;- public_recognition_table(graph, \"Sailor Shift\")\n\ntables$Solo %&gt;%\n  kable(caption = \"Solo Charted Releases\", align = \"lccc\")\n\n\n\nSolo Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nTidal Pop Waves\nAlbum\nSolo\n2028\n\n\nSalty Dreams\nAlbum\nSolo\n2030\n\n\nThe Current & The Chord\nAlbum\nSolo\n2032\n\n\nCoral Beats\nAlbum\nSolo\n2034\n\n\nTides & Ballads\nAlbum\nSolo\n2036\n\n\nOceanbound\nAlbum\nSolo\n2038\n\n\nEchoes of the Deep\nAlbum\nSolo\n2040\n\n\nStormsong\nSong\nSolo\n2038\n\n\nTidesworn Ballads\nAlbum\nSolo\n2031\n\n\nSubmerged Sonatas\nAlbum\nSolo\n2031\n\n\nSeashell Serenade\nSong\nSolo\n2030\n\n\nTotal\n\n\n11\n\n\n\n\n\nCode\ntables$Group %&gt;%\n  kable(caption = \"Group Charted Releases\", align = \"lccc\")\n\n\n\nGroup Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nThe Kelp Forest Canticles\nAlbum\nGroup\n2024\n\n\nLuminescent Tides\nAlbum\nGroup\n2025\n\n\nShoreline Sonnets\nAlbum\nGroup\n2026\n\n\nSalt-Kissed Rhymes\nSong\nGroup\n2026\n\n\nTotal\n\n\n4\n\n\n\n\n\nLine Graph\n\n\nCode\npublic_recognition_line(graph, \"Sailor Shift\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.1.5 Yang Wan\n\nCreative ActivityCreative ContributionCollaborationPublic Recognition\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- artist_creativity(wan, \"Yang Wan\")\ncenter &lt;- c(\"Yang Wan\", result$group)\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(center[1], \": Songs and Release Years\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\nLine Graph\n\n\nCode\nrelease_timeline(result$works,\"Yang Wan\")\n\n\n\n\n\n\n\n\n\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- contribution_network(wan,\"Yang Wan\")\ncenter &lt;- c(\"Yang Wan\")\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(\"How many works \",center[1],\" have contributed?\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\n\n\nCode\nresult &lt;- artist_collab_network(wan, \"Yang Wan\")\ncenter &lt;- c(\"Yang Wan\")\nplot(\n  result,\n  center_name = center,\n  title = paste0(center[1], \"'s Collaboration Network\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\nCode\ncollaborator_count &lt;- result %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"), name != \"Yang Wan\") %&gt;%\n  count(`Node Type`)\n\ncollaborator_count %&gt;% \n  kable(caption = \"Number of Collaborators\")\n\n\n\nNumber of Collaborators\n\n\nNode Type\nn\n\n\n\n\nPerson\n76\n\n\nMusicalGroup\n2\n\n\n\n\n\n\n\nTable\n\n\nCode\ntables &lt;- public_recognition_table(wan, \"Yang Wan\")\n\ntables$Solo %&gt;%\n  kable(caption = \"Solo Charted Releases\", align = \"lccc\")\n\n\n\nSolo Charted Releases\n\n\n\n\n\n\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nSilent Projectiles\nSong\nSolo\n2027\n\n\nEchoes of Naomi\nSong\nSolo\n2020\n\n\nBananal’s Gentle Whispers\nSong\nSolo\n2020\n\n\nTender Embrace\nSong\nSolo\n1994\n\n\nRakkauden Varjossa (In the Shadow of Love)\nSong\nSolo\n2013\n\n\nPerfect Harmony\nSong\nSolo\n2003\n\n\nUrban Haze\nSong\nSolo\n2022\n\n\nWhispers in the Unknown\nSong\nSolo\n2026\n\n\nMoments Between Heartbeats\nSong\nSolo\n2023\n\n\nWhispers Between Rooms\nAlbum\nSolo\n2022\n\n\nScales and Streetlights\nAlbum\nSolo\n2000\n\n\nCanonical Refrain\nSong\nSolo\n2015\n\n\nRingtone Requiem\nSong\nSolo\n2013\n\n\nEchoes of Armenia’s Crown\nSong\nSolo\n2021\n\n\nSilent Steps of Summer’s Daughter\nAlbum\nSolo\n2001\n\n\nTotal\n\n\n15\n\n\n\n\n\nCode\ntables$Group %&gt;%\n  kable(caption = \"Group Charted Releases\", align = \"lccc\")\n\n\n\nGroup Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nTotal\n\n\n0\n\n\n\n\n\nLine Graph\n\n\nCode\npublic_recognition_line(wan, \"Yang Wan\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.1.6 Rüdiger Graf\n\nCreative ActivityCreative ContributionCollaborationPublic Recognition\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- artist_creativity(graf, \"Rüdiger Graf\")\ncenter &lt;- c(\"Rüdiger Graf\", result$group)\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(center[1], \": Songs and Release Years\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\nLine Graph\n\n\nCode\nrelease_timeline(result$works,\"Rüdiger Graf\")\n\n\n\n\n\n\n\n\n\n\n\nNetwork Graph\n\n\nCode\nresult &lt;- contribution_network(graf,\"Rüdiger Graf\")\ncenter &lt;- c(\"Rüdiger Graf\")\nplot(\n  result$graph,\n  center_name = center,\n  title = paste0(\"How many works \",center[1],\" have contributed?\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\n\n\nCode\nresult &lt;- artist_collab_network(graf, \"Rüdiger Graf\")\ncenter &lt;- c(\"Rüdiger Graf\")\nplot(\n  result,\n  center_name = center,\n  title = paste0(center[1], \"'s Collaboration Network\"),\n  size_1 = 5,\n  size_2 = 8,\n  show_arrows = TRUE,\n  layout = \"kk\"\n)\n\n\n\n\n\n\n\n\nCode\ncollaborator_count &lt;- result %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"), name != \"Rüdiger Graf\") %&gt;%\n  count(`Node Type`)\n\ncollaborator_count %&gt;% \n  kable(caption = \"Number of Collaborators\")\n\n\n\nNumber of Collaborators\n\n\nNode Type\nn\n\n\n\n\nPerson\n25\n\n\nMusicalGroup\n1\n\n\n\n\n\n\n\nTable\n\n\nCode\ntables &lt;- public_recognition_table(graf, \"Rüdiger Graf\")\n\ntables$Solo %&gt;%\n  kable(caption = \"Solo Charted Releases\", align = \"lccc\")\n\n\n\nSolo Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nGlasses Raised\nSong\nSolo\n2027\n\n\nConcrete Kingdom\nSong\nSolo\n2026\n\n\nColorful Traditions\nSong\nSolo\n2026\n\n\nArtificial Intuition Node\nSong\nSolo\n2024\n\n\nCosmic Cartography\nSong\nSolo\n2026\n\n\nTotal\n\n\n5\n\n\n\n\n\nCode\ntables$Group %&gt;%\n  kable(caption = \"Group Charted Releases\", align = \"lccc\")\n\n\n\nGroup Charted Releases\n\n\nTitle\nType\nPerformer\nRelease Year\n\n\n\n\nTotal\n\n\n0\n\n\n\n\n\nLine Graph\n\n\nCode\npublic_recognition_line(graf, \"Rüdiger Graf\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nCreative Activity : Sailor Shift built a long, steady career from 2024 to 2040, consistently releasing music, Yang Wan had an early start in 1994, disappeared for years, then made several strong comebacks after 2010, Rüdiger Graf rose quickly between 2024 and 2026, peaking fast but dropping off just as quickly a brief flash of fame that didn’t last. These distinct career patterns reveal that rising stars in Oceanus Folk begin with consistent growth.\nCreative Contribution: Sailor Shift maintained a steady presence as a focused lyricist, Yang Wan contributed across multiple creative roles composer, lyricist, and producer showing strong versatility, Rüdiger Graf took on a mix of roles early on but lacked sustained involvement. This kind of observations suggest that rising stars often emerge through either consistent specialization on the rolse or early multi role engagement.\nCollaboration: Yang Wan has the largest network with 76 individuals and 2 groups, showing broad influence and strong community presence, Sailor Shift has 40 individual and 8 group collaborators, suggesting a balanced, stable network built over time, while Rüdiger Graf has 25 individuals and 1 group—more limited, but notable given the shorter career span. Artists with high collaborator counts—especially early in their careers—tend to gain more exposure, expand their influence, and accelerate their growth. Thus, emerging artists who are quickly building networks are strong candidates to watch as the next rising stars.\nPublic Recognition: Sailor Shift stands out with both solo and group charted releases, showing broad reach and influence, Yang Wan has a strong solo-only chart record that reflects resilience and longevity, while Rüdiger Graf shows early momentum through recent solo chart activity, this is a key signal of rising star potential characteristics."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-the-next-rising-star-of-oceanus-folk",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#question-3-the-next-rising-star-of-oceanus-folk",
    "title": "Take Home Exercise 2",
    "section": "8.2 Question 3: The Next Rising Star of Oceanus Folk",
    "text": "8.2 Question 3: The Next Rising Star of Oceanus Folk\n\n\nCode\nnodes &lt;- graph %&gt;% \n  activate(nodes) %&gt;% \n  mutate(row_id = row_number()) %&gt;% \n  as_tibble()\n\nedges &lt;- graph %&gt;% \n  activate(edges) %&gt;% \n  as_tibble()\n\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", `Node Type` %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, `Node Type`) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00\n\n\n\n\n\n\n\n\n\n\n\nConclusions\n\n\n\nBased on the computed metrics including total works, charted ratio, collaboration count, creative contributions, and a freshness score that penalizes inactivity the predicted rising stars in the Oceanus Folk genre are The Brine Choir, Selkie’s Hollow, and Copper Canyon.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat Makes a Rising Star:\nThe model goes beyond just popularity. It also looks at:\n\nCreative Activity: Regular releases, like Sailor Shift’s, suggest steady growth.\nCreative Contribution: Versatile creators like Yang Wan, or focused ones like Sailor Shift, both show strong artistic identity.\nCollaboration: Large, active networks—especially built early—are often signs of rising stars.\nPublic Recognition: Charted songs help, but they aren’t everything. Sailor Shift, for example, may not have a perfect chart ratio, but her consistency and connections still make her stand out.\n\nRising Star Score :\nThe score combines multiple aspects of an artist’s career to highlight those with strong future potential.\n\nTotal Works reflects how productive an artist has been.\nCharted Ratio emphasizes public recognition impact matters more than volume.\nCollaboration Count and Creative Contributions show how engaged and versatile an artist is behind the scenes.\nAll of these are adjusted by Freshness, which penalizes long inactivity artists who started early but went quiet get lower scores.\n\nAdditional Notes:\n\nThe current year is assumed to be 2040.\nWe filter artists whose works have release years between 2030 and 2040, and only artists with at least 3 releases during this period are included.This filtering helps exclude inactive or minimally active artists."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\nWe are required to prepare the prototype module report as Take-home Exercise 3 submission.\nWe are required to include a section called UI design for the different components of the UIs for the proposed design."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Our project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "data &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "EdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x0000013d06d46348&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "id_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Code\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "font_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "oceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#choropleth-map-for-rates",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#choropleth-map-for-rates",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "In much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\n\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n\nPlot a choropleth map showing the distribution of percentage functional water point by LGA\n\ntm_shape(NGA_wp) +\n  tm_polygons(\"pct_functional\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) + \n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Rate map of functional water point by LGAs\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#extreme-value-maps",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#extreme-value-maps",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "Extreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n\n\n\n\nWriting a function has three big advantages over using copy-and-paste:\n\nWe can give a function an evocative name that makes your code easier to understand.\nAs requirements change, we only need to update code in one place, instead of many.\nWe eliminate the chance of making incidental mistakes when we copy and paste (i.e. updating a variable name in one place, but not in another).\n\n\n\n\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nNext, we will write a percentile mapping function by using the code chunk below.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_polygons(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\nTo run the function, type the code chunk as shown below.\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n\n\n\n\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nLet’s test the newly created function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "artist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n ### Tab 5 : Prediction\n\n\n\n\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  }
]