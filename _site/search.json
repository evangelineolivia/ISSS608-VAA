[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evangeline Olivia’s Visual Analytics Coursework",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications website. In this website, you will find my coursework prepared for this course.\n\nLatest Work :\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 1\n\n\nA Layered Grammar of Graphics ggplot2 methods\n\n\n\nApr 18, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 2\n\n\nBeyond ggplot2 Fundamentals\n\n\n\nApr 22, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3b\n\n\nProgramming Animated Statistical Graphics with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3a\n\n\nProgramming Interactive Data Visualisation with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1\n\n\nSingapore Population Analysis\n\n\n\nMay 01, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4a\n\n\nVisualising Distribution\n\n\n\nMay 04, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4c\n\n\nVisualising Uncertainty\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4b\n\n\nVisual Statistical Analysis\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4d\n\n\nFunnel Plots for Fair Comparisons\n\n\n\nMay 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1 Feedback\n\n\nLearn from Peers\n\n\n\nMay 08, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 5\n\n\nModelling, Visualising and Analysing Network Data with R\n\n\n\nMay 11, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 2\n\n\nVAST Challenge 2025 Mini-Challenge 1\n\n\n\nMay 13, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 6\n\n\nVisualising and Analysing Time-Oriented Data\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 3\n\n\nExploring VAST 2025 Mini Challenge 1\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8c\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8b\n\n\nVisualising Geospatial Point Data\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8a\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 3\n\n\nPrototype Module for Shiny Application\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 01\n\n\nSuperstore Sales and Profit Report\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\nWe are required to prepare the prototype module report as Take-home Exercise 3 submission.\nWe are required to include a section called UI design for the different components of the UIs for the proposed design.\n\n\n\n\nOur project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications.\n\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)\n\n\n\n\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\nfont_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)\n\n\n\n\n\n\n\nEdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x0000023a045172d8&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763 \n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)\n\n\n\n\n\n\n\nCode\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\n\n\nShow the code\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\nShow the code\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\nWe are required to prepare the prototype module report as Take-home Exercise 3 submission.\nWe are required to include a section called UI design for the different components of the UIs for the proposed design."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Our project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "data &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "font_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "EdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x0000023a045172d8&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "id_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Code\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\n\n\nShow the code\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\nShow the code\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Show the code\noceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Show the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  }
]