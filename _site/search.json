[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evangeline Olivia’s Visual Analytics Coursework",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications website. In this website, you will find my coursework prepared for this course.\n\nLatest Work :\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 1\n\n\nA Layered Grammar of Graphics ggplot2 methods\n\n\n\nApr 18, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 2\n\n\nBeyond ggplot2 Fundamentals\n\n\n\nApr 22, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3b\n\n\nProgramming Animated Statistical Graphics with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 3a\n\n\nProgramming Interactive Data Visualisation with R\n\n\n\nApr 29, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1\n\n\nSingapore Population Analysis\n\n\n\nMay 01, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4a\n\n\nVisualising Distribution\n\n\n\nMay 04, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4c\n\n\nVisualising Uncertainty\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4b\n\n\nVisual Statistical Analysis\n\n\n\nMay 05, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 4d\n\n\nFunnel Plots for Fair Comparisons\n\n\n\nMay 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1 Feedback\n\n\nLearn from Peers\n\n\n\nMay 08, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 5\n\n\nModelling, Visualising and Analysing Network Data with R\n\n\n\nMay 11, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 2\n\n\nVAST Challenge 2025 Mini-Challenge 1\n\n\n\nMay 13, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 6\n\n\nVisualising and Analysing Time-Oriented Data\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 3\n\n\nExploring VAST 2025 Mini Challenge 1\n\n\n\nMay 17, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8c\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8b\n\n\nVisualising Geospatial Point Data\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 8a\n\n\nChoropleth Mapping with R\n\n\n\nJun 06, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9e\n\n\nTreemap Visualisation with R\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9d\n\n\nVisual Multivariate Analysis with Parallel Coordinates Plot\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9c\n\n\nHeatmap for Visualising and Analysing Multivariate Data\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9b\n\n\nVisual Correlation Analysis\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nHands on Exercise 9a\n\n\nCreating Ternary Plot with R\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 3\n\n\nPrototype Module for Shiny Application\n\n\n\n\n\n\n\n\n\n\nIn Class Exercise 01\n\n\nSuperstore Sales and Profit Report\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\n\n\n\n\nOur project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications.\n\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)\n\n\n\n\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\nfont_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)\n\n\n\n\n\n\n\nEdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x000001b5d4fb73f0&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763 \n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)\n\n\n\n\n\n\n\nCode\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\n\n\nShow the code\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\nShow the code\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-task",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#getting-started",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Our project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\nlibrary(dplyr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-and-loading-data",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "data &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#custom-theme",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "font_add_google(\"Montserrat\", \"montserrat\")\ntheme &lt;- list(\n  font = 'montserrat',\n  size=14,\n  background = element_rect(fill = \"#FEFCF3\",color = NA),\n  title = element_text(\n      size = 16,\n      face = \"bold\",\n      color = \"black\"),\n  fill = \"#96b3c2\",\n  panel = element_rect(fill = \"#FEFCF3\", color = NA),\n  grid = element_line(color = \"#E6DCD0\")\n)\n\nedge_colors &lt;- c(\n  \"PerformerOf\" = \"#E69F00\",   \n  \"ComposerOf\"  = \"#56B4E9\",   \n  \"LyricistOf\"  = \"#009E73\",   \n  \"ProducerOf\"  = \"#F0E442\",   \n  \"MemberOf\"    = \"#D55E00\",\n  \n  \"CoverOf\" = \"#E69F00\",\n  \"InStyleOf\" = \"#56B4E9\",\n  \"InterpolatesFrom\" = \"#009E73\",\n  \"LyricalReferenceTo\" = \"#F0E442\",\n  \"DirectlySamples\" = \"#D55E00\"\n)\n\nnode_colors &lt;- c(\n  \"Person\" = \"#176BA0\",\n  \"Song\"   = \"#F1948A\",  \n  \"Album\"  = \"#C0392B\",  \n  \"MusicalGroup\" = \"#9DF0E2\",\n  \"RecordLabel\" = \"#CFF9F8\"\n)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation-and-cleaning",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "EdgesNodes\n\n\n\nedges &lt;- as_tibble(data$links)\nedge\n\nfunction (...) \n{\n    structure(list(...), class = \"igraph.edge\")\n}\n&lt;bytecode: 0x000001b5d4fb73f0&gt;\n&lt;environment: namespace:igraph&gt;\n\n\n\n\n\nnodes &lt;- as_tibble(data$nodes)\nnodes\n\n# A tibble: 17,412 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Song        Breaking Th… TRUE   2017         Ocea… TRUE        0 &lt;NA&gt;        \n 2 Person      Carlos Duffy NA     &lt;NA&gt;         &lt;NA&gt;  NA          1 &lt;NA&gt;        \n 3 Person      Min Qin      NA     &lt;NA&gt;         &lt;NA&gt;  NA          2 &lt;NA&gt;        \n 4 Person      Xiuying Xie  NA     &lt;NA&gt;         &lt;NA&gt;  NA          3 &lt;NA&gt;        \n 5 RecordLabel Nautical Mi… NA     &lt;NA&gt;         &lt;NA&gt;  NA          4 &lt;NA&gt;        \n 6 Song        Unshackled … FALSE  2026         Lo-F… TRUE        5 &lt;NA&gt;        \n 7 Person      Luke Payne   NA     &lt;NA&gt;         &lt;NA&gt;  NA          6 &lt;NA&gt;        \n 8 Person      Xiulan Zeng  NA     &lt;NA&gt;         &lt;NA&gt;  NA          7 &lt;NA&gt;        \n 9 Person      David Frank… NA     &lt;NA&gt;         &lt;NA&gt;  NA          8 &lt;NA&gt;        \n10 RecordLabel Colline-Cas… NA     &lt;NA&gt;         &lt;NA&gt;  NA          9 &lt;NA&gt;        \n# ℹ 17,402 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n\n\n\ncolnames(nodes)[colnames(nodes) == \"Node Type\"] &lt;- \"type\"\ncolnames(edges)[colnames(edges) == \"Edge Type\"] &lt;- \"relation\"\n\n\n\n\n\ncolSums(is.na(nodes))\n\n          type           name         single   release_date          genre \n             0              0          13797          12801          12801 \n       notable             id   written_date     stage_name notoriety_date \n         12801              0          15957          16889          16763"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#knowledge-graph",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "id_map &lt;- tibble(id = nodes$id,\n                 index = seq_len(\n                   nrow(nodes)))\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges &lt;- edges %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#sailor-shifts-career-explorer",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Code\nnodes &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(row_id = row_number())\n\nedges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsailor_id &lt;- nodes %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(row_id)\n\ngroup_id &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"MemberOf\") %&gt;%\n  pull(to)\n\n\n\n\n\nActive YearsTotal ReleasesCollaboratorsCreatives Role PlayedCharted Songs or AlbumsChart Success Ratio\n\n\n\nsailor_releases &lt;- edges %&gt;%\n  filter(from == sailor_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\ngroup_releases &lt;- edges %&gt;%\n  filter(from == group_id, relation == \"PerformerOf\") %&gt;%\n  pull(to)\n\nall &lt;- union(sailor_releases, group_releases)\n\nrelease_years &lt;- nodes %&gt;%\n  filter(row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )) %&gt;%  \n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  pull(release_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\npaste0(min(release_years), \"–\", max(release_years))\n\n[1] \"2024–2040\"\n\n\n\n\n\ntotal_releases &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    )\n  ) %&gt;%\n  nrow()\n\ntotal_releases\n\n[1] 21\n\n\n\n\n\ncollab_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\nsailor_songs &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(from == sailor_id, relation %in% collab_roles) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\nlength(collab_edges)\n\n[1] 48\n\n\n\n\n\nroles &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(from == sailor_id) %&gt;%\n  pull(relation) %&gt;%\n  unique()\nlength(roles)\n\n[1] 6\n\n\n\n\n\ncharted &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    (\n      (type == \"Song\" & single == TRUE) |\n      (type == \"Album\")\n    ),\n    notable == TRUE \n)\ncharted_count &lt;- nrow(charted)\ncharted_count\n\n[1] 15\n\n\n\n\n\nratio &lt;- round((charted_count / total_releases) * 100)\npaste0(ratio,'%')\n\n[1] \"71%\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar PlotTable\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\nggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#466575\",\n      \"Album\" = \"#96b3c2\"\n    )\n  ) +\n  labs(\n    title = \"Sailor Shift's Releases by Year (Songs vs Albums)\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_summary &lt;- nodes %&gt;%\n  filter(\n    row_id %in% all,\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  )\nkable(release_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nrow_id\nyear\n\n\n\n\nAlbum\nThe Kelp Forest Canticles\nNA\n2024\nOceanus Folk\nTRUE\n17261\n2023\nNA\nNA\n17262\n2024\n\n\nAlbum\nLuminescent Tides\nNA\n2025\nOceanus Folk\nTRUE\n17262\n2024\nNA\nNA\n17263\n2025\n\n\nAlbum\nShoreline Sonnets\nNA\n2026\nOceanus Folk\nTRUE\n17263\n2025\nNA\nNA\n17264\n2026\n\n\nSong\nSunken Bell Song\nTRUE\n2024\nOceanus Folk\nFALSE\n17264\nNA\nNA\nNA\n17265\n2024\n\n\nSong\nDancer of the Dappled Light\nFALSE\n2024\nOceanus Folk\nFALSE\n17265\nNA\nNA\nNA\n17266\n2024\n\n\nSong\nWhispers in the Fronds\nFALSE\n2024\nOceanus Folk\nFALSE\n17266\nNA\nNA\nNA\n17267\n2024\n\n\nSong\nThe Angler’s Lantern\nTRUE\n2025\nOceanus Folk\nFALSE\n17267\nNA\nNA\nNA\n17268\n2025\n\n\nSong\nDeepsea Fireflies\nFALSE\n2025\nOceanus Folk\nFALSE\n17268\nNA\nNA\nNA\n17269\n2025\n\n\nSong\nSandpiper’s Serenade\nFALSE\n2026\nOceanus Folk\nFALSE\n17269\nNA\nNA\nNA\n17270\n2026\n\n\nSong\nSalt-Kissed Rhymes\nTRUE\n2026\nOceanus Folk\nTRUE\n17270\nNA\nNA\nNA\n17271\n2026\n\n\nSong\nTidepool Epigrams\nFALSE\n2026\nOceanus Folk\nFALSE\n17271\nNA\nNA\nNA\n17272\n2026\n\n\nAlbum\nTidal Pop Waves\nNA\n2028\nOceanus Folk\nTRUE\n17272\n2027\nNA\nNA\n17273\n2028\n\n\nAlbum\nSalty Dreams\nNA\n2030\nOceanus Folk\nTRUE\n17273\n2029\nNA\nNA\n17274\n2030\n\n\nAlbum\nThe Current & The Chord\nNA\n2032\nOceanus Folk\nTRUE\n17274\n2031\nNA\nNA\n17275\n2032\n\n\nAlbum\nCoral Beats\nNA\n2034\nOceanus Folk\nTRUE\n17275\n2033\nNA\nNA\n17276\n2034\n\n\nAlbum\nTides & Ballads\nNA\n2036\nOceanus Folk\nTRUE\n17276\n2035\nNA\nNA\n17277\n2036\n\n\nAlbum\nOceanbound\nNA\n2038\nOceanus Folk\nTRUE\n17277\n2037\nNA\nNA\n17278\n2038\n\n\nAlbum\nEchoes of the Deep\nNA\n2040\nOceanus Folk\nTRUE\n17278\n2039\nNA\nNA\n17279\n2040\n\n\nSong\nHigh Tide Heartbeat\nTRUE\n2028\nOceanus Folk\nFALSE\n17279\nNA\nNA\nNA\n17280\n2028\n\n\nSong\nElectric Eel Love\nFALSE\n2028\nOceanus Folk\nTRUE\n17280\nNA\nNA\nNA\n17281\n2028\n\n\nSong\nSun-Drenched Daydream\nFALSE\n2028\nOceanus Folk\nFALSE\n17281\nNA\nNA\nNA\n17282\n2028\n\n\nSong\nChord of the Deep\nFALSE\n2028\nOceanus Folk\nFALSE\n17282\nNA\nNA\nNA\n17283\n2028\n\n\nSong\nHeart of the Habitat\nTRUE\n2030\nOceanus Folk\nFALSE\n17283\nNA\nNA\nNA\n17284\n2030\n\n\nSong\nReef Rhythm\nFALSE\n2030\nOceanus Folk\nFALSE\n17284\nNA\nNA\nNA\n17285\n2030\n\n\nSong\nDriftwood Lullaby\nFALSE\n2030\nOceanus Folk\nFALSE\n17285\nNA\nNA\nNA\n17286\n2030\n\n\nSong\nSaltwater Hymn\nFALSE\n2032\nOceanus Folk\nFALSE\n17286\nNA\nNA\nNA\n17287\n2032\n\n\nSong\nMoon Over the Tide\nFALSE\n2034\nOceanus Folk\nTRUE\n17287\nNA\nNA\nNA\n17288\n2034\n\n\nSong\nInto the Current\nTRUE\n2034\nOceanus Folk\nFALSE\n17288\nNA\nNA\nNA\n17289\n2034\n\n\nSong\nBarnacle Heart\nFALSE\n2034\nOceanus Folk\nFALSE\n17289\nNA\nNA\nNA\n17290\n2034\n\n\nSong\nFog & Fiddle\nFALSE\n2036\nOceanus Folk\nTRUE\n17290\nNA\nNA\nNA\n17291\n2036\n\n\nSong\nThe Fisherman’s Prayer\nTRUE\n2036\nOceanus Folk\nFALSE\n17291\nNA\nNA\nNA\n17292\n2036\n\n\nSong\nStormsong\nTRUE\n2038\nOceanus Folk\nTRUE\n17292\nNA\nNA\nNA\n17293\n2038\n\n\nSong\nSalt in My Veins\nFALSE\n2040\nOceanus Folk\nFALSE\n17293\nNA\nNA\nNA\n17294\n2040\n\n\nSong\nThe Last Mariner\nFALSE\n2040\nOceanus Folk\nFALSE\n17294\nNA\nNA\nNA\n17295\n2040\n\n\nAlbum\nTidesworn Ballads\nNA\n2031\nOceanus Folk\nTRUE\n17350\n2030\nNA\nNA\n17351\n2031\n\n\nAlbum\nSubmerged Sonatas\nNA\n2031\nOceanus Folk\nTRUE\n17356\n2030\nNA\nNA\n17357\n2031\n\n\nSong\nSeashell Serenade\nTRUE\n2030\nOceanus Folk\nTRUE\n17410\nNA\nNA\n2030\n17411\n2030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the code above, the following variables can be exposed as user inputs:\n\nYear (SliderInput)\nRelease Type (filter between Songs and Albums)\n\n\n\n\n\n\n\n\n\n\n\nNetwork GraphTable\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(to %in% sailor_works, relation %in% collab_types) %&gt;%\n  filter(from != sailor_id) %&gt;%\n  as_tibble()\n\ncollab_node_ids &lt;- unique(c(sailor_id, collab_edges$from, collab_edges$to))\n\nsubgraph &lt;- graph %&gt;%\n  as.igraph() %&gt;%\n  induced_subgraph(vids = collab_node_ids) %&gt;%\n  as_tbl_graph() %&gt;%\n  activate(edges) %&gt;%\n  filter(relation %in% collab_roles) %&gt;%          \n  activate(nodes) %&gt;%\n  mutate(label = case_when(\n    type == \"Song\" ~ paste0(name, \" (\", release_date, \")\"),\n    TRUE ~ name\n))\n\n\n\n\nShow the code\nnodes_df &lt;- subgraph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    id = row_number(),\n    group = type,\n    title = paste(\"Type:\", type),\n    color = ifelse(name == \"Sailor Shift\", \"orange\", node_colors[type]),\n    shape = ifelse(name == \"Sailor Shift\", \"star\", \"dot\"),\n    size  = ifelse(name == \"Sailor Shift\", 30, 15)\n  ) %&gt;%\n  select(id, label, group, title, color, shape, size)\n\nid_map &lt;- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %&gt;% activate(nodes), name))\n\n\nedges_df &lt;- subgraph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  mutate(\n    from = as.integer(from),\n    to = as.integer(to),\n    color = edge_colors[relation],\n    arrows = \"to\",\n    title = paste(\"Relation:\", relation)\n  ) %&gt;%\n  select(from, to, color, arrows,title) \n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE, selectedBy = list(variable = \"group\", main = \"Filter by Node Type\"),) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visEdges(smooth = FALSE)\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_table &lt;- collab_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, collaborator_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, work_name = name, type, release_date), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(\n    collaborator_name,\n    relation,\n    work_name,\n    type,\n    release_date\n  ) %&gt;%\n  arrange(release_date)\n\nkable(collab_table)\n\n\n\n\n\n\n\n\n\n\n\n\ncollaborator_name\nrelation\nwork_name\ntype\nrelease_date\n\n\n\n\nRusty Riggins\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nFinn McGraw\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nWilliam Tidewell\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nLila “Lilly” Hartman\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nJade Thompson\nComposerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nSophie Ramirez\nLyricistOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nIvy Echos\nPerformerOf\nThe Kelp Forest Canticles\nAlbum\n2024\n\n\nMaya Jensen\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nLila “Lilly” Hartman\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nJade Thompson\nComposerOf\nLuminescent Tides\nAlbum\n2025\n\n\nSophie Ramirez\nLyricistOf\nLuminescent Tides\nAlbum\n2025\n\n\nIvy Echos\nPerformerOf\nLuminescent Tides\nAlbum\n2025\n\n\nRusty Riggins\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nMaya Jensen\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLila “Lilly” Hartman\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nJade Thompson\nComposerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nSophie Ramirez\nLyricistOf\nShoreline Sonnets\nAlbum\n2026\n\n\nIvy Echos\nPerformerOf\nShoreline Sonnets\nAlbum\n2026\n\n\nLiam O’Sullivan\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nFiona Mercer\nComposerOf\nTidal Pop Waves\nAlbum\n2028\n\n\nKai Reynolds\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nAiden Harper\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nFinn Morgan\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nSkylar Brooks\nLyricistOf\nTides of Echos\nAlbum\n2029\n\n\nThe Wave Riders\nPerformerOf\nTides of Echos\nAlbum\n2029\n\n\nKai Reynolds\nPerformerOf\nSeashell Serenade\nSong\n2030\n\n\nZane Cruz\nLyricistOf\nNeon Heartbeat\nAlbum\n2031\n\n\nIris Moon\nComposerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nViolet Engines\nPerformerOf\nNeon Heartbeat\nAlbum\n2031\n\n\nMia Waters\nLyricistOf\nHidden Depths\nAlbum\n2031\n\n\nLila Rivers\nComposerOf\nHidden Depths\nAlbum\n2031\n\n\nSiren’s Call\nPerformerOf\nHidden Depths\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nLyricistOf\nTidesworn Ballads\nAlbum\n2031\n\n\nBeatrice Albright\nPerformerOf\nTidesworn Ballads\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nComposerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nDaniel O’Connell\nPerformerOf\nSubmerged Sonatas\nAlbum\n2031\n\n\nSophie Bennett\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nMichael Harris\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nKara Lee\nLyricistOf\nBallads for the End of Time\nAlbum\n2033\n\n\nEthan Clarke\nComposerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nTidal Reverie\nPerformerOf\nBallads for the End of Time\nAlbum\n2033\n\n\nOlivia Carter\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nLucas Bennett\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nMaya Torres\nComposerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nCrimson Carriage\nPerformerOf\nMelancholy Circuitry\nAlbum\n2033\n\n\nArlo Sterling\nLyricistOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nLyra Blaze\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nOrion Cruz\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nElara May\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nCassian Rae\nComposerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nThe Brine Choir\nPerformerOf\nDrifting Between the Stars and the Sea\nAlbum\n2034\n\n\nEwan MacCrae\nLyricistOf\nCoral Beats\nAlbum\n2034\n\n\nAstrid Nørgaard\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nFreya Lindholm\nComposerOf\nCoral Beats\nAlbum\n2034\n\n\nArlo Sterling\nLyricistOf\nArtificial Sunsets\nAlbum\n2035\n\n\nLyra Blaze\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nOrion Cruz\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nElara May\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCassian Rae\nComposerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nThe Brine Choir\nPerformerOf\nArtificial Sunsets\nAlbum\n2035\n\n\nCoralia Bellweather\nComposerOf\nTides & Ballads\nAlbum\n2036\n\n\nLevi Holloway\nLyricistOf\nTides & Ballads\nAlbum\n2036\n\n\nZachary Cole\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nLia Grant\nLyricistOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nSelkie’s Hollow\nPerformerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nMaya Jensen\nComposerOf\nBallads for the Low Tide\nAlbum\n2037\n\n\nArlo Sterling\nLyricistOf\nElectric Reverie\nAlbum\n2038\n\n\nLyra Blaze\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nOrion Cruz\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nElara May\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nCassian Rae\nComposerOf\nElectric Reverie\nAlbum\n2038\n\n\nThe Brine Choir\nPerformerOf\nElectric Reverie\nAlbum\n2038\n\n\nEwan MacCrae\nLyricistOf\nOceanbound\nAlbum\n2038\n\n\nFreya Lindholm\nComposerOf\nOceanbound\nAlbum\n2038\n\n\nMarin Thorne\nComposerOf\nEchoes of the Deep\nAlbum\n2040\n\n\nJonah Calloway\nLyricistOf\nEchoes of the Deep\nAlbum\n2040\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nNode Type (checkboxGroupInput)\nEdge Type (Relation) (checkboxGroupInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"DirectlySamples\")\n\nworks &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nsailor_works &lt;- edges %&gt;%\n  filter(from == sailor_id, relation %in% works) %&gt;%\n  pull(to)\n\ninfluenced_nodes &lt;- edges %&gt;%\n  filter(from %in% sailor_works, relation %in% influence_types)\n\ninfluenced_works &lt;- influenced_nodes$to\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% influenced_works)\n\nperformer_ids &lt;- performer_edges$from\n\nsailor_node &lt;- nodes %&gt;%\n  filter(row_id == sailor_id) %&gt;%\n  transmute(id = row_id, label = name, group = \"Sailor\", level = 1)\n\nworks_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% sailor_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"SailorWork\", level = 2)\n\ninfluencer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% influenced_works) %&gt;%\n  transmute(id = row_id, label = name, group = \"InfluencedWork\", title = paste0(\"Genre :\", genre),level = 3)\n\nperformer_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids) %&gt;%  \n  mutate(\n    code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"])\n  ) %&gt;%\n  transmute(\n    id = row_id, \n    label = name, \n    group = \"Performer\", \n    title = paste(\"&lt;b&gt;Type:&lt;/b&gt; \", type),\n    level = 4,\n    shape = \"icon\",\n    icon.code = code,\n    icon.color = color\n    )\n\nall_nodes &lt;- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)\n\nedges1 &lt;- edges %&gt;%\n  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %&gt;% \n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges2 &lt;- influenced_nodes %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nedges3 &lt;- performer_edges %&gt;%\n  transmute(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation:&lt;/b&gt; \", relation),\n    relation = relation\n  )\n\nall_edges &lt;- bind_rows(edges1, edges2, edges3)\n\nvisNetwork(all_nodes, all_edges) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\nShow the code\ninfluence_details &lt;- influenced_nodes %&gt;%\n  left_join(nodes %&gt;% select(row_id, from_label = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  left_join(nodes %&gt;% select(row_id, to_label = name, to_genre = genre), by = c(\"to\" = \"row_id\")) %&gt;%\n  select(from_label, relation, to_label, to_genre) %&gt;%\n  rename(\n    `Sailor Shift Work` = from_label, \n    `Influence Type` = relation,\n    `Other Artist Work` = to_label, \n    `Genre` = to_genre\n  )\nkable(influence_details)\n\n\n\n\n\n\n\n\n\n\n\nSailor Shift Work\nInfluence Type\nOther Artist Work\nGenre\n\n\n\n\nMelancholy Circuitry\nCoverOf\nTwilight’s Threshold\nSynthwave\n\n\nElectric Reverie\nInStyleOf\nFolklore’s Heartbeat\nBlues Rock\n\n\nElectric Reverie\nInterpolatesFrom\nReflejo Interior\nAmericana\n\n\nTides of Echos\nInterpolatesFrom\nWeathered Miles\nDoom Metal\n\n\nTides of Echos\nInStyleOf\nThe Long Way Home\nDream Pop\n\n\nThe Kelp Forest Canticles\nDirectlySamples\nHallowed Transaction\nDoom Metal\n\n\nThe Kelp Forest Canticles\nCoverOf\nFür uns alle zusammen\nAlternative Rock\n\n\nSalty Dreams\nInStyleOf\nSusurros de Pasión\nSynthwave\n\n\nSalty Dreams\nCoverOf\nPartisan’s Lament\nIndie Pop\n\n\nCoral Beats\nCoverOf\nHarvest Dance at Ler Valley\nPsychedelic Rock\n\n\nCoral Beats\nInStyleOf\nSacred Fragments\nSynthwave\n\n\nOceanbound\nLyricalReferenceTo\nBold Without Apology\nIndie Rock\n\n\nOceanbound\nLyricalReferenceTo\nAltitude of Mistakes\nAmericana\n\n\nHigh Tide Heartbeat\nInterpolatesFrom\nAddicted to Your Heartache\nSouthern Gothic Rock\n\n\nElectric Eel Love\nCoverOf\nThe Crown We Wear\nIndie Rock\n\n\nElectric Eel Love\nInStyleOf\nTwelve Bells of Augsburg\nPsychedelic Rock\n\n\nDriftwood Lullaby\nInStyleOf\nEchoes of Forgotten Light\nAlternative Rock\n\n\nSaltwater Hymn\nInStyleOf\nParallel Memories\nDream Pop\n\n\nMoon Over the Tide\nLyricalReferenceTo\nSilent Steps in the Forest’s Embrace\nAvant-Garde Folk\n\n\nMoon Over the Tide\nInterpolatesFrom\nDivergent Memories\nIndie Folk\n\n\nBarnacle Heart\nInStyleOf\nOur Inevitable Path\nIndie Folk\n\n\nFog & Fiddle\nInterpolatesFrom\nCoastal Whispers of Biscay\nAlternative Rock\n\n\nFog & Fiddle\nInStyleOf\nProvence Aria\nIndie Rock\n\n\nStormsong\nDirectlySamples\nExoskeleton Dissolve\nIndie Rock\n\n\nStormsong\nInStyleOf\nWhen the Bar Lights Go Up\nEmo/Pop Punk\n\n\nTidesworn Ballads\nCoverOf\nDreamscape of Judgment\nSymphonic Metal\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nGenre Filter (SelectInput / MultiSelect)\nInfluence Type (CheckboxGroupInput)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#oceanus-folk-influence-tracker",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Show the code\noceanus_releases &lt;- nodes %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\" | type == \"Album\"\n  ) %&gt;%\n  mutate(\n    year = as.integer(release_date)\n  ) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(year, type, name = \"n\")\n\ntotals_per_year &lt;- oceanus_releases %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(n), .groups = \"drop\")\n\nggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Song\" = \"#96b3c2\",\n      \"Album\" = \"#466575\"\n    )\n  ) +\n  geom_text(aes(label = n),\n          position = position_stack(vjust = 0.5),\n          size = 2, color = \"white\") +\n  geom_text(data = totals_per_year,\n          aes(x = factor(year), y = total + 1, label = total),\n          inherit.aes = FALSE,\n          size = 3) +\n  labs(\n    title = \"Number of Songs and Albums Released Over Time\",\n    subtitle = \"Oceanus Folk Genre\",\n    x = \"Year\",\n    y = \"Number of Releases\",\n    fill = \"Release Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)\n  )\n\n\n\n\n\n\n\n\n\n\nTotal PerformersTotal ReleasesYears Active\n\n\n\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  )\n\nperformer_edges &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% oceanus_songs$row_id)\n\nperformer_ids &lt;- unique(performer_edges$from)\n\nunique_performers &lt;- nodes %&gt;%\n  filter(row_id %in% performer_ids, type %in% c(\"Person\", \"MusicalGroup\")) %&gt;% \n  select(`Name`=name,`Type`=type)\n\nn_unique_performers &lt;- nrow(unique_performers)\nn_unique_performers\n\n[1] 572\n\n\n\n\n\nnrow(oceanus_releases)\n\n[1] 73\n\n\n\n\n\npaste(min(oceanus_releases$year),\"-\",max(oceanus_releases$year))\n\n[1] \"1992 - 2040\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_songs &lt;- nodes %&gt;% \n  filter(\n    genre == \"Oceanus Folk\",\n    type == \"Song\"| type == \"Album\"\n  ) %&gt;% \n  mutate(\n    year = as.integer(release_date)\n  )\n\noceanus_edges &lt;- edges %&gt;%\n  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)\n\nedges_with_year &lt;- oceanus_edges %&gt;%\n  left_join(oceanus_songs %&gt;% select(row_id, year), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(!is.na(year))\n\nedge_counts &lt;- edges_with_year %&gt;%\n  group_by(year, relation) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nggplot(edge_counts, aes(x = year, y = count, color = relation)) +\n  geom_line(size = 1) +\n  geom_point(size = 1.5) +\n  labs(\n    title = \"Oceanus Folk Influences Over Time\",\n    x = \"Year\",\n    y = \"Number of Songs\",\n    color = \"Edge Type\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title,\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes_subset &lt;- nodes %&gt;%\n  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = type,\n    title = genre,\n    shape = \"icon\",\n    icon.code = ifelse(genre == \"Oceanus Folk\", \"f13d\", \"f111\"),\n    icon.color = ifelse(genre == \"Oceanus Folk\", \"#123456\", \"#e3a6ab\")\n  )\n\noceanus_edges_subset &lt;- oceanus_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation, \n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(oceanus_nodes_subset, oceanus_edges_subset) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(!is.na(genre), genre != \"Oceanus Folk\")\n\ngenre_influence_counts &lt;- influenced_songs %&gt;%\n  group_by(genre) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(count))\n\nkable(genre_influence_counts, col.names = c(\"Genre\", \"Number of Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nGenre\nNumber of Songs Influenced by Oceanus Folk\n\n\n\n\nDesert Rock\n50\n\n\nDream Pop\n42\n\n\nIndie Folk\n42\n\n\nSpace Rock\n35\n\n\nSynthwave\n16\n\n\nAmericana\n11\n\n\nJazz Surf Rock\n8\n\n\nDoom Metal\n7\n\n\nSynthpop\n4\n\n\nAlternative Rock\n3\n\n\nIndie Rock\n3\n\n\nPost-Apocalyptic Folk\n3\n\n\nDarkwave\n2\n\n\nSymphonic Metal\n2\n\n\nEmo/Pop Punk\n1\n\n\nSpeed Metal\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\nnotable_influenced_songs &lt;- oceanus_edges %&gt;%\n  left_join(nodes %&gt;% select(row_id, notable, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(notable == TRUE)\n\nnotable_performers &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", to %in% notable_influenced_songs$from) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type), by = c(\"from\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  count(name, sort = TRUE)\n\nkable(head(notable_performers, 10), col.names = c(\"Artist\", \"Number of Notable Songs Influenced by Oceanus Folk\"))\n\n\n\n\n\nArtist\nNumber of Notable Songs Influenced by Oceanus Folk\n\n\n\n\nFilippo Pelli\n4\n\n\nGuiying Liao\n4\n\n\nLei Jin\n4\n\n\nXia Cui\n4\n\n\nXiuying Li\n4\n\n\nYan Zou\n4\n\n\nChao Xiao\n3\n\n\nCosmic Drift\n3\n\n\nIgnazio Pastine\n3\n\n\nJie Cui\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrecent &lt;- oceanus_songs %&gt;%\n  filter(year &gt;= 2023)\n\ninfluences &lt;- edges %&gt;%\n  filter(relation %in% influence_types, from %in% recent$row_id)\n\nnode_ids &lt;- unique(c(influences$from, influences$to))\n\nnetwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% node_ids) %&gt;%\n  mutate(\n    id = row_id,\n    label = name,\n    group = ifelse(row_id %in% recent$row_id, \"Oceanus Folk\", \"Influenced Song\"),\n    title = paste0(\"&lt;b&gt; Type: &lt;/b&gt;\", type, \"&lt;br&gt;&lt;b&gt;Genre: &lt;/b&gt;\", genre)\n  )\n\nnetwork_edges &lt;- influences %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation,\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(network_nodes, network_edges) %&gt;%\n  visEdges(smooth = TRUE) %&gt;% \n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;% \n  visLayout(randomSeed = 42) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ninfluenced_genres &lt;- influences %&gt;%\n  left_join(nodes %&gt;% select(row_id, genre, type), by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type == \"Song\", !is.na(genre), genre != \"Oceanus Folk\") %&gt;%\n  count(genre, sort = TRUE)\n\nkable(influenced_genres)\n\n\n\n\n\ngenre\nn\n\n\n\n\nIndie Folk\n58\n\n\nDream Pop\n10\n\n\nPsychedelic Rock\n10\n\n\nDoom Metal\n9\n\n\nDesert Rock\n8\n\n\nIndie Rock\n8\n\n\nSynthwave\n7\n\n\nAlternative Rock\n6\n\n\nAmericana\n3\n\n\nSpace Rock\n3\n\n\nSymphonic Metal\n3\n\n\nAvant-Garde Folk\n2\n\n\nBlues Rock\n2\n\n\nSouthern Gothic Rock\n2\n\n\nEmo/Pop Punk\n1\n\n\nIndie Pop\n1\n\n\nPost-Apocalyptic Folk\n1\n\n\nSynthpop\n1"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#rising-star-prediction-dashboard",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Show the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\na_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_a, \"gold\", color),\n    shape = ifelse(name == artist_name_a, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_a, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\na_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\na_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(a_nodes, a_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nb_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_b, \"gold\", color),\n    shape = ifelse(name == artist_name_b, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_b, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nb_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nb_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(b_nodes, b_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\n\nmember_of_groups &lt;- edges %&gt;%\n   filter(from == artist_index, relation == \"MemberOf\") %&gt;%\n   pull(to)\n\nmember_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from == artist_index)\n\ngroup_id &lt;- if (length(member_of_groups) &gt; 0) {\n  member_of_groups\n} else {\n  integer(0)\n}\nperformer_ids &lt;- c(artist_index, group_id)\n\nperformed_ids &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n   pull(to)\n\n\nperformed_works &lt;- nodes %&gt;%\n   filter(row_id %in% performed_ids,\n           (type == \"Song\" | type == \"Album\")) %&gt;%\n   mutate(year = as.integer(release_date)) %&gt;%\n   select(name, year, type, row_id, genre)\n\nc_nodes &lt;- bind_rows(\n  nodes %&gt;%\n    filter(row_id %in% c(artist_index, group_id)) %&gt;%\n    mutate(id = row_id,\n           label = name,\n           group = type),\n\n  performed_works %&gt;%\n    mutate(id = row_id,\n           title = paste0(\n             \"&lt;b&gt;Name:&lt;/b&gt; \", name,\n             \"&lt;br&gt;&lt;b&gt;Year:&lt;/b&gt; \", year,\n             \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type,\n             \"&lt;br&gt;&lt;b&gt;Genre:&lt;/b&gt; \", genre\n             ),\n           group = type,\n           color = node_colors[type])\n) %&gt;%\n  mutate(\n    color = ifelse(name == artist_name_c, \"gold\", color),\n    shape = ifelse(name == artist_name_c, \"star\", \"dot\"),\n    size  = ifelse(name == artist_name_c, 30, 15)\n  )\n\nmember_vis_edges &lt;- member_edges %&gt;%\n  mutate(label = \"MemberOf\",color = edge_colors[relation] %&gt;% unname())\n\nperformers &lt;- edges %&gt;%\n   filter(relation == \"PerformerOf\", from %in% performer_ids, to %in% performed_works$row_id)\n\n\nc_edges &lt;- performers %&gt;%\n   mutate(\n    from = from,\n    to = to,\n    arrows = \"to\",\n    title = relation)\n\nc_edges &lt;- bind_rows(member_vis_edges, performers) %&gt;%\n  mutate(\n    color = edge_colors[relation]\n  )\n\nvisNetwork(c_nodes, c_edges) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n   visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\n\ngroup_edges &lt;- edges %&gt;%\n  filter(relation == \"MemberOf\", from %in% artist_nodes$row_id)\n\ngroup_artist_map &lt;- group_edges %&gt;%\n  left_join(artist_nodes, by = c(\"from\" = \"row_id\")) %&gt;%\n  select(group_id = to, artist_name = name)\n\nperformer_ids &lt;- c(artist_nodes$row_id, group_artist_map$group_id)\n\nperformed_works &lt;- edges %&gt;%\n  filter(relation == \"PerformerOf\", from %in% performer_ids) %&gt;%\n  left_join(nodes, by = c(\"to\" = \"row_id\")) %&gt;%\n  filter(type %in% c(\"Song\", \"Album\")) %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    artist_name = case_when(\n      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],\n      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],\n      TRUE ~ NA_character_)\n  )\n\nrelease_counts &lt;- performed_works %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  count(artist_name, release_year)\n\nggplot(release_counts, aes(x = release_year, y = n)) +\n  geom_line(color = \"#96b3c2\", linewidth = 1.2) +\n  geom_point(color = \"#466575\", size = 2) +\n  facet_wrap(~ artist_name, nrow = 1, scales = \"free_x\") + \n  labs(\n    title = \"Songs or Albums Release Timeline\",\n    x = \"Year\",\n    y = \"Number of Releases\"\n  ) +\n  scale_x_continuous(\n    breaks = pretty,\n    guide = guide_axis(angle = 45)\n  ) +\n  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +\n  theme_classic() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 12),\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution) %&gt;%\n  pull(to)\n\ncontribution_edges &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% contribution, to %in% artist_works)\n\ncontribution_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% c(artist_index, artist_works)) %&gt;%\n  mutate(\n    id = row_id,\n    label = ifelse(row_id == artist_index, name, NA),\n    group = type,\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type),\n    shape = ifelse(row_id == artist_index, \"star\", \"dot\"),\n    color = ifelse(row_id == artist_index, \"gold\", node_colors[type]),\n    size  = ifelse(row_id == artist_index, 30, 15)\n  )\n\ncontribution_edges_vis &lt;- contribution_edges %&gt;%\n  mutate(\n    from = from,\n    to = to,\n    title = paste(\"&lt;b&gt;Relation: &lt;/b&gt;\",relation),\n    arrows = \"to\",\n    color = edge_colors[relation]\n  )\n\nvisNetwork(contribution_nodes, contribution_edges_vis) %&gt;%\n  visEdges(smooth = TRUE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncontribution &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncontribution_counts &lt;- edges %&gt;%\n  filter(from %in% artist_nodes$row_id, relation %in% contribution) %&gt;%\n  left_join(artist_nodes %&gt;% select(row_id, artist_name = name), by = c(\"from\" = \"row_id\")) %&gt;%\n  count(artist_name, relation) %&gt;%\n  pivot_wider(names_from = relation, values_from = n, values_fill = 0)\n\nkable(contribution_counts)\n\n\n\n\n\nartist_name\nComposerOf\nLyricistOf\nProducerOf\n\n\n\n\nJay Walters\n6\n7\n17\n\n\nSailor Shift\n0\n21\n0\n\n\nYang Wan\n2\n4\n9\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_a &lt;- \"Sailor Shift\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_a)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_a) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"star\",\n    color = \"gold\",\n    level = 1\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_b &lt;- \"Yang Wan\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_b)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_b) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_name_c &lt;- \"Jay Walters\"\n \nduplicates &lt;- nodes %&gt;%\n  filter(name == artist_name_c)\n\n\nif (nrow(duplicates) &gt; 1) {\n  canonical_id &lt;- duplicates$row_id[1]\n  other_ids &lt;- duplicates$row_id[-1]\n  other_ids\n\n  edges &lt;- edges %&gt;%\n    mutate(\n      from = ifelse(from %in% other_ids, canonical_id, from),\n      to   = ifelse(to   %in% other_ids, canonical_id, to)\n    )\n\n  nodes &lt;- nodes %&gt;%\n    filter(!(row_id %in% other_ids))\n}\n\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\nartist_index &lt;- nodes %&gt;%\n   filter(name == artist_name_c) %&gt;%\n   pull(row_id)\n\nartist_works &lt;- edges %&gt;%\n  filter(from == artist_index, relation %in% collab_types) %&gt;%\n  pull(to)\n\ncollab_edges &lt;- edges %&gt;%\n  filter(to %in% artist_works, relation %in% collab_types)\n\nartist_node &lt;- nodes %&gt;%\n  filter(row_id == artist_index) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Artist\",\n    shape = \"icon\",\n    level = 1,\n    color = \"gold\",\n    icon.code = \"f005\",\n    icon.color = \"gold\",\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\nwork_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% artist_works) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Work\",\n    shape = \"dot\",\n    level = 2,\n    color = node_colors[type],\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollaborator_ids &lt;- setdiff(collab_edges$from, artist_index)\n\ncollaborator_nodes &lt;- nodes %&gt;%\n  filter(row_id %in% collaborator_ids) %&gt;%\n  transmute(\n    id = row_id,\n    label = name,\n    group = \"Collaborator\",\n    shape = \"icon\",\n    color = node_colors[type],\n    level = 3,\n    icon.code = ifelse(type == \"Person\", \"f007\", \"f0c0\"),\n    icon.color = ifelse(type == \"Person\", node_colors[\"Person\"], node_colors[\"MusicalGroup\"]),\n    title = paste0(\"&lt;b&gt;Name:&lt;/b&gt; \", name, \"&lt;br&gt;&lt;b&gt;Type:&lt;/b&gt; \", type)\n  )\n\ncollab_nodes &lt;- bind_rows(artist_node, work_nodes, collaborator_nodes)\n\ncollab_edges_vis &lt;- collab_edges %&gt;%\n  mutate(\n    arrows = \"to\",\n    color = edge_colors[relation] %&gt;% unname()\n  )\n\nvisNetwork(collab_nodes, collab_edges_vis) %&gt;%\n  visNodes(shape = \"dot\", size = 20) %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;% \n  addFontAwesome() %&gt;% \n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncollab_types &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\n\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\ncollab_summary &lt;- map_dfr(artist_names, function(name) {\n  artist_id &lt;- artist_nodes %&gt;%\n    filter(name == !!name) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation %in% collab_types) %&gt;%\n    pull(to)\n\n  collab_ids &lt;- edges %&gt;%\n    filter(to %in% works, relation %in% collab_types, from != artist_id) %&gt;%\n    pull(from) %&gt;%\n    unique()\n\n  nodes %&gt;%\n    filter(row_id %in% collab_ids) %&gt;%\n    count(type) %&gt;%\n    mutate(artist = name)\n})\n\ncollab_summary &lt;- collab_summary %&gt;%\n  pivot_wider(names_from = type, values_from = n, values_fill = 0) %&gt;%\n  select(artist, Person, MusicalGroup)\n\nkable(collab_summary)\n\n\n\n\n\nartist\nPerson\nMusicalGroup\n\n\n\n\nSailor Shift\n40\n8\n\n\nYang Wan\n76\n2\n\n\nJay Walters\n15\n1\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nartist_names &lt;- c(artist_name_a, artist_name_b, artist_name_c)\nartist_nodes &lt;- nodes %&gt;%\n  filter(type == \"Person\", name %in% artist_names)\n\nrelease_charted_summary &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% filter(name == artist_label) %&gt;% pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      artist = artist_label,\n      charted_status = ifelse(notable, \"Charted\", \"Uncharted\")\n    ) %&gt;%\n    count(artist, charted_status)\n})\n\nggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +\n  geom_bar(stat = \"identity\") + \n  labs(\n    title = \"Charted vs Uncharted Releases per Artist\",\n    x = \"Artist\",\n    y = \"Number of Releases\",\n    fill = \"Status\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Charted\" = \"#466575\",\n      \"Uncharted\" = \"#96b3c2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    plot.background = theme$background,\n    panel.background = theme$panel,\n    panel.grid.major = theme$grid,\n    text = element_text(size = theme$size),\n    plot.title = theme$title\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nrelease_charted_table &lt;- map_dfr(artist_names, function(artist_label) {\n  artist_id &lt;- artist_nodes %&gt;% \n    filter(name == artist_label) %&gt;%\n    pull(row_id)\n\n  works &lt;- edges %&gt;%\n    filter(from == artist_id, relation == \"PerformerOf\") %&gt;%\n    pull(to)\n\n  nodes %&gt;%\n    filter(row_id %in% works, type %in% c(\"Song\", \"Album\")) %&gt;%\n    mutate(\n      `Artist Name` = artist_label,\n      charted = ifelse(notable, \"Yes\", \"No\"),\n      Year = as.integer(release_date)\n    ) %&gt;%\n    select(`Artist Name`, name, Year, type, charted)\n})\n\nkable(release_charted_table)\n\n\n\n\n\n\n\n\n\n\n\n\nArtist Name\nname\nYear\ntype\ncharted\n\n\n\n\nSailor Shift\nTidal Pop Waves\n2028\nAlbum\nYes\n\n\nSailor Shift\nSalty Dreams\n2030\nAlbum\nYes\n\n\nSailor Shift\nThe Current & The Chord\n2032\nAlbum\nYes\n\n\nSailor Shift\nCoral Beats\n2034\nAlbum\nYes\n\n\nSailor Shift\nTides & Ballads\n2036\nAlbum\nYes\n\n\nSailor Shift\nOceanbound\n2038\nAlbum\nYes\n\n\nSailor Shift\nEchoes of the Deep\n2040\nAlbum\nYes\n\n\nSailor Shift\nHigh Tide Heartbeat\n2028\nSong\nNo\n\n\nSailor Shift\nElectric Eel Love\n2028\nSong\nYes\n\n\nSailor Shift\nSun-Drenched Daydream\n2028\nSong\nNo\n\n\nSailor Shift\nChord of the Deep\n2028\nSong\nNo\n\n\nSailor Shift\nHeart of the Habitat\n2030\nSong\nNo\n\n\nSailor Shift\nReef Rhythm\n2030\nSong\nNo\n\n\nSailor Shift\nDriftwood Lullaby\n2030\nSong\nNo\n\n\nSailor Shift\nSaltwater Hymn\n2032\nSong\nNo\n\n\nSailor Shift\nMoon Over the Tide\n2034\nSong\nYes\n\n\nSailor Shift\nInto the Current\n2034\nSong\nNo\n\n\nSailor Shift\nBarnacle Heart\n2034\nSong\nNo\n\n\nSailor Shift\nFog & Fiddle\n2036\nSong\nYes\n\n\nSailor Shift\nThe Fisherman’s Prayer\n2036\nSong\nNo\n\n\nSailor Shift\nStormsong\n2038\nSong\nYes\n\n\nSailor Shift\nSalt in My Veins\n2040\nSong\nNo\n\n\nSailor Shift\nThe Last Mariner\n2040\nSong\nNo\n\n\nSailor Shift\nTidesworn Ballads\n2031\nAlbum\nYes\n\n\nSailor Shift\nSubmerged Sonatas\n2031\nAlbum\nYes\n\n\nSailor Shift\nSeashell Serenade\n2030\nSong\nYes\n\n\nYang Wan\nSilent Projectiles\n2027\nSong\nYes\n\n\nYang Wan\nEchoes of Naomi\n2020\nSong\nYes\n\n\nYang Wan\nBananal’s Gentle Whispers\n2020\nSong\nYes\n\n\nYang Wan\nTender Embrace\n1994\nSong\nYes\n\n\nYang Wan\nRakkauden Varjossa (In the Shadow of Love)\n2013\nSong\nYes\n\n\nYang Wan\nPerfect Harmony\n2003\nSong\nYes\n\n\nYang Wan\nUrban Haze\n2022\nSong\nYes\n\n\nYang Wan\nWhispers in the Unknown\n2026\nSong\nYes\n\n\nYang Wan\nMoments Between Heartbeats\n2023\nSong\nYes\n\n\nYang Wan\nWhispers Between Rooms\n2022\nAlbum\nYes\n\n\nYang Wan\nScales and Streetlights\n2000\nAlbum\nYes\n\n\nYang Wan\nCanonical Refrain\n2015\nSong\nYes\n\n\nYang Wan\nRingtone Requiem\n2013\nSong\nYes\n\n\nYang Wan\nThirteen Stars Rising\n2023\nSong\nYes\n\n\nYang Wan\nEchoes of Armenia’s Crown\n2021\nSong\nYes\n\n\nYang Wan\nSilent Steps of Summer’s Daughter\n2001\nAlbum\nYes\n\n\nYang Wan\nThe Exile’s Compass\n2028\nAlbum\nNo\n\n\nJay Walters\nMechanical Memoirs\n1996\nSong\nYes\n\n\nJay Walters\nRipples of Feathered Whispers\n1984\nSong\nYes\n\n\nJay Walters\nTrenches of Sorrow\n2008\nAlbum\nYes\n\n\nJay Walters\nEchoes from the Vatican Walls\n2004\nSong\nYes\n\n\nJay Walters\nSilent Walls\n1998\nSong\nYes\n\n\nJay Walters\nPermanent Horizon\n2006\nSong\nYes\n\n\nJay Walters\nTemporal Horizon\n1994\nSong\nYes\n\n\nJay Walters\nTurning the Page\n1992\nAlbum\nYes\n\n\nJay Walters\nLongitude of Longing\n1994\nSong\nYes\n\n\nJay Walters\nThe Pound of Flesh Sonata\n2009\nSong\nYes\n\n\nJay Walters\nWhispers of Sacred Silence\n2021\nAlbum\nYes\n\n\nJay Walters\nMannequin’s Whisper\n2017\nSong\nYes\n\n\nJay Walters\nHarvest Moon’s Embrace\n1995\nAlbum\nYes\n\n\nJay Walters\nAqua Mechanica\n2000\nSong\nYes\n\n\nJay Walters\nYolun Yarısı (Halfway Home)\n1999\nSong\nYes\n\n\nJay Walters\nBroken Compass Heart\n1997\nSong\nYes\n\n\n\n\n\n\n\n\n\n\n\nIdeas\n\n\n\nBased on the network structure, the following variables can be exposed as user inputs:\n\nArtist A, Artist B, Artist C (selectInput)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\noceanus_nodes &lt;- nodes %&gt;%\n  filter(genre == \"Oceanus Folk\", type %in% c(\"Song\", \"Album\")) %&gt;%\n  pull(row_id)\n\noceanus_performers &lt;- edges %&gt;%\n  filter(to %in% oceanus_nodes, relation == \"PerformerOf\") %&gt;%\n  pull(from) %&gt;% unique()\n\ncollabs &lt;- edges %&gt;%\n  filter(relation %in% c(\"ComposerOf\", \"LyricistOf\", \"ProducerOf\"),\n         from %in% oceanus_performers) %&gt;%\n  group_by(from) %&gt;%\n  summarise(Collabs = n_distinct(to), Creative = n(), .groups = \"drop\")\n\nrelease_info &lt;- edges %&gt;%\n  filter(from %in% oceanus_performers, relation == \"PerformerOf\", to %in% oceanus_nodes) %&gt;%\n  left_join(nodes %&gt;% select(row_id, release_date, notable), by = c(\"to\" = \"row_id\")) %&gt;%\n  mutate(release_year = as.integer(release_date)) %&gt;%\n  filter(!is.na(release_year)) %&gt;%\n  left_join(nodes %&gt;% select(row_id, name, type) %&gt;%\n              rename(artist_id = row_id, artist_name = name),\n            by = c(\"from\" = \"artist_id\")) %&gt;%\n  filter(type %in% c(\"Person\", \"MusicalGroup\"))\n\ncurrent_year &lt;- 2040\n\ntable &lt;- release_info %&gt;%\n  group_by(artist_name, from) %&gt;%\n  summarise(\n    First = min(release_year, na.rm = TRUE),\n    Total = n(),\n    Active = n_distinct(release_year),\n    Charted = sum(notable == TRUE, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(First &gt;= 2030, Total &gt;= 3) %&gt;%\n  left_join(collabs, by = \"from\") %&gt;%\n  mutate(\n    Inactivity = (current_year - First + 1) - Active,\n    Collabs = replace_na(Collabs, 0),\n    Creative = replace_na(Creative, 0),\n    Freshness = exp(-Inactivity * 0.4),\n    ChartedRatio = Charted / Total,\n    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)\n  ) %&gt;%\n  arrange(desc(Score))\n\nkable(table, col.names = c(\"Artist\", \"ID\", \"First Release\", \"Total Works\", \"Active Years\",\n                           \"Charted\", \"Collabs\", \"Creative\", \"Inactivity\", \"Freshness\",\n                           \"Charted Ratio\", \"Rising Star Score\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtist\nID\nFirst Release\nTotal Works\nActive Years\nCharted\nCollabs\nCreative\nInactivity\nFreshness\nCharted Ratio\nRising Star Score\n\n\n\n\nThe Brine Choir\n17047\n2034\n7\n3\n4\n1\n1\n4\n0.2018965\n0.5714286\n3.59\n\n\nSelkie’s Hollow\n17121\n2037\n5\n1\n2\n0\n0\n3\n0.3011942\n0.4000000\n3.31\n\n\nCopper Canyon Ghosts\n17362\n2034\n7\n2\n7\n0\n0\n5\n0.1353353\n1.0000000\n2.98\n\n\nBeatrice Albright\n17350\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nDaniel O’Connell\n17356\n2031\n8\n3\n8\n3\n3\n7\n0.0608101\n1.0000000\n1.80\n\n\nTidal Reverie\n16988\n2033\n5\n2\n2\n0\n0\n6\n0.0907180\n0.4000000\n1.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, we will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.\n\n\n\n\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\npacman::p_load(plotly, ggtern, tidyverse)\n\npackage 'DEoptimR' successfully unpacked and MD5 sums checked\npackage 'tensorA' successfully unpacked and MD5 sums checked\npackage 'robustbase' successfully unpacked and MD5 sums checked\npackage 'bayesm' successfully unpacked and MD5 sums checked\npackage 'compositions' successfully unpacked and MD5 sums checked\npackage 'latex2exp' successfully unpacked and MD5 sums checked\npackage 'proto' successfully unpacked and MD5 sums checked\npackage 'hexbin' successfully unpacked and MD5 sums checked\npackage 'ggtern' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpmufJx2\\downloaded_packages\n\n\n\n\n\n\n\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\n\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\nNext, we use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)\n\n\n\n\n\n\n\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#overview",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, we will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#installing-and-launching-r-packages",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "For this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\npacman::p_load(plotly, ggtern, tidyverse)\n\npackage 'DEoptimR' successfully unpacked and MD5 sums checked\npackage 'tensorA' successfully unpacked and MD5 sums checked\npackage 'robustbase' successfully unpacked and MD5 sums checked\npackage 'bayesm' successfully unpacked and MD5 sums checked\npackage 'compositions' successfully unpacked and MD5 sums checked\npackage 'latex2exp' successfully unpacked and MD5 sums checked\npackage 'proto' successfully unpacked and MD5 sums checked\npackage 'hexbin' successfully unpacked and MD5 sums checked\npackage 'ggtern' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpmufJx2\\downloaded_packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#data-preparation",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "For the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\n\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\nNext, we use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#plotting-ternary-diagram-with-r",
    "title": "Hands on Exercise 8c",
    "section": "",
    "text": "Use ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design.\n\n\n\n\nOur project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, we will be providing the prototype module report and the UIs designed for the above applications.\n\n\n\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)\n\n\n\n\n\ndata &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nThe storyboard is designed to visually represent the user’s journey within the R Shiny dashboard applications. It acts as a bridge between research insights and user interaction, illustrating how findings are translated into visual and interactive elements. The UI design and interactive features are thoughtfully developed to enable seamless exploration and analysis of data including network components helping users identify key patterns and trace the rising of artist in the music industry.\nThe prototype is organized into three main focus areas:\n\nSailor Shift’s Career Explorer\nOceanus Folk Influence Tracker\nRising Star Prediction Dashboard\n\n\n\n\nThis page provides an overview of Sailor Shift’s music career, summarizing key metrics such as active years, total releases, collaborators, creative roles, charted songs or albums, and chart success ratio. It serves as the entry point for exploring her timeline, collaborations, and influence network through the Shiny dashboard.\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#the-task",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can run and returns the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications,\nTo select the appropriate Shiny UI components for exposing the parameters determined above, and\nTo include a section called UI design for the different components of the UIs for the proposed design."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#getting-started",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#getting-started",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Our project will be using data from the VAST Challenge 2025 Mini-Challenge 1.\nSpecifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.\nIn addition, we plan to develop the following Shiny applications:\n\nShiny App 1: Sailor Shift’s Career Explorer\nShiny App 2: Oceanus Folk Influence Tracker\nShiny App 3: Rising Star Prediction Dashboard\n\nFor this take-home exercise, we will be providing the prototype module report and the UIs designed for the above applications."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#r-packages",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,\n               kableExtra, showtext,lubridate)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#dataset",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#dataset",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "data &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#storyboard",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#storyboard",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "The storyboard is designed to visually represent the user’s journey within the R Shiny dashboard applications. It acts as a bridge between research insights and user interaction, illustrating how findings are translated into visual and interactive elements. The UI design and interactive features are thoughtfully developed to enable seamless exploration and analysis of data including network components helping users identify key patterns and trace the rising of artist in the music industry.\nThe prototype is organized into three main focus areas:\n\nSailor Shift’s Career Explorer\nOceanus Folk Influence Tracker\nRising Star Prediction Dashboard"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#section-one---sailor-shifts-career-explorer",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_Final.html#section-one---sailor-shifts-career-explorer",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "This page provides an overview of Sailor Shift’s music career, summarizing key metrics such as active years, total releases, collaborators, creative roles, charted songs or albums, and chart success ratio. It serves as the entry point for exploring her timeline, collaborations, and influence network through the Shiny dashboard.\n\nCode chunk below shows the simplified version of UI and Server components in R Shiny application for Overview sub-tab."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, we will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, we will learn how to create correlation matrix using pairs() of R Graphics. Next, we will learn how to plot corrgram using corrplot package of R. Lastly, we will learn how to create an interactive correlation matrix using plotly R.\n\n\n\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\n\n\nThere are more than one way to build scatterplot matrix with R. In this section, we will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore we continue to the next step, we should read the syntax description of pairsfunction.\n\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\n\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, we can display the upper half of the correlation matrix by using the code chunk below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\n\n\n\n\n\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, we will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\n\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\n\n\n\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package.\n\n\n\n\n\n\n\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\n\n\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\nEllipseNumberColorShade\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"number\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"color\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"shade\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n\ntl.cex\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.cex = 0.8)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\n\n\n\n\n\n\n\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#overview",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, we will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, we will learn how to create correlation matrix using pairs() of R Graphics. Next, we will learn how to plot corrgram using corrplot package of R. Lastly, we will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#installing-and-launching-r-packages",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "ggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-and-preparing-the-data-set",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "In this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-correlation-matrix-pairs-method",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "There are more than one way to build scatterplot matrix with R. In this section, we will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore we continue to the next step, we should read the syntax description of pairsfunction.\n\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\n\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, we can display the upper half of the correlation matrix by using the code chunk below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "One of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, we will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\n\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-multiple-plots",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "Since ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "In this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\n\n\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\nEllipseNumberColorShade\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"number\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"color\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"shade\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n\ntl.cex\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.cex = 0.8)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#working-with-mixed-layout",
    "title": "Hands on Exercise 9b",
    "section": "",
    "text": "With corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\n\n\n\n\n\n\n\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html",
    "title": "Hands on Exercise 8b",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap.\n\n\nBy the end of this hands-on exercise, we will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "title": "Hands on Exercise 8b",
    "section": "",
    "text": "By the end of this hands-on exercise, we will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "title": "Hands on Exercise 8b",
    "section": "14.1 The data",
    "text": "14.1 The data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System.\n ## Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands on Exercise 8b",
    "section": "14.2 Creating a sf data frame from an aspatial data frame",
    "text": "14.2 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\n\n\n\n\n\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\n\n\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nWe can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands on Exercise 8b",
    "section": "15.1 It all started with an interactive point symbol map",
    "text": "15.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n           size = 1,\n           col = \"black\",\n           lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "title": "Hands on Exercise 8b",
    "section": "15.2 Lets make it proportional",
    "text": "15.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "title": "Hands on Exercise 8b",
    "section": "15.3 Lets give it a different colour",
    "text": "15.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#faceted-plots",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#faceted-plots",
    "title": "Hands on Exercise 8b",
    "section": "15.4 Faceted plots",
    "text": "15.4 Faceted plots\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1) + \n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#all-about-tmap-package",
    "title": "Hands on Exercise 8b",
    "section": "16.1 All about tmap package",
    "text": "16.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#geospatial-data-wrangling-1",
    "title": "Hands on Exercise 8b",
    "section": "16.2 Geospatial data wrangling",
    "text": "16.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-wrangling",
    "title": "Hands on Exercise 8b",
    "section": "16.3 Data wrangling",
    "text": "16.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html",
    "title": "Hands on Exercise 9c",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, we will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data.\n\n\n\nNext, we will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\npackage 'iterators' successfully unpacked and MD5 sums checked\npackage 'permute' successfully unpacked and MD5 sums checked\npackage 'ca' successfully unpacked and MD5 sums checked\npackage 'foreach' successfully unpacked and MD5 sums checked\npackage 'gclus' successfully unpacked and MD5 sums checked\npackage 'qap' successfully unpacked and MD5 sums checked\npackage 'registry' successfully unpacked and MD5 sums checked\npackage 'TSP' successfully unpacked and MD5 sums checked\npackage 'vegan' successfully unpacked and MD5 sums checked\npackage 'seriation' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpojwNKx\\downloaded_packages\n\n\npackage 'dendextend' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpojwNKx\\downloaded_packages\n\n\npackage 'assertthat' successfully unpacked and MD5 sums checked\npackage 'egg' successfully unpacked and MD5 sums checked\npackage 'heatmaply' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpojwNKx\\downloaded_packages\n\n\n\n\n\nIn this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\n\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country\n\n\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\n\n\n\n\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, we will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\n\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n\n\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively.\n\n\n\n\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nIn this section, we will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\n\n\n\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\n\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\n\n\n\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#overview",
    "title": "Hands on Exercise 9c",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, we will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#installing-and-launching-r-packages",
    "title": "Hands on Exercise 9c",
    "section": "",
    "text": "Next, we will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\npackage 'iterators' successfully unpacked and MD5 sums checked\npackage 'permute' successfully unpacked and MD5 sums checked\npackage 'ca' successfully unpacked and MD5 sums checked\npackage 'foreach' successfully unpacked and MD5 sums checked\npackage 'gclus' successfully unpacked and MD5 sums checked\npackage 'qap' successfully unpacked and MD5 sums checked\npackage 'registry' successfully unpacked and MD5 sums checked\npackage 'TSP' successfully unpacked and MD5 sums checked\npackage 'vegan' successfully unpacked and MD5 sums checked\npackage 'seriation' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpojwNKx\\downloaded_packages\n\n\npackage 'dendextend' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpojwNKx\\downloaded_packages\n\n\npackage 'assertthat' successfully unpacked and MD5 sums checked\npackage 'egg' successfully unpacked and MD5 sums checked\npackage 'heatmaply' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Olivia\\AppData\\Local\\Temp\\RtmpojwNKx\\downloaded_packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#importing-and-preparing-the-data-set",
    "title": "Hands on Exercise 9c",
    "section": "",
    "text": "In this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\n\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country\n\n\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#static-heatmap",
    "title": "Hands on Exercise 9c",
    "section": "",
    "text": "There are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, we will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\n\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n\n\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#creating-interactive-heatmap",
    "title": "Hands on Exercise 9c",
    "section": "",
    "text": "heatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nIn this section, we will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\n\n\n\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\n\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\n\n\n\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html",
    "title": "Hands on Exercise 9d",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, we will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package, and\nplotting interactive parallel coordinates plots by using parallelPlot package.\n\n\n\n\nFor this exercise, the GGally, parallelPlot and tidyverse packages will be used.\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\n\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\n\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\n\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\n\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))\n\n\n\n\n\n\n\n\n\n\n\n\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\n\n\n\n\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\n\n\nggparcoord() of GGally package\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#overview",
    "title": "Hands on Exercise 9d",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, we will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#installing-and-launching-r-packages",
    "title": "Hands on Exercise 9d",
    "section": "",
    "text": "For this exercise, the GGally, parallelPlot and tidyverse packages will be used.\n\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#data-preparation",
    "title": "Hands on Exercise 9d",
    "section": "",
    "text": "In this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands on Exercise 9d",
    "section": "",
    "text": "In this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\n\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\n\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\n\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\n\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands on Exercise 9d",
    "section": "",
    "text": "parallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\n\n\n\n\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#references",
    "title": "Hands on Exercise 9d",
    "section": "",
    "text": "ggparcoord() of GGally package\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html",
    "title": "Hands on Exercise 9e",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, we will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, we will learn how to plot static treemap by using treemap package. In the third section, we will learn how to design interactive treemap by using d3treeR package.\n\n\n\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\n\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\nThe code chunk below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\n\n\n\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n\n\n\n\n\n\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\n\n\n\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\n\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n\n\n\n\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\n\n\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad the devtools library and install the package found in github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nNow we are ready to launch d3treeR package\n\n\nlibrary(d3treeR)\n\n\n\n\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#overview",
    "title": "Hands on Exercise 9e",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, we will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, we will learn how to plot static treemap by using treemap package. In the third section, we will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#installing-and-launching-r-packages",
    "title": "Hands on Exercise 9e",
    "section": "",
    "text": "pacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#data-wrangling",
    "title": "Hands on Exercise 9e",
    "section": "",
    "text": "In this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\nThe code chunk below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\n\n\n\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-with-treemap-package",
    "title": "Hands on Exercise 9e",
    "section": "",
    "text": "treemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n\n\n\n\n\n\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\n\n\n\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\n\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n\n\n\n\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\n\n\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-using-treemapify-package",
    "title": "Hands on Exercise 9e",
    "section": "",
    "text": "treemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands on Exercise 9e",
    "section": "",
    "text": "Load the devtools library and install the package found in github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nNow we are ready to launch d3treeR package\n\n\nlibrary(d3treeR)\n\n\n\n\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  }
]