---
title: "Hands on Exercise 3a"
description : Programming Interactive Data Visualisation with R
date: 2025-04-29
date-modified: "last-modified"
execute:
  warning: false
  freeze: true
format:
  html:
    number-offset: 2
---

# Programming Interactive Data Visualisation with R

## Learning Outcome

In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotly** packages.

## Getting Started

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.
-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.
-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.

```{r}
pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) 
```

## Importing Data

In this section, *Exam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Interactive Data Visualisation - ggiraph methods

[ggiraph](https://davidgohel.github.io/ggiraph/index.html) is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with [**ggplot geometries**](https://davidgohel.github.io/ggiraph/reference/index.html#section-interactive-geometries) that can understand three arguments:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.
-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.
-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

### Tooltip effect with `tooltip` aesthetic

The example below demonstrates a typical code chunk for creating an interactive statistical graph using the **ggiraph** package. The code consists of two main parts: first, a ggplot object is created. Then, the [**girafe()**](https://davidgohel.github.io/ggiraph/reference/girafe.html) function from **ggiraph** is used to transform it into an interactive SVG object.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)+ theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

::: {.callout-note appearance="simple"}
By hovering the mouse pointer on an data point of interest, the studentâ€™s ID will be displayed.
:::

::: {.callout-note appearance="simple"}
Notice that two steps are involved.

-   First, an interactive version of ggplot2 geom (i.e. [`geom_dotplot_interactive()`](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will be used to create the basic graph.

-   Then, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.
:::

#### Displaying Multiple Information on Tooltip

The content of the tooltip can be customised by including a list object as shown in the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

exam_data$tooltip <- c(paste0("Name = ", exam_data$ID, "\n Class = ", exam_data$CLASS)) #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,breaks = NULL) + theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

#### Customising Tooltip Style

Code chunk below uses [`opts_tooltip()`](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customize tooltip rendering by add css declarations.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

tooltip_css <- "background-color:white;
font-style:bold; color:black;"

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,breaks = NULL) +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    
    opts_tooltip(    
      css = tooltip_css))
)                                             
```

::: {.callout-note appearance="simple"}
Refer to [**Customizing girafe objects**](https://www.ardata.fr/ggiraph-book/customize.html) to learn more about how to customise ggiraph objects.
:::

#### Displaying Statistics on Tooltip

The code chunk below demonstrates a more advanced method for customizing tooltips. In this example, a function is used to calculate the 90% confidence interval of the mean, and the resulting statistics are then shown within the tooltip.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  ) + theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)                     
```

### Hover Effect with `data_id` Aesthetic

The code chunk below demonstrates the second interactive feature provided by ggiraph, known as **data_id**. In this example, elements linked by the same **data_id** are highlighted simultaneously when hovered over.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL) +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)                          

```

::: {.callout-note appearance="simple"}
The default value of the hover css is *hover_css = "fill:orange;"*.
:::

#### Styling Hover Effect

In the code chunk below, CSS styles are applied to customize the appearance of the highlighting effect.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL, breaks = NULL) +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6 * 0.618,
  options = list(
    opts_hover(css = "fill: #F2C6DE; stroke: none;"),
    opts_hover_inv(css = "opacity: 0.2;")
  )
)                      
```

#### Combining Tooltip and Hover Effect

```{r}
#| code-fold: true
#| code-summary: "Show Code"

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, 
        data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot",
    fill = "#DBCDF0",
    color = "#BFAECC") +               
  scale_y_continuous(NULL,breaks = NULL) + 
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #F2C6DE; stroke: none;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)   
```

### Click effect with `onclick`

The `onclick` argument in ggiraph enables clickable elements that link to web pages, adding interactive hyperlink functionality.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,breaks = NULL) + 
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))


girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)
```

::: {.callout-note appearance="simple"}
Web document link with a data object will be displayed on the web browser upon mouse click.
:::

### Coordinated Multiple Views with ggiraph

::: {.callout-note appearance="simple"}
patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.
:::

```{r}
#| code-fold: true
#| code-summary: "Show Code"

p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL) + 
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL) +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

::: {.callout-note appearance="simple"}
-   When a data point is selected in the dotplot, the corresponding ID will also be highlighted in the second data visualisation.

-   The `data_id` aesthetic is **critical** to link observations between plots and the `tooltip` aesthetic is **optional** but nice to have when mouse over a point.
:::

## Interactive Data Visualisation - plotly methods

Plotly's R graphing library create interactive web graphics from **ggplot2** graphs and/or a custom interface to the (MIT-licensed) JavaScript library [**plotly.js**](https://plotly.com/javascript/) inspired by the grammar of graphics.

Different from other plotly platform, plot.R is free and open source.

There are two main approaches to creating interactive graphs with the plotly package:

-   Using the `plot_ly()` function to build the plot directly, and

-   Converting an existing ggplot2 object into an interactive plot with `ggplotly()`

### Creating an Interactive Scatter Plot: plot_ly() Method

```{r}
#| code-fold: true
#| code-summary: "Show Code"

plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

### Working with Visual Variable: plot_ly() Method

**color** argument is mapped to a qualitative visual variable.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

### Creating an Interactive Scatter Plot: ggplotly() Method

Interactive scatter plot by using `ggplotly()`.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

### Coordinated Multiple Views with plotly

-   [`highlight_key()`](https://www.rdocumentation.org/packages/plotly/versions/4.9.2/topics/highlight_key) of **plotly** package is used as shared data.
-   two scatterplots will be created by using ggplot2 functions.
-   lastly, [*subplot()*](https://plotly.com/r/subplots/) of **plotly** package is used to place them next to each other side-by-side.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

### Interactive Data Visualisation - crosstalk methods!

[Crosstalk](https://rstudio.github.io/crosstalk/index.html) is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

#### Interactive Data Table: DT package

-   A wrapper of the JavaScript Library [DataTables](https://datatables.net/)

-   Data objects in R can be rendered as HTML tables using the JavaScript library 'DataTables' (typically via R Markdown or Shiny).

```{r out.width = "80%", out.height = "50px"}
DT::datatable(exam_data, class= "compact")
```

#### Linked Brushing: crosstalk method

```{r}
#| code-fold: true
#| code-summary: "Show Code"

d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```

::: {.callout-note appearance="simple"}
-   `highlight()` : from the **plotly** package sets options for interactive brushing, mainly for linking multiple plotly plots.
-   `bscols()` : from the **crosstalk** package arranges HTML elements side by side, especially useful in R Markdown.
:::

## Reference

### ggiraph

This [link](https://davidgohel.github.io/ggiraph/index.html) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.

-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)
-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)\
-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)
-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).

### plotly for R

-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)
-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/).
-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)
-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.
-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly's R API.
-   [Getting Started](https://gganimate.com/articles/gganimate.html)
-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.
-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).
-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)

## Exploration Section
