---
title: "Hands on Exercise 3b"
date: 2025-04-29
date-modified: "last-modified"
execute:
  warning: false
  freeze: true
format:
  html:
    number-offset: 3
---

# Programming Animated Statistical Graphics with R

## Overview

Animated graphics are often more engaging and impactful than static ones when presenting a visual data story. In this hands-on exercise, I will learn to:

-   Create animated data visualisations using the **gganimate** and **plotly** packages
-   Reshape data using the **tidyr** package
-   Process, wrangle, and transform data using the **dplyr** package

### Basic Concepts of Animation

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.

![](img/image1.jpg)

### Terminology

Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.

- **Frame**: In an animated line graph, a frame shows data at a specific time or for a specific category. As the frame changes, the graph updates accordingly.

- **Animation Attributes**: These are settings that control the animation’s behavior—such as frame duration, transition style (easing), and whether the animation starts fresh or continues from the current frame.

::: {.callout-note appearance="simple"}
- If we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. 
- However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.
:::

## Getting Started

### Loading the R packages

First, write a code chunk to check, install and load the following R packages:

-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
-   [**gganimate**](https://gganimate.com/), an ggplot extension for creating animated statistical graphs.
-   [**gifski**](https://cran.r-project.org/web/packages/gifski/index.html) converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.
-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/index.html): An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.
-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

### Importing the data

In this hands-on exercise, the *Data* worksheet from *GlobalPopulation* Excel workbook will be used.


```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

::: {.callout-note appearance="simple"}
-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of **readxl** package is used to import the Excel worksheet.
-   `mutate_each_()` of dplyr package is used to convert all character data type into factor.
-   `mutate` of dplyr package is used to convert data values of Year field into integer.
:::

Unfortunately, `mutate_each_()` was deprecated in dplyr 0.7.0. and `funs()` was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using [`mutate_at()`]() as shown in the code chunk below.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```


Instead of using `mutate_at()`, [`across()`](https://dplyr.tidyverse.org/reference/across.html) can be used to derive the same outputs.


```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

## Animated Data Visualisation: gganimate methods

[**gganimate**](https://gganimate.com/index.html) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.
-   `view_*()` defines how the positional scales should change along the animation.
-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.
-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.
-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### Building a Static Population Bubble Plot

In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.


```{r}
#| code-fold: true
#| code-summary: "Show Code"
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))
```

### Building the Animated Bubble Plot

In the code chunk below,

-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e. Year).
-   `ease_aes()` is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.


```{r}
#| code-fold: true
#| code-summary: "Show Code"
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear') +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))
```

## Animated Data Visualisation: plotly
In **Plotly R** package, both `ggplotly()` and `plot_ly()` support key frame animations through the `frame` argument/aesthetic. They also support an `ids` argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

### Building an animated bubble plot: `ggplotly()` method

In this section, we will learn how to create an animated bubble plot by using `ggplotly()` method.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

ggplotly(gg)
```

The animated bubble plot above includes a play/pause button and a slider component for controlling the animation

::: {.callout-note appearance="simple"}
-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called *gg*.
-   `ggplotly()` is then used to convert the R graphic object into an animated svg object.
:::

Notice that although `show.legend = FALSE` argument was used, the legend still appears on the plot. To overcome this problem, `theme(legend.position='none')` should be used as shown in the plot and code chunk below.

```{r}
#| fig-height: 6
#| code-fold: true
#| code-summary: "Show Code"
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none') + 
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

ggplotly(gg)
```
### Building an animated bubble plot: `plot_ly()` method

In this sub-section, we will learn how to create an animated bubble plot by using `plot_ly()` method.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| fig-height: 6
#| fig-width: 6
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent, 
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```

## Reference

-   [Getting Started](https://gganimate.com/articles/gganimate.html)
-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.
-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).
-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)
