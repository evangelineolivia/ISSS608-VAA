---
title: "Take Home Exercise 3"
description: "Prototype Module for Shiny Application"
format: 
  html:
    number-offset: 0
---

# Prototype Module for Shiny Application

## The Task

In this take-home exercise, we are required to select one of the modules of our proposed Shiny application (Group Project) and complete the following tasks

-   To evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,

-   To prepare and test that the specific R codes can run and returns the correct output as expected,

-   To determine the parameters and outputs that will be exposed on the Shiny applications,

-   To select the appropriate Shiny UI components for exposing the parameters determined above, and

-   To include a section called UI design for the different components of the UIs for the proposed design.

-   We are required to prepare the prototype module report as Take-home Exercise 3 submission.

-   We are required to include a section called UI design for the different components of the UIs for the proposed design.

## Getting Started

Our project will be using data from the [VAST Challenge 2025](https://vast-challenge.github.io/2025/index.html) Mini-Challenge 1.

Specifically, our project will focus on Mini-Challenge 1, where participants are provided with a knowledge graph containing recording artists, albums, collaborations, concerts, influences, and more. The goal is to develop visual analytics approaches to trace the rise of one artist and predict who will be the next to break out.

In addition, we plan to develop the following Shiny applications:

-   **Shiny App 1: Sailor Shift’s Career Explorer**
-   **Shiny App 2: Oceanus Folk Influence Tracker**
-   **Shiny App 3: Rising Star Prediction Dashboard**

For this take-home exercise, I will be providing the prototype module report and the UIs designed for the above applications.

## Loading R Packages

```{r}
pacman::p_load(tidyverse, jsonlite,
               tidygraph, ggraph, igraph, plotly, visNetwork,ggtext, ggiraph,patchwork,
               kableExtra, showtext,lubridate)
library(dplyr)
```

## Importing and Loading Data

```{r}
data <- fromJSON("data/MC1_graph.json")
```

## Custom Theme

```{r}
font_add_google("Montserrat", "montserrat")
theme <- list(
  font = 'montserrat',
  size=14,
  background = element_rect(fill = "#FEFCF3",color = NA),
  title = element_text(
      size = 16,
      face = "bold",
      color = "black"),
  fill = "#96b3c2",
  panel = element_rect(fill = "#FEFCF3", color = NA),
  grid = element_line(color = "#E6DCD0")
)

edge_colors <- c(
  "PerformerOf" = "#E69F00",   
  "ComposerOf"  = "#56B4E9",   
  "LyricistOf"  = "#009E73",   
  "ProducerOf"  = "#F0E442",   
  "MemberOf"    = "#D55E00",
  
  "CoverOf" = "#E69F00",
  "InStyleOf" = "#56B4E9",
  "InterpolatesFrom" = "#009E73",
  "LyricalReferenceTo" = "#F0E442",
  "DirectlySamples" = "#D55E00"
)

node_colors <- c(
  "Person" = "#176BA0",
  "Song"   = "#F1948A",  
  "Album"  = "#C0392B",  
  "MusicalGroup" = "#9DF0E2",
  "RecordLabel" = "#CFF9F8"
)
```

## Data Preparation and Cleaning

### Extracting Edges & Nodes

::: panel-tabset
#### Edges

```{r}
edges <- as_tibble(data$links)
edge
```

#### Nodes

```{r}
nodes <- as_tibble(data$nodes)
nodes
```
:::

```{r}
colnames(nodes)[colnames(nodes) == "Node Type"] <- "type"
colnames(edges)[colnames(edges) == "Edge Type"] <- "relation"
```

### Checking Missing Values

```{r}
colSums(is.na(nodes))
```

## Knowledge Graph

### Mapping from Node ID to Row Index

```{r}
id_map <- tibble(id = nodes$id,
                 index = seq_len(
                   nrow(nodes)))
```

### Map Source and Target IDs to Row Indices

```{r}
edges <- edges %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

### Filtering Unmatched Edges

```{r}
edges <- edges %>%
  filter(!is.na(from), !is.na(to))
```

### Plotting the Graph

```{r}
graph <- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)
```

## Sailor Shift’s Career Explorer

```{r}
#| code-fold: true
nodes <- graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  mutate(row_id = row_number())

edges <- graph %>%
  activate(edges) %>%
  as_tibble()

sailor_id <- nodes %>%
  filter(name == "Sailor Shift") %>%
  pull(row_id)

group_id <- edges %>%
  filter(from == sailor_id, relation == "MemberOf") %>%
  pull(to)
```

### Tab 1 : Overview

::: panel-tabset
#### Active Years

```{r}
sailor_releases <- edges %>%
  filter(from == sailor_id, relation == "PerformerOf") %>%
  pull(to)

group_releases <- edges %>%
  filter(from == group_id, relation == "PerformerOf") %>%
  pull(to)

all <- union(sailor_releases, group_releases)

release_years <- nodes %>%
  filter(row_id %in% all,
    (
      (type == "Song" & single == TRUE) |
      (type == "Album")
    )) %>%  
  mutate(release_year = as.integer(release_date)) %>%
  filter(!is.na(release_year)) %>%
  pull(release_year) %>%
  unique() %>%
  sort()

paste0(min(release_years), "–", max(release_years))
```

#### Total Releases

```{r}
total_releases <- nodes %>%
  filter(
    row_id %in% all,
    (
      (type == "Song" & single == TRUE) |
      (type == "Album")
    )
  ) %>%
  nrow()

total_releases
```

#### Collaborators

```{r}
collab_roles <- c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf")

sailor_songs <- graph %>%
  activate(edges) %>%
  filter(from == sailor_id, relation %in% collab_roles) %>%
  pull(to)

collab_edges <- graph %>%
  activate(edges) %>%
  filter(to %in% sailor_songs, relation %in% collab_roles, from != sailor_id) %>%
  pull(from) %>%
  unique()

length(collab_edges)
```

#### Creatives Role Played

```{r}
roles <- graph %>%
  activate(edges) %>%
  as_tibble() %>%
  filter(from == sailor_id) %>%
  pull(relation) %>%
  unique()
length(roles)
```

#### Charted Songs or Albums

```{r}
charted <- nodes %>%
  filter(
    row_id %in% all,
    (
      (type == "Song" & single == TRUE) |
      (type == "Album")
    ),
    notable == TRUE 
)
charted_count <- nrow(charted)
charted_count
```

#### Chart Success Ratio

```{r}
ratio <- round((charted_count / total_releases) * 100)
paste0(ratio,'%')
```
:::

#### UI Design

![](ui/ui1.png)

### Tab 2 : Career Timeline

::: panel-tabset
#### Bar Plot

```{r}
#| code-fold: true
#| code-summary: "Show the code"
release_summary <- nodes %>%
  filter(
    row_id %in% all,
    type == "Song"| type == "Album"
  ) %>%
  mutate(
    year = as.integer(release_date)
  ) %>%
  filter(!is.na(year)) %>%
  count(year, type, name = "n")

ggplot(release_summary, aes(x = factor(year, levels = sort(unique(year), decreasing = TRUE)), y = n, fill = type)) +
  geom_col() +
  scale_fill_manual(
    values = c(
      "Song" = "#466575",
      "Album" = "#96b3c2"
    )
  ) +
  labs(
    title = "Sailor Shift's Releases by Year (Songs vs Albums)",
    x = "Year",
    y = "Number of Releases",
    fill = "Release Type"
  ) +
  coord_flip() +
  theme_minimal() +
  theme(
    plot.background = theme$background,
    panel.background = theme$panel,
    panel.grid.major = theme$grid,
    text = element_text(size = theme$size),
    plot.title = theme$title,
  )
```

#### Table

```{r}
#| code-fold: true
#| code-summary: "Show the code"
release_summary <- nodes %>%
  filter(
    row_id %in% all,
    type == "Song" | type == "Album"
  ) %>%
  mutate(
    year = as.integer(release_date)
  )
kable(release_summary)
```
:::

::: callout-tip
### Ideas

Based on the code above, the following variables can be exposed as user inputs:

-   Year (SliderInput)

-   Release Type (filter between Songs and Albums)
:::

#### UI Design

![](ui/ui2.png)

### Tab 3 : Collaborations

::: panel-tabset
#### Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
collab_types <- c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")

sailor_works <- edges %>%
  filter(from == sailor_id, relation %in% collab_types) %>%
  pull(to)

collab_edges <- graph %>%
  activate(edges) %>%
  filter(to %in% sailor_works, relation %in% collab_types) %>%
  filter(from != sailor_id) %>%
  as_tibble()

collab_node_ids <- unique(c(sailor_id, collab_edges$from, collab_edges$to))

subgraph <- graph %>%
  as.igraph() %>%
  induced_subgraph(vids = collab_node_ids) %>%
  as_tbl_graph() %>%
  activate(edges) %>%
  filter(relation %in% collab_roles) %>%          
  activate(nodes) %>%
  mutate(label = case_when(
    type == "Song" ~ paste0(name, " (", release_date, ")"),
    TRUE ~ name
))
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
nodes_df <- subgraph %>%
  activate(nodes) %>%
  as_tibble() %>%
  mutate(
    id = row_number(),
    group = type,
    title = paste("Type:", type),
    color = ifelse(name == "Sailor Shift", "orange", node_colors[type]),
    shape = ifelse(name == "Sailor Shift", "star", "dot"),
    size  = ifelse(name == "Sailor Shift", 30, 15)
  ) %>%
  select(id, label, group, title, color, shape, size)

id_map <- tibble(index = seq_len(nrow(nodes_df)), node_id = pull(subgraph %>% activate(nodes), name))


edges_df <- subgraph %>%
  activate(edges) %>%
  as_tibble() %>%
  mutate(
    from = as.integer(from),
    to = as.integer(to),
    color = edge_colors[relation],
    arrows = "to",
    title = paste("Relation:", relation)
  ) %>%
  select(from, to, color, arrows,title) 

visNetwork(nodes_df, edges_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE, selectedBy = list(variable = "group", main = "Filter by Node Type"),) %>%
  visLayout(randomSeed = 123) %>%
  visEdges(smooth = FALSE)
```

#### Table

```{r}
#| code-fold: true
#| code-summary: "Show the code"
collab_table <- collab_edges %>%
  left_join(nodes %>% select(row_id, collaborator_name = name), by = c("from" = "row_id")) %>%
  left_join(nodes %>% select(row_id, work_name = name, type, release_date), by = c("to" = "row_id")) %>%
  select(
    collaborator_name,
    relation,
    work_name,
    type,
    release_date
  ) %>%
  arrange(release_date)

kable(collab_table)
```
:::

::: callout-tip
### Ideas

Based on the network structure, the following variables can be exposed as user inputs:

-   Node Type (checkboxGroupInput)

-   Edge Type (Relation) (checkboxGroupInput)
:::

#### UI Design

![](ui/ui3.png)

### Tab 4 : Influence Network

#### Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
influence_types <- c("InStyleOf", "CoverOf", "LyricalReferenceTo", "InterpolatesFrom", "DirectlySamples")

works <- c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")

sailor_works <- edges %>%
  filter(from == sailor_id, relation %in% works) %>%
  pull(to)

influenced_nodes <- edges %>%
  filter(from %in% sailor_works, relation %in% influence_types)

influenced_works <- influenced_nodes$to

performer_edges <- edges %>%
  filter(relation == "PerformerOf", to %in% influenced_works)

performer_ids <- performer_edges$from

sailor_node <- nodes %>%
  filter(row_id == sailor_id) %>%
  transmute(id = row_id, label = name, group = "Sailor", level = 1)

works_nodes <- nodes %>%
  filter(row_id %in% sailor_works) %>%
  transmute(id = row_id, label = name, group = "SailorWork", level = 2)

influencer_nodes <- nodes %>%
  filter(row_id %in% influenced_works) %>%
  transmute(id = row_id, label = name, group = "InfluencedWork", title = paste0("Genre :", genre),level = 3)

performer_nodes <- nodes %>%
  filter(row_id %in% performer_ids) %>%  
  mutate(
    code = ifelse(type == "Person", "f007", "f0c0"),
    color = ifelse(type == "Person", node_colors["Person"], node_colors["MusicalGroup"])
  ) %>%
  transmute(
    id = row_id, 
    label = name, 
    group = "Performer", 
    title = paste("<b>Type:</b> ", type),
    level = 4,
    shape = "icon",
    icon.code = code,
    icon.color = color
    )

all_nodes <- bind_rows(sailor_node, works_nodes, influencer_nodes, performer_nodes)

edges1 <- edges %>%
  filter(from == sailor_id, to %in% sailor_works, relation %in% works) %>% 
  transmute(
    from = from,
    to = to,
    title = paste("<b>Relation:</b> ", relation),
    relation = relation
  )

edges2 <- influenced_nodes %>%
  transmute(
    from = from,
    to = to,
    title = paste("<b>Relation:</b> ", relation),
    relation = relation
  )

edges3 <- performer_edges %>%
  transmute(
    from = from,
    to = to,
    title = paste("<b>Relation:</b> ", relation),
    relation = relation
  )

all_edges <- bind_rows(edges1, edges2, edges3)

visNetwork(all_nodes, all_edges) %>%
  visNodes(shape = "dot", size = 20) %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>% 
  addFontAwesome() %>% 
  visLayout(randomSeed = 42)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
influence_details <- influenced_nodes %>%
  left_join(nodes %>% select(row_id, from_label = name), by = c("from" = "row_id")) %>%
  left_join(nodes %>% select(row_id, to_label = name, to_genre = genre), by = c("to" = "row_id")) %>%
  select(from_label, relation, to_label, to_genre) %>%
  rename(
    `Sailor Shift Work` = from_label, 
    `Influence Type` = relation,
    `Other Artist Work` = to_label, 
    `Genre` = to_genre
  )
kable(influence_details)
```

::: callout-tip
### Ideas

Based on the network structure, the following variables can be exposed as user inputs:

-   Genre Filter (SelectInput / MultiSelect)

-   Influence Type (CheckboxGroupInput)
:::

#### UI Design

![](ui/ui4.png)

## Oceanus Folk Influence Tracker

### Tab 1 : Overview

#### Creative Activity Oceanus Folk

```{r}
#| code-fold: true
#| code-summary: "Show the code"
oceanus_releases <- nodes %>%
  filter(
    genre == "Oceanus Folk",
    type == "Song" | type == "Album"
  ) %>%
  mutate(
    year = as.integer(release_date)
  ) %>%
  filter(!is.na(year)) %>%
  count(year, type, name = "n")

totals_per_year <- oceanus_releases %>%
  group_by(year) %>%
  summarise(total = sum(n), .groups = "drop")

ggplot(oceanus_releases, aes(x = factor(year), y = n, fill = type)) +
  geom_col() +
  scale_fill_manual(
    values = c(
      "Song" = "#96b3c2",
      "Album" = "#466575"
    )
  ) +
  geom_text(aes(label = n),
          position = position_stack(vjust = 0.5),
          size = 2, color = "white") +
  geom_text(data = totals_per_year,
          aes(x = factor(year), y = total + 1, label = total),
          inherit.aes = FALSE,
          size = 3) +
  labs(
    title = "Number of Songs and Albums Released Over Time",
    subtitle = "Oceanus Folk Genre",
    x = "Year",
    y = "Number of Releases",
    fill = "Release Type"
  ) +
  theme_minimal() +
  theme(
    plot.background = theme$background,
    panel.background = theme$panel,
    panel.grid.major = theme$grid,
    text = element_text(size = theme$size),
    plot.title = theme$title,
    axis.text.x = element_text(angle = 45, hjust = 1, size = 6)
  )
```

::: panel-tabset
#### Total Performers

```{r}
oceanus_songs <- nodes %>% 
  filter(
    genre == "Oceanus Folk",
    type == "Song"| type == "Album"
  )

performer_edges <- edges %>%
  filter(relation == "PerformerOf", to %in% oceanus_songs$row_id)

performer_ids <- unique(performer_edges$from)

unique_performers <- nodes %>%
  filter(row_id %in% performer_ids, type %in% c("Person", "MusicalGroup")) %>% 
  select(`Name`=name,`Type`=type)

n_unique_performers <- nrow(unique_performers)
n_unique_performers
```

#### Total Releases

```{r}
nrow(oceanus_releases)
```

#### Years Active

```{r}
paste(min(oceanus_releases$year),"-",max(oceanus_releases$year))
```
:::

#### UI Design

![](ui/ui5.png)

### Tab 2 : Influence Timeline

#### Influence Line Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
oceanus_songs <- nodes %>% 
  filter(
    genre == "Oceanus Folk",
    type == "Song"| type == "Album"
  ) %>% 
  mutate(
    year = as.integer(release_date)
  )

oceanus_edges <- edges %>%
  filter(relation %in% influence_types, to %in% oceanus_songs$row_id)

edges_with_year <- oceanus_edges %>%
  left_join(oceanus_songs %>% select(row_id, year), by = c("to" = "row_id")) %>%
  filter(!is.na(year))

edge_counts <- edges_with_year %>%
  group_by(year, relation) %>%
  summarise(count = n(), .groups = "drop")

ggplot(edge_counts, aes(x = year, y = count, color = relation)) +
  geom_line(size = 1) +
  geom_point(size = 1.5) +
  labs(
    title = "Oceanus Folk Influences Over Time",
    x = "Year",
    y = "Number of Songs",
    color = "Edge Type"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.background = theme$background,
    panel.background = theme$panel,
    panel.grid.major = theme$grid,
    text = element_text(size = theme$size),
    plot.title = theme$title,
  )
```

#### UI Design

![](ui/ui6.png)

### Tab 3 : Outward Impact

#### Genres Influenced by Oceanus Folk Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
oceanus_nodes_subset <- nodes %>%
  filter(row_id %in% unique(c(oceanus_edges$from, oceanus_edges$to))) %>%
  mutate(
    id = row_id,
    label = name,
    group = type,
    title = genre,
    shape = "icon",
    icon.code = ifelse(genre == "Oceanus Folk", "f13d", "f111"),
    icon.color = ifelse(genre == "Oceanus Folk", "#123456", "#e3a6ab")
  )

oceanus_edges_subset <- oceanus_edges %>%
  mutate(
    from = from,
    to = to,
    arrows = "to",
    title = relation, 
    color = edge_colors[relation] %>% unname()
  )

visNetwork(oceanus_nodes_subset, oceanus_edges_subset) %>%
  visEdges(smooth = TRUE) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  addFontAwesome() %>% 
  visLayout(randomSeed = 42)
```

#### Genres Influenced by Oceanus Folk Table

```{r}
#| code-fold: true
#| code-summary: "Show the code"
influenced_songs <- oceanus_edges %>%
  left_join(nodes %>% select(row_id, genre, type), by = c("from" = "row_id")) %>%
  filter(!is.na(genre), genre != "Oceanus Folk")

genre_influence_counts <- influenced_songs %>%
  group_by(genre) %>%
  summarise(count = n(), .groups = "drop") %>%
  arrange(desc(count))

kable(genre_influence_counts, col.names = c("Genre", "Number of Songs Influenced by Oceanus Folk"))
```

#### Artists with Charted Songs Influenced by Oceanus Folk

```{r}
#| code-fold: true
#| code-summary: "Show the code"
notable_influenced_songs <- oceanus_edges %>%
  left_join(nodes %>% select(row_id, notable, type), by = c("from" = "row_id")) %>%
  filter(notable == TRUE)

notable_performers <- edges %>%
  filter(relation == "PerformerOf", to %in% notable_influenced_songs$from) %>%
  left_join(nodes %>% select(row_id, name, type), by = c("from" = "row_id")) %>%
  filter(type %in% c("Person", "MusicalGroup")) %>%
  count(name, sort = TRUE)

kable(head(notable_performers, 10), col.names = c("Artist", "Number of Notable Songs Influenced by Oceanus Folk"))
```

#### UI Design

![](ui/ui7.png)

### Tab 4 : Roots

#### Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
recent <- oceanus_songs %>%
  filter(year >= 2023)

influences <- edges %>%
  filter(relation %in% influence_types, from %in% recent$row_id)

node_ids <- unique(c(influences$from, influences$to))

network_nodes <- nodes %>%
  filter(row_id %in% node_ids) %>%
  mutate(
    id = row_id,
    label = name,
    group = ifelse(row_id %in% recent$row_id, "Oceanus Folk", "Influenced Song"),
    title = paste0("<b> Type: </b>", type, "<br><b>Genre: </b>", genre)
  )

network_edges <- influences %>%
  mutate(
    from = from,
    to = to,
    arrows = "to",
    title = relation,
    color = edge_colors[relation] %>% unname()
  )

visNetwork(network_nodes, network_edges) %>%
  visEdges(smooth = TRUE) %>% 
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLegend() %>% 
  visLayout(randomSeed = 42) 
```

#### Which Genre is Most of the Oceanus Folk Songs Influenced By

```{r}
#| code-fold: true
#| code-summary: "Show the code"
influenced_genres <- influences %>%
  left_join(nodes %>% select(row_id, genre, type), by = c("to" = "row_id")) %>%
  filter(type == "Song", !is.na(genre), genre != "Oceanus Folk") %>%
  count(genre, sort = TRUE)

kable(influenced_genres)
```

#### UI Design

![](ui/ui8.png)

## Rising Star Prediction Dashboard

### Tab 1 : Activity

#### Artist A Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_a <- "Sailor Shift"
 
duplicates <- nodes %>%
  filter(name == artist_name_a)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

artist_index <- nodes %>%
   filter(name == artist_name_a) %>%
   pull(row_id)


member_of_groups <- edges %>%
   filter(from == artist_index, relation == "MemberOf") %>%
   pull(to)

member_edges <- edges %>%
  filter(relation == "MemberOf", from == artist_index)

group_id <- if (length(member_of_groups) > 0) {
  member_of_groups
} else {
  integer(0)
}
performer_ids <- c(artist_index, group_id)

performed_ids <- edges %>%
   filter(relation == "PerformerOf", from %in% performer_ids) %>%
   pull(to)


performed_works <- nodes %>%
   filter(row_id %in% performed_ids,
           (type == "Song" | type == "Album")) %>%
   mutate(year = as.integer(release_date)) %>%
   select(name, year, type, row_id, genre)

a_nodes <- bind_rows(
  nodes %>%
    filter(row_id %in% c(artist_index, group_id)) %>%
    mutate(id = row_id,
           label = name,
           group = type),

  performed_works %>%
    mutate(id = row_id,
           title = paste0(
             "<b>Name:</b> ", name,
             "<br><b>Year:</b> ", year,
             "<br><b>Type:</b> ", type,
             "<br><b>Genre:</b> ", genre
             ),
           group = type,
           color = node_colors[type])
) %>%
  mutate(
    color = ifelse(name == artist_name_a, "gold", color),
    shape = ifelse(name == artist_name_a, "star", "dot"),
    size  = ifelse(name == artist_name_a, 30, 15)
  )

member_vis_edges <- member_edges %>%
  mutate(label = "MemberOf",color = edge_colors[relation] %>% unname())

performers <- edges %>%
   filter(relation == "PerformerOf", from %in% performer_ids, to %in% performed_works$row_id)


a_edges <- performers %>%
   mutate(
    from = from,
    to = to,
    arrows = "to",
    title = relation)

a_edges <- bind_rows(member_vis_edges, performers) %>%
  mutate(
    color = edge_colors[relation]
  )

visNetwork(a_nodes, a_edges) %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
   visLayout(randomSeed = 123)
```

#### Artist B Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_b <- "Yang Wan"
 
duplicates <- nodes %>%
  filter(name == artist_name_b)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

artist_index <- nodes %>%
   filter(name == artist_name_b) %>%
   pull(row_id)


member_of_groups <- edges %>%
   filter(from == artist_index, relation == "MemberOf") %>%
   pull(to)

member_edges <- edges %>%
  filter(relation == "MemberOf", from == artist_index)

group_id <- if (length(member_of_groups) > 0) {
  member_of_groups
} else {
  integer(0)
}
performer_ids <- c(artist_index, group_id)

performed_ids <- edges %>%
   filter(relation == "PerformerOf", from %in% performer_ids) %>%
   pull(to)

performed_works <- nodes %>%
   filter(row_id %in% performed_ids,
           (type == "Song" | type == "Album")) %>%
   mutate(year = as.integer(release_date)) %>%
   select(name, year, type, row_id, genre)

b_nodes <- bind_rows(
  nodes %>%
    filter(row_id %in% c(artist_index, group_id)) %>%
    mutate(id = row_id,
           label = name,
           group = type),

  performed_works %>%
    mutate(id = row_id,
           title = paste0(
             "<b>Name:</b> ", name,
             "<br><b>Year:</b> ", year,
             "<br><b>Type:</b> ", type,
             "<br><b>Genre:</b> ", genre
             ),
           group = type,
           color = node_colors[type])
) %>%
  mutate(
    color = ifelse(name == artist_name_b, "gold", color),
    shape = ifelse(name == artist_name_b, "star", "dot"),
    size  = ifelse(name == artist_name_b, 30, 15)
  )

member_vis_edges <- member_edges %>%
  mutate(label = "MemberOf",color = edge_colors[relation] %>% unname())

performers <- edges %>%
   filter(relation == "PerformerOf", from %in% performer_ids, to %in% performed_works$row_id)


b_edges <- performers %>%
   mutate(
    from = from,
    to = to,
    arrows = "to",
    title = relation)

b_edges <- bind_rows(member_vis_edges, performers) %>%
  mutate(
    color = edge_colors[relation]
  )

visNetwork(b_nodes, b_edges) %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
   visLayout(randomSeed = 123)
```

#### Artist C Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_c <- "Jay Walters"
 
duplicates <- nodes %>%
  filter(name == artist_name_c)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

artist_index <- nodes %>%
   filter(name == artist_name_c) %>%
   pull(row_id)


member_of_groups <- edges %>%
   filter(from == artist_index, relation == "MemberOf") %>%
   pull(to)

member_edges <- edges %>%
  filter(relation == "MemberOf", from == artist_index)

group_id <- if (length(member_of_groups) > 0) {
  member_of_groups
} else {
  integer(0)
}
performer_ids <- c(artist_index, group_id)

performed_ids <- edges %>%
   filter(relation == "PerformerOf", from %in% performer_ids) %>%
   pull(to)


performed_works <- nodes %>%
   filter(row_id %in% performed_ids,
           (type == "Song" | type == "Album")) %>%
   mutate(year = as.integer(release_date)) %>%
   select(name, year, type, row_id, genre)

c_nodes <- bind_rows(
  nodes %>%
    filter(row_id %in% c(artist_index, group_id)) %>%
    mutate(id = row_id,
           label = name,
           group = type),

  performed_works %>%
    mutate(id = row_id,
           title = paste0(
             "<b>Name:</b> ", name,
             "<br><b>Year:</b> ", year,
             "<br><b>Type:</b> ", type,
             "<br><b>Genre:</b> ", genre
             ),
           group = type,
           color = node_colors[type])
) %>%
  mutate(
    color = ifelse(name == artist_name_c, "gold", color),
    shape = ifelse(name == artist_name_c, "star", "dot"),
    size  = ifelse(name == artist_name_c, 30, 15)
  )

member_vis_edges <- member_edges %>%
  mutate(label = "MemberOf",color = edge_colors[relation] %>% unname())

performers <- edges %>%
   filter(relation == "PerformerOf", from %in% performer_ids, to %in% performed_works$row_id)


c_edges <- performers %>%
   mutate(
    from = from,
    to = to,
    arrows = "to",
    title = relation)

c_edges <- bind_rows(member_vis_edges, performers) %>%
  mutate(
    color = edge_colors[relation]
  )

visNetwork(c_nodes, c_edges) %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
   visLayout(randomSeed = 123)
```

#### Line Graph Comparison

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_names <- c(artist_name_a, artist_name_b, artist_name_c)

artist_nodes <- nodes %>%
  filter(type == "Person", name %in% artist_names)


group_edges <- edges %>%
  filter(relation == "MemberOf", from %in% artist_nodes$row_id)

group_artist_map <- group_edges %>%
  left_join(artist_nodes, by = c("from" = "row_id")) %>%
  select(group_id = to, artist_name = name)

performer_ids <- c(artist_nodes$row_id, group_artist_map$group_id)

performed_works <- edges %>%
  filter(relation == "PerformerOf", from %in% performer_ids) %>%
  left_join(nodes, by = c("to" = "row_id")) %>%
  filter(type %in% c("Song", "Album")) %>%
  mutate(
    release_year = as.integer(release_date),
    artist_name = case_when(
      from %in% artist_nodes$row_id ~ artist_nodes$name[match(from, artist_nodes$row_id)],
      from %in% group_artist_map$group_id ~ group_artist_map$artist_name[match(from, group_artist_map$group_id)],
      TRUE ~ NA_character_)
  )

release_counts <- performed_works %>%
  filter(!is.na(release_year)) %>%
  count(artist_name, release_year)

ggplot(release_counts, aes(x = release_year, y = n)) +
  geom_line(color = "#96b3c2", linewidth = 1.2) +
  geom_point(color = "#466575", size = 2) +
  facet_wrap(~ artist_name, nrow = 1, scales = "free_x") + 
  labs(
    title = "Songs or Albums Release Timeline",
    x = "Year",
    y = "Number of Releases"
  ) +
  scale_x_continuous(
    breaks = pretty,
    guide = guide_axis(angle = 45)
  ) +
  scale_y_continuous(breaks = seq(0, max(release_counts$n, na.rm = TRUE), by = 1)) +
  theme_classic() +
  theme(
    strip.text = element_text(face = "bold", size = 12),
    plot.background = theme$background,
    panel.background = theme$panel,
    panel.grid.major = theme$grid,
    text = element_text(size = theme$size),
    plot.title = theme$title
  )
```

::: callout-tip
### Ideas

Based on the network structure, the following variables can be exposed as user inputs:

-   Artist A, Artist B, Artist C (selectInput)
:::

#### UI Design

![](ui/ui9.png)

### Tab 2 : Contribution

#### Artist A Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_a <- "Sailor Shift"
 
duplicates <- nodes %>%
  filter(name == artist_name_a)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

contribution <- c("ComposerOf", "ProducerOf", "LyricistOf")

artist_index <- nodes %>%
   filter(name == artist_name_a) %>%
   pull(row_id)

artist_works <- edges %>%
  filter(from == artist_index, relation %in% contribution) %>%
  pull(to)

contribution_edges <- edges %>%
  filter(from == artist_index, relation %in% contribution, to %in% artist_works)

contribution_nodes <- nodes %>%
  filter(row_id %in% c(artist_index, artist_works)) %>%
  mutate(
    id = row_id,
    label = ifelse(row_id == artist_index, name, NA),
    group = type,
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type),
    shape = ifelse(row_id == artist_index, "star", "dot"),
    color = ifelse(row_id == artist_index, "gold", node_colors[type]),
    size  = ifelse(row_id == artist_index, 30, 15)
  )

contribution_edges_vis <- contribution_edges %>%
  mutate(
    from = from,
    to = to,
    title = paste("<b>Relation: </b>",relation),
    arrows = "to",
    color = edge_colors[relation]
  )

visNetwork(contribution_nodes, contribution_edges_vis) %>%
  visEdges(smooth = TRUE) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

#### Artist B Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_b <- "Yang Wan"
 
duplicates <- nodes %>%
  filter(name == artist_name_b)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

contribution <- c("ComposerOf", "ProducerOf", "LyricistOf")

artist_index <- nodes %>%
   filter(name == artist_name_b) %>%
   pull(row_id)

artist_works <- edges %>%
  filter(from == artist_index, relation %in% contribution) %>%
  pull(to)

contribution_edges <- edges %>%
  filter(from == artist_index, relation %in% contribution, to %in% artist_works)

contribution_nodes <- nodes %>%
  filter(row_id %in% c(artist_index, artist_works)) %>%
  mutate(
    id = row_id,
    label = ifelse(row_id == artist_index, name, NA),
    group = type,
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type),
    shape = ifelse(row_id == artist_index, "star", "dot"),
    color = ifelse(row_id == artist_index, "gold", node_colors[type]),
    size  = ifelse(row_id == artist_index, 30, 15)
  )

contribution_edges_vis <- contribution_edges %>%
  mutate(
    from = from,
    to = to,
    title = paste("<b>Relation: </b>",relation),
    arrows = "to",
    color = edge_colors[relation]
  )

visNetwork(contribution_nodes, contribution_edges_vis) %>%
  visEdges(smooth = TRUE) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

#### Artist C Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_c <- "Jay Walters"
 
duplicates <- nodes %>%
  filter(name == artist_name_c)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

contribution <- c("ComposerOf", "ProducerOf", "LyricistOf")

artist_index <- nodes %>%
   filter(name == artist_name_c) %>%
   pull(row_id)

artist_works <- edges %>%
  filter(from == artist_index, relation %in% contribution) %>%
  pull(to)

contribution_edges <- edges %>%
  filter(from == artist_index, relation %in% contribution, to %in% artist_works)

contribution_nodes <- nodes %>%
  filter(row_id %in% c(artist_index, artist_works)) %>%
  mutate(
    id = row_id,
    label = ifelse(row_id == artist_index, name, NA),
    group = type,
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type),
    shape = ifelse(row_id == artist_index, "star", "dot"),
    color = ifelse(row_id == artist_index, "gold", node_colors[type]),
    size  = ifelse(row_id == artist_index, 30, 15)
  )

contribution_edges_vis <- contribution_edges %>%
  mutate(
    from = from,
    to = to,
    title = paste("<b>Relation: </b>",relation),
    arrows = "to",
    color = edge_colors[relation]
  )

visNetwork(contribution_nodes, contribution_edges_vis) %>%
  visEdges(smooth = TRUE) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

#### Table 

```{r}
#| code-fold: true
#| code-summary: "Show the code"
contribution <- c("ComposerOf", "ProducerOf", "LyricistOf")
artist_names <- c(artist_name_a, artist_name_b, artist_name_c)

artist_nodes <- nodes %>%
  filter(type == "Person", name %in% artist_names)

contribution_counts <- edges %>%
  filter(from %in% artist_nodes$row_id, relation %in% contribution) %>%
  left_join(artist_nodes %>% select(row_id, artist_name = name), by = c("from" = "row_id")) %>%
  count(artist_name, relation) %>%
  pivot_wider(names_from = relation, values_from = n, values_fill = 0)

kable(contribution_counts)
```

::: callout-tip
### Ideas

Based on the network structure, the following variables can be exposed as user inputs:

-   Artist A, Artist B, Artist C (selectInput)
:::


#### UI Design

![](ui/ui10.png)


### Tab 3 : Collaboration

#### Artist A Network Graph
```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_a <- "Sailor Shift"
 
duplicates <- nodes %>%
  filter(name == artist_name_a)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

collab_types <- c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")

artist_index <- nodes %>%
   filter(name == artist_name_a) %>%
   pull(row_id)

artist_works <- edges %>%
  filter(from == artist_index, relation %in% collab_types) %>%
  pull(to)

collab_edges <- edges %>%
  filter(to %in% artist_works, relation %in% collab_types)

artist_node <- nodes %>%
  filter(row_id == artist_index) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Artist",
    shape = "star",
    color = "gold",
    level = 1
  )

work_nodes <- nodes %>%
  filter(row_id %in% artist_works) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Work",
    shape = "dot",
    level = 2,
    color = node_colors[type],
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

collaborator_ids <- setdiff(collab_edges$from, artist_index)

collaborator_nodes <- nodes %>%
  filter(row_id %in% collaborator_ids) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Collaborator",
    shape = "icon",
    color = node_colors[type],
    level = 3,
    icon.code = ifelse(type == "Person", "f007", "f0c0"),
    icon.color = ifelse(type == "Person", node_colors["Person"], node_colors["MusicalGroup"]),
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

collab_nodes <- bind_rows(artist_node, work_nodes, collaborator_nodes)

collab_edges_vis <- collab_edges %>%
  mutate(
    arrows = "to",
    color = edge_colors[relation] %>% unname()
  )

visNetwork(collab_nodes, collab_edges_vis) %>%
  visNodes(shape = "dot", size = 20) %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>% 
  addFontAwesome() %>% 
  visLayout(randomSeed = 42)
```

#### Artist B Network Graph
```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_b <- "Yang Wan"
 
duplicates <- nodes %>%
  filter(name == artist_name_b)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

collab_types <- c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")

artist_index <- nodes %>%
   filter(name == artist_name_b) %>%
   pull(row_id)

artist_works <- edges %>%
  filter(from == artist_index, relation %in% collab_types) %>%
  pull(to)

collab_edges <- edges %>%
  filter(to %in% artist_works, relation %in% collab_types)

artist_node <- nodes %>%
  filter(row_id == artist_index) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Artist",
    shape = "icon",
    level = 1,
    color = "gold",
    icon.code = "f005",
    icon.color = "gold",
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

work_nodes <- nodes %>%
  filter(row_id %in% artist_works) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Work",
    shape = "dot",
    level = 2,
    color = node_colors[type],
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

collaborator_ids <- setdiff(collab_edges$from, artist_index)

collaborator_nodes <- nodes %>%
  filter(row_id %in% collaborator_ids) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Collaborator",
    shape = "icon",
    color = node_colors[type],
    level = 3,
    icon.code = ifelse(type == "Person", "f007", "f0c0"),
    icon.color = ifelse(type == "Person", node_colors["Person"], node_colors["MusicalGroup"]),
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

collab_nodes <- bind_rows(artist_node, work_nodes, collaborator_nodes)

collab_edges_vis <- collab_edges %>%
  mutate(
    arrows = "to",
    color = edge_colors[relation] %>% unname()
  )

visNetwork(collab_nodes, collab_edges_vis) %>%
  visNodes(shape = "dot", size = 20) %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>% 
  addFontAwesome() %>% 
  visLayout(randomSeed = 42)
```

#### Artist C Network Graph
```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_name_c <- "Jay Walters"
 
duplicates <- nodes %>%
  filter(name == artist_name_c)


if (nrow(duplicates) > 1) {
  canonical_id <- duplicates$row_id[1]
  other_ids <- duplicates$row_id[-1]
  other_ids

  edges <- edges %>%
    mutate(
      from = ifelse(from %in% other_ids, canonical_id, from),
      to   = ifelse(to   %in% other_ids, canonical_id, to)
    )

  nodes <- nodes %>%
    filter(!(row_id %in% other_ids))
}

collab_types <- c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")

artist_index <- nodes %>%
   filter(name == artist_name_c) %>%
   pull(row_id)

artist_works <- edges %>%
  filter(from == artist_index, relation %in% collab_types) %>%
  pull(to)

collab_edges <- edges %>%
  filter(to %in% artist_works, relation %in% collab_types)

artist_node <- nodes %>%
  filter(row_id == artist_index) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Artist",
    shape = "icon",
    level = 1,
    color = "gold",
    icon.code = "f005",
    icon.color = "gold",
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

work_nodes <- nodes %>%
  filter(row_id %in% artist_works) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Work",
    shape = "dot",
    level = 2,
    color = node_colors[type],
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

collaborator_ids <- setdiff(collab_edges$from, artist_index)

collaborator_nodes <- nodes %>%
  filter(row_id %in% collaborator_ids) %>%
  transmute(
    id = row_id,
    label = name,
    group = "Collaborator",
    shape = "icon",
    color = node_colors[type],
    level = 3,
    icon.code = ifelse(type == "Person", "f007", "f0c0"),
    icon.color = ifelse(type == "Person", node_colors["Person"], node_colors["MusicalGroup"]),
    title = paste0("<b>Name:</b> ", name, "<br><b>Type:</b> ", type)
  )

collab_nodes <- bind_rows(artist_node, work_nodes, collaborator_nodes)

collab_edges_vis <- collab_edges %>%
  mutate(
    arrows = "to",
    color = edge_colors[relation] %>% unname()
  )

visNetwork(collab_nodes, collab_edges_vis) %>%
  visNodes(shape = "dot", size = 20) %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>% 
  addFontAwesome() %>% 
  visLayout(randomSeed = 42)
```

#### Table 
```{r}
#| code-fold: true
#| code-summary: "Show the code"
collab_types <- c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")
artist_names <- c(artist_name_a, artist_name_b, artist_name_c)

artist_nodes <- nodes %>%
  filter(type == "Person", name %in% artist_names)

collab_summary <- map_dfr(artist_names, function(name) {
  artist_id <- artist_nodes %>%
    filter(name == !!name) %>%
    pull(row_id)

  works <- edges %>%
    filter(from == artist_id, relation %in% collab_types) %>%
    pull(to)

  collab_ids <- edges %>%
    filter(to %in% works, relation %in% collab_types, from != artist_id) %>%
    pull(from) %>%
    unique()

  nodes %>%
    filter(row_id %in% collab_ids) %>%
    count(type) %>%
    mutate(artist = name)
})

collab_summary <- collab_summary %>%
  pivot_wider(names_from = type, values_from = n, values_fill = 0) %>%
  select(artist, Person, MusicalGroup)

kable(collab_summary)
```

::: callout-tip
### Ideas

Based on the network structure, the following variables can be exposed as user inputs:

-   Artist A, Artist B, Artist C (selectInput)
:::

#### UI Design 

![](ui/ui11.png)

### Tab 4 : Public Recognition

#### Stacked Bar Chart

```{r}
#| code-fold: true
#| code-summary: "Show the code"
artist_names <- c(artist_name_a, artist_name_b, artist_name_c)
artist_nodes <- nodes %>%
  filter(type == "Person", name %in% artist_names)

release_charted_summary <- map_dfr(artist_names, function(artist_label) {
  artist_id <- artist_nodes %>% filter(name == artist_label) %>% pull(row_id)

  works <- edges %>%
    filter(from == artist_id, relation == "PerformerOf") %>%
    pull(to)

  nodes %>%
    filter(row_id %in% works, type %in% c("Song", "Album")) %>%
    mutate(
      artist = artist_label,
      charted_status = ifelse(notable, "Charted", "Uncharted")
    ) %>%
    count(artist, charted_status)
})

ggplot(release_charted_summary, aes(x = artist, y = n, fill = charted_status)) +
  geom_bar(stat = "identity") + 
  labs(
    title = "Charted vs Uncharted Releases per Artist",
    x = "Artist",
    y = "Number of Releases",
    fill = "Status"
  ) +
  scale_fill_manual(
    values = c(
      "Charted" = "#466575",
      "Uncharted" = "#96b3c2"
    )
  ) +
  theme_minimal() +
  theme(
    plot.background = theme$background,
    panel.background = theme$panel,
    panel.grid.major = theme$grid,
    text = element_text(size = theme$size),
    plot.title = theme$title
  )
```

#### Table
```{r}
#| code-fold: true
#| code-summary: "Show the code"
release_charted_table <- map_dfr(artist_names, function(artist_label) {
  artist_id <- artist_nodes %>% 
    filter(name == artist_label) %>%
    pull(row_id)

  works <- edges %>%
    filter(from == artist_id, relation == "PerformerOf") %>%
    pull(to)

  nodes %>%
    filter(row_id %in% works, type %in% c("Song", "Album")) %>%
    mutate(
      `Artist Name` = artist_label,
      charted = ifelse(notable, "Yes", "No"),
      Year = as.integer(release_date)
    ) %>%
    select(`Artist Name`, name, Year, type, charted)
})

kable(release_charted_table)
```

::: callout-tip
### Ideas

Based on the network structure, the following variables can be exposed as user inputs:

-   Artist A, Artist B, Artist C (selectInput)
:::

#### UI Design

![](ui/ui12.png)

### Tab 5 : Prediction

#### Table

```{r}
#| code-fold: true
#| code-summary: "Show the code"
oceanus_nodes <- nodes %>%
  filter(genre == "Oceanus Folk", type %in% c("Song", "Album")) %>%
  pull(row_id)

oceanus_performers <- edges %>%
  filter(to %in% oceanus_nodes, relation == "PerformerOf") %>%
  pull(from) %>% unique()

collabs <- edges %>%
  filter(relation %in% c("ComposerOf", "LyricistOf", "ProducerOf"),
         from %in% oceanus_performers) %>%
  group_by(from) %>%
  summarise(Collabs = n_distinct(to), Creative = n(), .groups = "drop")

release_info <- edges %>%
  filter(from %in% oceanus_performers, relation == "PerformerOf", to %in% oceanus_nodes) %>%
  left_join(nodes %>% select(row_id, release_date, notable), by = c("to" = "row_id")) %>%
  mutate(release_year = as.integer(release_date)) %>%
  filter(!is.na(release_year)) %>%
  left_join(nodes %>% select(row_id, name, type) %>%
              rename(artist_id = row_id, artist_name = name),
            by = c("from" = "artist_id")) %>%
  filter(type %in% c("Person", "MusicalGroup"))

current_year <- 2040

table <- release_info %>%
  group_by(artist_name, from) %>%
  summarise(
    First = min(release_year, na.rm = TRUE),
    Total = n(),
    Active = n_distinct(release_year),
    Charted = sum(notable == TRUE, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  filter(First >= 2030, Total >= 3) %>%
  left_join(collabs, by = "from") %>%
  mutate(
    Inactivity = (current_year - First + 1) - Active,
    Collabs = replace_na(Collabs, 0),
    Creative = replace_na(Creative, 0),
    Freshness = exp(-Inactivity * 0.4),
    ChartedRatio = Charted / Total,
    Score = round(((Total * 1.0) + (ChartedRatio * 15) + (Collabs * 1.0) + (Creative * 1.2)) * Freshness, 2)
  ) %>%
  arrange(desc(Score))

kable(table, col.names = c("Artist", "ID", "First Release", "Total Works", "Active Years",
                           "Charted", "Collabs", "Creative", "Inactivity", "Freshness",
                           "Charted Ratio", "Rising Star Score"))
```

#### UI Design

![](ui/ui13.png)

