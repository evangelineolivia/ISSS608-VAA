---
title: "Take Home Exercise 2"
description: VAST Challenge 2025 Mini-Challenge 1
date: 2025-05-13
date-modified: "last-modified"
execute:
  warning: false
  freeze: true
format: 
  html:
    number-sections: false
---

# Overview

For this take-home exercise, we will be working on **Mini-Challenge 1** from the [**VAST Challenge 2025**](https://vast-challenge.github.io/2025/index.html). The objective of this exercise is to design visual analytics methods to track the emergence of a rising artist and forecast the next potential breakout star.

We will address the following questions from the mini-challenge:

#### 1. The Profile of Sailor Shift's Career :

-   Who has Sailor Shift been most influenced by over time?
-   Who has she collaborated with and directly or indirectly influenced?
-   How has she influenced collaborators within the broader **Oceanus Folk** community?

#### 2. The Influence of Oceantus Folk to the Music World :

-   Was this influence **intermittent** or did it show a **gradual rise**?
-   What **genres** and **top artists** have been most influenced by Oceanus Folk?
-   On the conveerse, how has Oceantus Folk changed the rise of Sailor Shift? From which **genre** does it draw most of its contemporary inspiration?

#### 3. Profile of What it Means to be a Rising Star in the Music Industry

-   Visualize the careers of **3 Artist**
-   Compare and Contrast their rise in **Popularity** and **Influence**
-   Using this characterization, gives **3 Predictions** of the next Oceanus Folk stars with be over the next **5 Years**

# The Data

We will use the dataset provided in the VAST Challenge 2025 Mini-Challenge 1.

::: {.panel-tabset .nav-pills}
#### File Overview

```{r}
#| echo: false
#| message: false
#| warning: false
#| results: 'asis'

library(knitr)
library(tibble)

dataset_info <- tibble(
  Attribute = c("File Name", "Graph Type", "Number of Nodes", "Number of Edges", "Connected Components"),
  Value = c("MC1_graph.json", "Directed Multigraph", "17,412", "37,857", "18")
)

kable(dataset_info)
```

#### Node

```{r}
#| echo: false
#| message: false
#| warning: false
#| results: 'asis'
node <- tibble(
  Node_Type = c("Person", "Song", "RecordLabel", "Album", "MusicalGroup")
)

kable(node)
```

#### Edge

```{r}
#| echo: false
#| message: false
#| warning: false
#| results: 'asis'
edge <- tibble(
  Edge_Type = c(
    "MemberOf", "PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf",
    "InStyleOf", "InterpolatesFrom", "CoverOf", "LyricalReferenceTo",
    "DirectlySamples", "RecordedBy", "DistributedBy"
  )
)

kable(edge)
```
:::

# Setting Up

## Loading Packages

::: {.panel-tabset .nav-pills}
#### Packages

```{r}
pacman::p_load(tidyverse, jsonlite,
               tidygraph, ggraph, igraph, plotly, visNetwork)
```

#### Packages Information

| **Library** | **Description** |
|------------------------------------|------------------------------------|
| [**pacman**](https://cran.r-project.org/package=pacman) | A package management tool that helps load, install, and manage R packages more easily. |
| [**tidyverse**](https://www.tidyverse.org/) | A collection of R packages designed for data science, sharing an underlying design philosophy, grammar, and data structures. |
| [**jsonlite**](https://cran.r-project.org/package=jsonlite) | A robust and flexible R package for parsing and generating JSON data, commonly used for working with web APIs and structured data files. |
:::

::: scroll-output
## Loading Data

```{r}
data <- fromJSON("data/MC1_graph.json")
glimpse(data)
```
:::

# Data Preparation

## Extracting
::: {.panel-tabset .nav-pills}

### Edges

```{r}
edges <- as_tibble(data$links)
edge
```

### Nodes

```{r}
nodes <- as_tibble(data$nodes)
nodes
```
:::

## Check Missing Values 
::: {.panel-tabset .nav-pills}
### Edges

```{r}
colSums(is.na(edges))
```

### Nodes

```{r}
colSums(is.na(nodes))
```
:::

## Check for Duplicates
::: {.panel-tabset .nav-pills}

### Edges

```{r}
edges[duplicated(edges),]
```
### Nodes

```{r}
nodes[duplicated(nodes),]
```
:::

# Knowledge Graph

## Mapping from node id to row index

```{r}
id_map <- tibble(id = nodes$id,
                 index = seq_len(
                   nrow(nodes)))
```

## Map source and target IDs to row indices

```{r}
edges <- edges %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

## Filtering out unmatched edges

```{r}
edges <- edges %>%
  filter(!is.na(from), !is.na(to))
```

## Plotting the Whole Graph

```{r}
graph <- tbl_graph(nodes = nodes, edges = edges, directed = data$directed)
```

# Exploratory Data Analysis

## Distribution of Edge Type

```{r}
ggplot(data = edges,
       aes(y = `Edge Type`)) +
  geom_bar() +
  theme_classic() +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))
```

## Distribution of Node Type

```{r}
ggplot(data = nodes,
       aes(y = `Node Type`)) +
  geom_bar() +
  theme_classic() +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))
```

## Understanding the Most Connected Nodes

```{r}
most_connected <- graph %>%
  activate(nodes) %>%
  mutate(degree = centrality_degree()) %>%
  as_tibble() %>%
  arrange(desc(degree)) %>%
  slice_head(n = 10) %>%
  ggplot(aes(x = reorder(name, degree), 
             y = degree, 
             fill = `Node Type`, 
             text = paste("Name:", name, "<br>Degree:", degree))) +
  geom_col() +
  coord_flip() +
  labs(title = "Top 10 Most Connected Nodes", x = "Name", y = "Degree") + 
  scale_fill_manual(values = c(
    "Person" = "#A8E6CF",        
    "MusicalGroup" = "#FFD3B6",  
    "RecordLabel" = "#FFAAA5",   
    "Song" = "#DCD3FF"          
  ))+
  theme_classic() +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA))

ggplotly(most_connected, tooltip = "text")
```
::: {.callout-tip collapse="true"}
### Observations

- **Degree** is a measure in network analysis that represents the number of direct connections a node has to other nodes. 

- Here I plot **Top 10 Most Connected Nodes Plot** to quickly see the key collaborators and influencers based on their direct connections within the community.
:::

## Top Genres

```{r}
nodes %>%
  filter(!is.na(genre)) %>%
  count(genre, sort = TRUE) %>%
  slice_max(n, n = 10) %>%
  ggplot(aes(x = reorder(genre, n), y = n, fill = n)) +
  geom_col() +
  scale_fill_gradient(low = "#cce5ff", high = "#08306b") +
  coord_flip() +
  labs(title = "Top 10 Genres", x = "Genre", y = "Count") +
  theme(plot.background = element_rect(fill = "#FEFCF3",color = NA)) +
  theme_classic() 
```
::: {.callout-tip collapse="true"}
### Observations

- **Oceanus Folk** is among the top genres which align with the narrative that Sailor Shift's rise helped the Oceanus Folk genre into the mainstream music genres.

- **Dream Pop, Indie Folk, and Synthwave** are the most represented genres in the dataset.
:::

# Sub-graph Plot

## Sailor Shiftâ€™s Collaborations

```{r}
sailor_collab <- graph %>% 
  activate(edges) %>%
  filter(`Edge Type` %in% c("PerformerOf", "MemberOf", "ComposerOf", "ProducerOf"))

sailor_index <- sailor_collab %N>%
  mutate(row_id = row_number()) %>%
  filter(name == "Sailor Shift") %>%
  pull(row_id)

neigh_nodes <- neighborhood(sailor_collab, order = 2, nodes = sailor_index)[[1]]
neigh_nodes <- as.integer(neigh_nodes) 

sailor_collab_subgraph <- induced_subgraph(sailor_collab, vids = neigh_nodes)

sailor_collab_subgraph <- as_tbl_graph(sailor_collab_subgraph)

nodes_df <- as_tibble(sailor_collab_subgraph %N>%
                        mutate(id = row_number(),
                               label = name,
                               group = `Node Type`))

edges_df <- as_tibble(sailor_collab_subgraph %E>%
                        mutate(from = as.integer(from),
                               to = as.integer(to)))

visNetwork(nodes_df, edges_df) %>%
  visOptions(highlightNearest = TRUE, selectedBy = "group") %>%
  visLegend() %>%
  visLayout(randomSeed = 123) %>%
  visInteraction(navigationButtons = TRUE) %>% 
  htmlwidgets::onRender("
    function(el, x) {
      el.style.background = '#FEFCF3';
    }
  ")
```


# References

[**VAST Challenge Kickstarter 2**](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter2)
